
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  000030f6  0000318a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080012a  0080012a  00003254  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  00003254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001530  00000000  00000000  00005f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000934d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000afe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_4>
      14:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__vector_9>
      28:	0c 94 af 13 	jmp	0x275e	; 0x275e <__vector_10>
      2c:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e1       	ldi	r26, 0x13	; 19
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e1       	ldi	r24, 0x13	; 19
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "timer.h"
#include "uart.h"
#include "Macros.h"

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e7 97       	sbiw	r28, 0x37	; 55
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0, receivedByte = 0;
     b5a:	1e 8e       	std	Y+30, r1	; 0x1e
     b5c:	1d 8e       	std	Y+29, r1	; 0x1d

	SET_BIT(SREG, PIN7_ID);     /* Enable Global Interrupt (I-bit) */
     b5e:	af e5       	ldi	r26, 0x5F	; 95
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	ef e5       	ldi	r30, 0x5F	; 95
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	80 68       	ori	r24, 0x80	; 128
     b6a:	8c 93       	st	X, r24

	LCD_init();
     b6c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_init>
	 * BaudRate --> 9600 Bps
	 * CharacterSize --> 8 Data Bits
	 * ParityMode --> No Parity
	 * No. of Stop Bits --> One Stop Bit
	 */
	UART_ConfigType configPtr = { 9600, DATA_EIGHT, NO_PARITY, ONE_STOP_BIT };
     b70:	ce 01       	movw	r24, r28
     b72:	4f 96       	adiw	r24, 0x1f	; 31
     b74:	9f a7       	std	Y+47, r25	; 0x2f
     b76:	8e a7       	std	Y+46, r24	; 0x2e
     b78:	e3 e2       	ldi	r30, 0x23	; 35
     b7a:	f1 e0       	ldi	r31, 0x01	; 1
     b7c:	f9 ab       	std	Y+49, r31	; 0x31
     b7e:	e8 ab       	std	Y+48, r30	; 0x30
     b80:	f7 e0       	ldi	r31, 0x07	; 7
     b82:	fa ab       	std	Y+50, r31	; 0x32
     b84:	e8 a9       	ldd	r30, Y+48	; 0x30
     b86:	f9 a9       	ldd	r31, Y+49	; 0x31
     b88:	00 80       	ld	r0, Z
     b8a:	88 a9       	ldd	r24, Y+48	; 0x30
     b8c:	99 a9       	ldd	r25, Y+49	; 0x31
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	99 ab       	std	Y+49, r25	; 0x31
     b92:	88 ab       	std	Y+48, r24	; 0x30
     b94:	ee a5       	ldd	r30, Y+46	; 0x2e
     b96:	ff a5       	ldd	r31, Y+47	; 0x2f
     b98:	00 82       	st	Z, r0
     b9a:	8e a5       	ldd	r24, Y+46	; 0x2e
     b9c:	9f a5       	ldd	r25, Y+47	; 0x2f
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	9f a7       	std	Y+47, r25	; 0x2f
     ba2:	8e a7       	std	Y+46, r24	; 0x2e
     ba4:	9a a9       	ldd	r25, Y+50	; 0x32
     ba6:	91 50       	subi	r25, 0x01	; 1
     ba8:	9a ab       	std	Y+50, r25	; 0x32
     baa:	ea a9       	ldd	r30, Y+50	; 0x32
     bac:	ee 23       	and	r30, r30
     bae:	51 f7       	brne	.-44     	; 0xb84 <main+0x3e>
	UART_init(&configPtr);
     bb0:	ce 01       	movw	r24, r28
     bb2:	4f 96       	adiw	r24, 0x1f	; 31
     bb4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <UART_init>
	 * Timer_Prescaler --> FCPU/1024
	 * Compare Value --> 7813
	 * AS FCPU = 8MHz so Ftimer = 8MHz/1024 = 128us & To force timer to produce interrupt every 1 second
	 * SO Compare Value = 1/128us = 7813
	 */
	Timer_ConfigType config = { TIMER1, COMPARE_MODE, 0, 7813, FCPU_1024, DUMMY };
     bb8:	ce 01       	movw	r24, r28
     bba:	86 96       	adiw	r24, 0x26	; 38
     bbc:	9c ab       	std	Y+52, r25	; 0x34
     bbe:	8b ab       	std	Y+51, r24	; 0x33
     bc0:	eb e1       	ldi	r30, 0x1B	; 27
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	fe ab       	std	Y+54, r31	; 0x36
     bc6:	ed ab       	std	Y+53, r30	; 0x35
     bc8:	f8 e0       	ldi	r31, 0x08	; 8
     bca:	ff ab       	std	Y+55, r31	; 0x37
     bcc:	ed a9       	ldd	r30, Y+53	; 0x35
     bce:	fe a9       	ldd	r31, Y+54	; 0x36
     bd0:	00 80       	ld	r0, Z
     bd2:	8d a9       	ldd	r24, Y+53	; 0x35
     bd4:	9e a9       	ldd	r25, Y+54	; 0x36
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	9e ab       	std	Y+54, r25	; 0x36
     bda:	8d ab       	std	Y+53, r24	; 0x35
     bdc:	eb a9       	ldd	r30, Y+51	; 0x33
     bde:	fc a9       	ldd	r31, Y+52	; 0x34
     be0:	00 82       	st	Z, r0
     be2:	8b a9       	ldd	r24, Y+51	; 0x33
     be4:	9c a9       	ldd	r25, Y+52	; 0x34
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9c ab       	std	Y+52, r25	; 0x34
     bea:	8b ab       	std	Y+51, r24	; 0x33
     bec:	9f a9       	ldd	r25, Y+55	; 0x37
     bee:	91 50       	subi	r25, 0x01	; 1
     bf0:	9f ab       	std	Y+55, r25	; 0x37
     bf2:	ef a9       	ldd	r30, Y+55	; 0x37
     bf4:	ee 23       	and	r30, r30
     bf6:	51 f7       	brne	.-44     	; 0xbcc <main+0x86>

	/* Set the call back function of Timer1 as HMI_timerCallBack */
	Timer_setCallBack(HMI_timerCallBack, TIMER1);
     bf8:	85 e8       	ldi	r24, 0x85	; 133
     bfa:	97 e0       	ldi	r25, 0x07	; 7
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <Timer_setCallBack>
	Timer_init(&config);
     c02:	ce 01       	movw	r24, r28
     c04:	86 96       	adiw	r24, 0x26	; 38
     c06:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <Timer_init>

	g_Password_Match_Status = PASSWORD_UNMATCHED;      /* Initial value of the password status as UNMATCHED */
     c0a:	10 92 38 01 	sts	0x0138, r1

	HMI_SystemPasswordInit(g_InputPassword);           /* Create System password for the first time */
     c0e:	83 e3       	ldi	r24, 0x33	; 51
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 ac 07 	call	0xf58	; 0xf58 <HMI_SystemPasswordInit>

	while(1)
	{
		HMI_AppMainOptions();           /* Displaying the main options to the user */
     c16:	0e 94 95 07 	call	0xf2a	; 0xf2a <HMI_AppMainOptions>

		key = KEYPAD_getPressedKey();   /* Taking input from the keypad */
     c1a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <KEYPAD_getPressedKey>
     c1e:	8e 8f       	std	Y+30, r24	; 0x1e

		if (key == '+')
     c20:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c22:	8b 32       	cpi	r24, 0x2B	; 43
     c24:	09 f0       	breq	.+2      	; 0xc28 <main+0xe2>
     c26:	b4 c0       	rjmp	.+360    	; 0xd90 <main+0x24a>
		{
			LCD_clearScreen();
     c28:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
			LCD_displayString("Enter the pass: ");
     c2c:	80 e6       	ldi	r24, 0x60	; 96
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>
			LCD_moveCursor(1, 0);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_moveCursor>
			HMI_getPassword(g_InputPassword);          /* Get password from user and store it in global array */
     c3c:	83 e3       	ldi	r24, 0x33	; 51
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 90 08 	call	0x1120	; 0x1120 <HMI_getPassword>
			UART_sendByte(READY_TO_SEND);              /* inform Control ECU to start sending */
     c44:	80 e1       	ldi	r24, 0x10	; 16
     c46:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
			HMI_sendPasswordByUART(g_InputPassword);   /* Sending that password to Control ECU */
     c4a:	83 e3       	ldi	r24, 0x33	; 51
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 3b 09 	call	0x1276	; 0x1276 <HMI_sendPasswordByUART>

			UART_sendByte(OPEN_DOOR_OPTION);           /* Inform Control ECU that User chose Open Door Option */
     c52:	89 e1       	ldi	r24, 0x19	; 25
     c54:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>

			/* Control ECU responses [either the password is correct or wrong] */
			receivedByte = UART_recieveByte();
     c58:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     c5c:	8d 8f       	std	Y+29, r24	; 0x1d
			if (receivedByte == UNLOCKING_DOOR)
     c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c60:	81 33       	cpi	r24, 0x31	; 49
     c62:	29 f4       	brne	.+10     	; 0xc6e <main+0x128>
			{
				HMI_OpenDoor();                /* Start displaying door status on LCD */
     c64:	0e 94 d6 09 	call	0x13ac	; 0x13ac <HMI_OpenDoor>
				g_wrongPasswordCounter = 0;    /* Reset the counter */
     c68:	10 92 2c 01 	sts	0x012C, r1
     c6c:	d4 cf       	rjmp	.-88     	; 0xc16 <main+0xd0>
			}
			else if (receivedByte == WRONG_PASSWORD)
     c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c70:	85 32       	cpi	r24, 0x25	; 37
     c72:	89 f6       	brne	.-94     	; 0xc16 <main+0xd0>
			{
				LCD_clearScreen();
     c74:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
				LCD_displayString("Wrong Password");
     c78:	81 e7       	ldi	r24, 0x71	; 113
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>

				g_wrongPasswordCounter++;       /* Increment the counter */
     c80:	80 91 2c 01 	lds	r24, 0x012C
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	80 93 2c 01 	sts	0x012C, r24

				if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
     c8a:	80 91 2c 01 	lds	r24, 0x012C
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	61 f4       	brne	.+24     	; 0xcaa <main+0x164>
				{
					/* System should be locked no inputs from Keypad will be accepted during this time period */
					g_sec = 0;
     c92:	10 92 2b 01 	sts	0x012B, r1
     c96:	10 92 2a 01 	sts	0x012A, r1
					while (g_sec < KEYPAD_LOCKED_PERIOD);
     c9a:	80 91 2a 01 	lds	r24, 0x012A
     c9e:	90 91 2b 01 	lds	r25, 0x012B
     ca2:	8c 33       	cpi	r24, 0x3C	; 60
     ca4:	91 05       	cpc	r25, r1
     ca6:	c8 f3       	brcs	.-14     	; 0xc9a <main+0x154>
     ca8:	b6 cf       	rjmp	.-148    	; 0xc16 <main+0xd0>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	aa ef       	ldi	r26, 0xFA	; 250
     cb0:	b4 e4       	ldi	r27, 0x44	; 68
     cb2:	89 8f       	std	Y+25, r24	; 0x19
     cb4:	9a 8f       	std	Y+26, r25	; 0x1a
     cb6:	ab 8f       	std	Y+27, r26	; 0x1b
     cb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cba:	69 8d       	ldd	r22, Y+25	; 0x19
     cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	4a ef       	ldi	r20, 0xFA	; 250
     cc8:	54 e4       	ldi	r21, 0x44	; 68
     cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	8d 8b       	std	Y+21, r24	; 0x15
     cd4:	9e 8b       	std	Y+22, r25	; 0x16
     cd6:	af 8b       	std	Y+23, r26	; 0x17
     cd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cda:	6d 89       	ldd	r22, Y+21	; 0x15
     cdc:	7e 89       	ldd	r23, Y+22	; 0x16
     cde:	8f 89       	ldd	r24, Y+23	; 0x17
     ce0:	98 8d       	ldd	r25, Y+24	; 0x18
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	5f e3       	ldi	r21, 0x3F	; 63
     cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cee:	88 23       	and	r24, r24
     cf0:	2c f4       	brge	.+10     	; 0xcfc <main+0x1b6>
		__ticks = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9c 8b       	std	Y+20, r25	; 0x14
     cf8:	8b 8b       	std	Y+19, r24	; 0x13
     cfa:	3f c0       	rjmp	.+126    	; 0xd7a <main+0x234>
	else if (__tmp > 65535)
     cfc:	6d 89       	ldd	r22, Y+21	; 0x15
     cfe:	7e 89       	ldd	r23, Y+22	; 0x16
     d00:	8f 89       	ldd	r24, Y+23	; 0x17
     d02:	98 8d       	ldd	r25, Y+24	; 0x18
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	57 e4       	ldi	r21, 0x47	; 71
     d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d10:	18 16       	cp	r1, r24
     d12:	4c f5       	brge	.+82     	; 0xd66 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d14:	69 8d       	ldd	r22, Y+25	; 0x19
     d16:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e2       	ldi	r20, 0x20	; 32
     d22:	51 e4       	ldi	r21, 0x41	; 65
     d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	bc 01       	movw	r22, r24
     d2e:	cd 01       	movw	r24, r26
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9c 8b       	std	Y+20, r25	; 0x14
     d3a:	8b 8b       	std	Y+19, r24	; 0x13
     d3c:	0f c0       	rjmp	.+30     	; 0xd5c <main+0x216>
     d3e:	88 ec       	ldi	r24, 0xC8	; 200
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9a 8b       	std	Y+18, r25	; 0x12
     d44:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d46:	89 89       	ldd	r24, Y+17	; 0x11
     d48:	9a 89       	ldd	r25, Y+18	; 0x12
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <main+0x204>
     d4e:	9a 8b       	std	Y+18, r25	; 0x12
     d50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d52:	8b 89       	ldd	r24, Y+19	; 0x13
     d54:	9c 89       	ldd	r25, Y+20	; 0x14
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	9c 8b       	std	Y+20, r25	; 0x14
     d5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	8b 89       	ldd	r24, Y+19	; 0x13
     d5e:	9c 89       	ldd	r25, Y+20	; 0x14
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	69 f7       	brne	.-38     	; 0xd3e <main+0x1f8>
     d64:	58 cf       	rjmp	.-336    	; 0xc16 <main+0xd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d66:	6d 89       	ldd	r22, Y+21	; 0x15
     d68:	7e 89       	ldd	r23, Y+22	; 0x16
     d6a:	8f 89       	ldd	r24, Y+23	; 0x17
     d6c:	98 8d       	ldd	r25, Y+24	; 0x18
     d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	9c 8b       	std	Y+20, r25	; 0x14
     d78:	8b 8b       	std	Y+19, r24	; 0x13
     d7a:	8b 89       	ldd	r24, Y+19	; 0x13
     d7c:	9c 89       	ldd	r25, Y+20	; 0x14
     d7e:	98 8b       	std	Y+16, r25	; 0x10
     d80:	8f 87       	std	Y+15, r24	; 0x0f
     d82:	8f 85       	ldd	r24, Y+15	; 0x0f
     d84:	98 89       	ldd	r25, Y+16	; 0x10
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <main+0x240>
     d8a:	98 8b       	std	Y+16, r25	; 0x10
     d8c:	8f 87       	std	Y+15, r24	; 0x0f
     d8e:	43 cf       	rjmp	.-378    	; 0xc16 <main+0xd0>
					_delay_ms(MESSAGE_DISPLAY_DELAY);
				}
			}
		}

		else if(key == '-')
     d90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d92:	8d 32       	cpi	r24, 0x2D	; 45
     d94:	09 f0       	breq	.+2      	; 0xd98 <main+0x252>
     d96:	3f cf       	rjmp	.-386    	; 0xc16 <main+0xd0>
		{
			LCD_clearScreen();
     d98:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
			LCD_displayString("Enter the pass: ");
     d9c:	80 e6       	ldi	r24, 0x60	; 96
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>
			LCD_moveCursor(1, 0);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_moveCursor>
			HMI_getPassword(g_InputPassword);          /* Get password from user and store it in global array */
     dac:	83 e3       	ldi	r24, 0x33	; 51
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 90 08 	call	0x1120	; 0x1120 <HMI_getPassword>
			UART_sendByte(READY_TO_SEND);              /* inform Control ECU to start sending */
     db4:	80 e1       	ldi	r24, 0x10	; 16
     db6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
			HMI_sendPasswordByUART(g_InputPassword);   /* Sending that password to Control ECU */
     dba:	83 e3       	ldi	r24, 0x33	; 51
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 3b 09 	call	0x1276	; 0x1276 <HMI_sendPasswordByUART>

			UART_sendByte(CHANGE_PASSWORD_OPTION);     /* inform Control ECU that user chose Change Password Option */
     dc2:	88 e1       	ldi	r24, 0x18	; 24
     dc4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>

			/* Control ECU responses [either the password is correct or wrong] */
			receivedByte = UART_recieveByte();
     dc8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     dcc:	8d 8f       	std	Y+29, r24	; 0x1d

			/* If user enters the old password right, then let user create a new system password*/
			if (receivedByte == CHANGING_PASSWORD)
     dce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dd0:	80 33       	cpi	r24, 0x30	; 48
     dd2:	49 f4       	brne	.+18     	; 0xde6 <main+0x2a0>
			{
				HMI_SystemPasswordInit(g_InputPassword);
     dd4:	83 e3       	ldi	r24, 0x33	; 51
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 ac 07 	call	0xf58	; 0xf58 <HMI_SystemPasswordInit>
				LCD_clearScreen();
     ddc:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
				g_wrongPasswordCounter = 0;      /* reset the counter */
     de0:	10 92 2c 01 	sts	0x012C, r1
     de4:	18 cf       	rjmp	.-464    	; 0xc16 <main+0xd0>
			}
			else if (receivedByte == WRONG_PASSWORD)
     de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de8:	85 32       	cpi	r24, 0x25	; 37
     dea:	09 f0       	breq	.+2      	; 0xdee <main+0x2a8>
     dec:	14 cf       	rjmp	.-472    	; 0xc16 <main+0xd0>
			{
				LCD_clearScreen();
     dee:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
				LCD_displayString("Wrong Password");
     df2:	81 e7       	ldi	r24, 0x71	; 113
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>

				g_wrongPasswordCounter++;       /* Increment the counter */
     dfa:	80 91 2c 01 	lds	r24, 0x012C
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	80 93 2c 01 	sts	0x012C, r24

				if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
     e04:	80 91 2c 01 	lds	r24, 0x012C
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	61 f4       	brne	.+24     	; 0xe24 <main+0x2de>
				{
					/* System should be locked no inputs from Keypad will be accepted during this time period */
					g_sec = 0;
     e0c:	10 92 2b 01 	sts	0x012B, r1
     e10:	10 92 2a 01 	sts	0x012A, r1
					while (g_sec < KEYPAD_LOCKED_PERIOD);
     e14:	80 91 2a 01 	lds	r24, 0x012A
     e18:	90 91 2b 01 	lds	r25, 0x012B
     e1c:	8c 33       	cpi	r24, 0x3C	; 60
     e1e:	91 05       	cpc	r25, r1
     e20:	c8 f3       	brcs	.-14     	; 0xe14 <main+0x2ce>
     e22:	f9 ce       	rjmp	.-526    	; 0xc16 <main+0xd0>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	aa ef       	ldi	r26, 0xFA	; 250
     e2a:	b4 e4       	ldi	r27, 0x44	; 68
     e2c:	8b 87       	std	Y+11, r24	; 0x0b
     e2e:	9c 87       	std	Y+12, r25	; 0x0c
     e30:	ad 87       	std	Y+13, r26	; 0x0d
     e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8f 83       	std	Y+7, r24	; 0x07
     e4e:	98 87       	std	Y+8, r25	; 0x08
     e50:	a9 87       	std	Y+9, r26	; 0x09
     e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <main+0x330>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <main+0x3ae>
	else if (__tmp > 65535)
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <main+0x390>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <main+0x37e>
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <main+0x372>
     ede:	9b ce       	rjmp	.-714    	; 0xc16 <main+0xd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <main+0x3ba>
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	86 ce       	rjmp	.-756    	; 0xc16 <main+0xd0>

00000f0a <HMI_timerCallBack>:

/*
 * Description: Timer Call Back Function the is related to HMI Module
 */
void HMI_timerCallBack(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
     f12:	80 91 2a 01 	lds	r24, 0x012A
     f16:	90 91 2b 01 	lds	r25, 0x012B
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	90 93 2b 01 	sts	0x012B, r25
     f20:	80 93 2a 01 	sts	0x012A, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <HMI_AppMainOptions>:

/*
 * Description: Function to display the application main options
 */
void HMI_AppMainOptions()
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f32:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
     f36:	20 e8       	ldi	r18, 0x80	; 128
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     f44:	2e e8       	ldi	r18, 0x8E	; 142
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	a9 01       	movw	r20, r18
     f4e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <HMI_SystemPasswordInit>:

/*
 * Description: Function to Initialize System Password
 */
void HMI_SystemPasswordInit(uint8 *password)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	60 97       	sbiw	r28, 0x10	; 16
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	98 8b       	std	Y+16, r25	; 0x10
     f6e:	8f 87       	std	Y+15, r24	; 0x0f
     f70:	c7 c0       	rjmp	.+398    	; 0x1100 <HMI_SystemPasswordInit+0x1a8>
	while(g_Password_Match_Status == PASSWORD_UNMATCHED)
	{
		/* Entering the password for the first time */
		LCD_clearScreen();
     f72:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Enter a Password: ");
     f76:	2e e9       	ldi	r18, 0x9E	; 158
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_moveCursor>
		HMI_getPassword(password);
     f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8e:	98 89       	ldd	r25, Y+16	; 0x10
     f90:	0e 94 90 08 	call	0x1120	; 0x1120 <HMI_getPassword>

		/* Sending the password to the Control ECU By UART */
		UART_sendByte(READY_TO_SEND);
     f94:	80 e1       	ldi	r24, 0x10	; 16
     f96:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		while(UART_recieveByte() != READY_TO_RECEIVE);
     f9a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <HMI_SystemPasswordInit+0x42>
		HMI_sendPasswordByUART(g_InputPassword);
     fa2:	83 e3       	ldi	r24, 0x33	; 51
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	0e 94 3b 09 	call	0x1276	; 0x1276 <HMI_sendPasswordByUART>

		/* Entering the confirmation password */
		LCD_clearScreen();
     faa:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Re-Enter the same");
     fae:	21 eb       	ldi	r18, 0xB1	; 177
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "password: ");
     fbc:	23 ec       	ldi	r18, 0xC3	; 195
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	a9 01       	movw	r20, r18
     fc6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 10);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	6a e0       	ldi	r22, 0x0A	; 10
     fce:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_moveCursor>
		HMI_getPassword(password);
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	98 89       	ldd	r25, Y+16	; 0x10
     fd6:	0e 94 90 08 	call	0x1120	; 0x1120 <HMI_getPassword>

		/* Sending the Confirmation password to the Control ECU By UART */
		UART_sendByte(READY_TO_SEND);
     fda:	80 e1       	ldi	r24, 0x10	; 16
     fdc:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		while(UART_recieveByte() != READY_TO_RECEIVE);
     fe0:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     fe4:	80 32       	cpi	r24, 0x20	; 32
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <HMI_SystemPasswordInit+0x88>
		HMI_sendPasswordByUART(g_InputPassword);
     fe8:	83 e3       	ldi	r24, 0x33	; 51
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 3b 09 	call	0x1276	; 0x1276 <HMI_sendPasswordByUART>

		/* Receiving Passwords Match Status from Control ECU By UART */
		while(UART_recieveByte() != READY_TO_SEND);
     ff0:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     ff4:	80 31       	cpi	r24, 0x10	; 16
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <HMI_SystemPasswordInit+0x98>
		UART_sendByte(READY_TO_RECEIVE);
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		g_Password_Match_Status = UART_recieveByte();
     ffe:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
    1002:	80 93 38 01 	sts	0x0138, r24

		/* Checking on the Matching Status */
		if (g_Password_Match_Status == PASSWORD_MATCHED)
    1006:	80 91 38 01 	lds	r24, 0x0138
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	09 f4       	brne	.+2      	; 0x1010 <HMI_SystemPasswordInit+0xb8>
    100e:	7d c0       	rjmp	.+250    	; 0x110a <HMI_SystemPasswordInit+0x1b2>
			break;
		else
		{
			LCD_clearScreen();
    1010:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
			LCD_displayString("PASSWORD MISMATCH");
    1014:	8e ec       	ldi	r24, 0xCE	; 206
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	aa ef       	ldi	r26, 0xFA	; 250
    1022:	b4 e4       	ldi	r27, 0x44	; 68
    1024:	8b 87       	std	Y+11, r24	; 0x0b
    1026:	9c 87       	std	Y+12, r25	; 0x0c
    1028:	ad 87       	std	Y+13, r26	; 0x0d
    102a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a ef       	ldi	r20, 0xFA	; 250
    103a:	54 e4       	ldi	r21, 0x44	; 68
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	98 87       	std	Y+8, r25	; 0x08
    1048:	a9 87       	std	Y+9, r26	; 0x09
    104a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	2c f4       	brge	.+10     	; 0x106e <HMI_SystemPasswordInit+0x116>
		__ticks = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <HMI_SystemPasswordInit+0x194>
	else if (__tmp > 65535)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	3f ef       	ldi	r19, 0xFF	; 255
    107a:	4f e7       	ldi	r20, 0x7F	; 127
    107c:	57 e4       	ldi	r21, 0x47	; 71
    107e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1082:	18 16       	cp	r1, r24
    1084:	4c f5       	brge	.+82     	; 0x10d8 <HMI_SystemPasswordInit+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e2       	ldi	r20, 0x20	; 32
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <HMI_SystemPasswordInit+0x176>
    10b0:	88 ec       	ldi	r24, 0xC8	; 200
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <HMI_SystemPasswordInit+0x164>
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <HMI_SystemPasswordInit+0x158>
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <HMI_SystemPasswordInit+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <HMI_SystemPasswordInit+0x1a0>
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description: Function to Initialize System Password
 */
void HMI_SystemPasswordInit(uint8 *password)
{
	while(g_Password_Match_Status == PASSWORD_UNMATCHED)
    1100:	80 91 38 01 	lds	r24, 0x0138
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <HMI_SystemPasswordInit+0x1b2>
    1108:	34 cf       	rjmp	.-408    	; 0xf72 <HMI_SystemPasswordInit+0x1a>
			LCD_clearScreen();
			LCD_displayString("PASSWORD MISMATCH");
			_delay_ms(MESSAGE_DISPLAY_DELAY);
		}
	}
	g_Password_Match_Status = PASSWORD_UNMATCHED;
    110a:	10 92 38 01 	sts	0x0138, r1
}
    110e:	60 96       	adiw	r28, 0x10	; 16
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <HMI_getPassword>:

/*
 * Description: Function to get password as an input from the keypad and store it in a global array
 */
void HMI_getPassword(uint8 *password)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	62 97       	sbiw	r28, 0x12	; 18
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	9a 8b       	std	Y+18, r25	; 0x12
    1136:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i = 0, key = 0;
    1138:	18 8a       	std	Y+16, r1	; 0x10
    113a:	1f 86       	std	Y+15, r1	; 0x0f
    113c:	8b c0       	rjmp	.+278    	; 0x1254 <HMI_getPassword+0x134>

	/* Taking password of length = 5 from the keypad */
	while(i != PASSWORD_LENGTH)
	{
		key = KEYPAD_getPressedKey();
    113e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <KEYPAD_getPressedKey>
    1142:	8f 87       	std	Y+15, r24	; 0x0f

		if ((key >= 1) && (key <= 9))
    1144:	8f 85       	ldd	r24, Y+15	; 0x0f
    1146:	88 23       	and	r24, r24
    1148:	99 f0       	breq	.+38     	; 0x1170 <HMI_getPassword+0x50>
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	8a 30       	cpi	r24, 0x0A	; 10
    114e:	80 f4       	brcc	.+32     	; 0x1170 <HMI_getPassword+0x50>
		{
			password[i] = key;
    1150:	88 89       	ldd	r24, Y+16	; 0x10
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	89 89       	ldd	r24, Y+17	; 0x11
    1158:	9a 89       	ldd	r25, Y+18	; 0x12
    115a:	fc 01       	movw	r30, r24
    115c:	e2 0f       	add	r30, r18
    115e:	f3 1f       	adc	r31, r19
    1160:	8f 85       	ldd	r24, Y+15	; 0x0f
    1162:	80 83       	st	Z, r24
			LCD_displayCharacter('*');        /* Display '*' on LCD for each number */
    1164:	8a e2       	ldi	r24, 0x2A	; 42
    1166:	0e 94 1c 11 	call	0x2238	; 0x2238 <LCD_displayCharacter>
			i++;
    116a:	88 89       	ldd	r24, Y+16	; 0x10
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	88 8b       	std	Y+16, r24	; 0x10
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	aa ef       	ldi	r26, 0xFA	; 250
    1176:	b3 e4       	ldi	r27, 0x43	; 67
    1178:	8b 87       	std	Y+11, r24	; 0x0b
    117a:	9c 87       	std	Y+12, r25	; 0x0c
    117c:	ad 87       	std	Y+13, r26	; 0x0d
    117e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1180:	6b 85       	ldd	r22, Y+11	; 0x0b
    1182:	7c 85       	ldd	r23, Y+12	; 0x0c
    1184:	8d 85       	ldd	r24, Y+13	; 0x0d
    1186:	9e 85       	ldd	r25, Y+14	; 0x0e
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	4a ef       	ldi	r20, 0xFA	; 250
    118e:	54 e4       	ldi	r21, 0x44	; 68
    1190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8f 83       	std	Y+7, r24	; 0x07
    119a:	98 87       	std	Y+8, r25	; 0x08
    119c:	a9 87       	std	Y+9, r26	; 0x09
    119e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a0:	6f 81       	ldd	r22, Y+7	; 0x07
    11a2:	78 85       	ldd	r23, Y+8	; 0x08
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <HMI_getPassword+0xa2>
		__ticks = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	9e 83       	std	Y+6, r25	; 0x06
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	3f c0       	rjmp	.+126    	; 0x1240 <HMI_getPassword+0x120>
	else if (__tmp > 65535)
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	3f ef       	ldi	r19, 0xFF	; 255
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	57 e4       	ldi	r21, 0x47	; 71
    11d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	4c f5       	brge	.+82     	; 0x122c <HMI_getPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11da:	6b 85       	ldd	r22, Y+11	; 0x0b
    11dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11de:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	0f c0       	rjmp	.+30     	; 0x1222 <HMI_getPassword+0x102>
    1204:	88 ec       	ldi	r24, 0xC8	; 200
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <HMI_getPassword+0xf0>
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	69 f7       	brne	.-38     	; 0x1204 <HMI_getPassword+0xe4>
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <HMI_getPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <HMI_getPassword+0x12c>
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
void HMI_getPassword(uint8 *password)
{
	uint8 i = 0, key = 0;

	/* Taking password of length = 5 from the keypad */
	while(i != PASSWORD_LENGTH)
    1254:	88 89       	ldd	r24, Y+16	; 0x10
    1256:	85 30       	cpi	r24, 0x05	; 5
    1258:	09 f0       	breq	.+2      	; 0x125c <HMI_getPassword+0x13c>
    125a:	71 cf       	rjmp	.-286    	; 0x113e <HMI_getPassword+0x1e>
		/* Delay between each input taken from the keypad */
		_delay_ms(KEYPAD_INPUT_DELAY);
	}

	/* Loop until user presses the ENTER key from the keypad */
	while(KEYPAD_getPressedKey() != ENTER_KEY_PRESSED);
    125c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <KEYPAD_getPressedKey>
    1260:	8d 30       	cpi	r24, 0x0D	; 13
    1262:	e1 f7       	brne	.-8      	; 0x125c <HMI_getPassword+0x13c>
}
    1264:	62 96       	adiw	r28, 0x12	; 18
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <HMI_sendPasswordByUART>:

/*
 * Description: Function to send the entered password Byte by Byte to the Control ECU By UART
 */
void HMI_sendPasswordByUART(uint8 *password)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	61 97       	sbiw	r28, 0x11	; 17
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	99 8b       	std	Y+17, r25	; 0x11
    128c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count = 0;
    128e:	1f 86       	std	Y+15, r1	; 0x0f
    1290:	80 c0       	rjmp	.+256    	; 0x1392 <HMI_sendPasswordByUART+0x11c>

	while(count != PASSWORD_LENGTH)
	{
		UART_sendByte(password[count]);
    1292:	8f 85       	ldd	r24, Y+15	; 0x0f
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	88 89       	ldd	r24, Y+16	; 0x10
    129a:	99 89       	ldd	r25, Y+17	; 0x11
    129c:	fc 01       	movw	r30, r24
    129e:	e2 0f       	add	r30, r18
    12a0:	f3 1f       	adc	r31, r19
    12a2:	80 81       	ld	r24, Z
    12a4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		count++;
    12a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	8f 87       	std	Y+15, r24	; 0x0f
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a8 ec       	ldi	r26, 0xC8	; 200
    12b4:	b2 e4       	ldi	r27, 0x42	; 66
    12b6:	8b 87       	std	Y+11, r24	; 0x0b
    12b8:	9c 87       	std	Y+12, r25	; 0x0c
    12ba:	ad 87       	std	Y+13, r26	; 0x0d
    12bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12be:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	4a ef       	ldi	r20, 0xFA	; 250
    12cc:	54 e4       	ldi	r21, 0x44	; 68
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	8f 83       	std	Y+7, r24	; 0x07
    12d8:	98 87       	std	Y+8, r25	; 0x08
    12da:	a9 87       	std	Y+9, r26	; 0x09
    12dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e8       	ldi	r20, 0x80	; 128
    12ec:	5f e3       	ldi	r21, 0x3F	; 63
    12ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f2:	88 23       	and	r24, r24
    12f4:	2c f4       	brge	.+10     	; 0x1300 <HMI_sendPasswordByUART+0x8a>
		__ticks = 1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	3f c0       	rjmp	.+126    	; 0x137e <HMI_sendPasswordByUART+0x108>
	else if (__tmp > 65535)
    1300:	6f 81       	ldd	r22, Y+7	; 0x07
    1302:	78 85       	ldd	r23, Y+8	; 0x08
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	3f ef       	ldi	r19, 0xFF	; 255
    130c:	4f e7       	ldi	r20, 0x7F	; 127
    130e:	57 e4       	ldi	r21, 0x47	; 71
    1310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1314:	18 16       	cp	r1, r24
    1316:	4c f5       	brge	.+82     	; 0x136a <HMI_sendPasswordByUART+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1318:	6b 85       	ldd	r22, Y+11	; 0x0b
    131a:	7c 85       	ldd	r23, Y+12	; 0x0c
    131c:	8d 85       	ldd	r24, Y+13	; 0x0d
    131e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <HMI_sendPasswordByUART+0xea>
    1342:	88 ec       	ldi	r24, 0xC8	; 200
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <HMI_sendPasswordByUART+0xd8>
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	69 f7       	brne	.-38     	; 0x1342 <HMI_sendPasswordByUART+0xcc>
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <HMI_sendPasswordByUART+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136a:	6f 81       	ldd	r22, Y+7	; 0x07
    136c:	78 85       	ldd	r23, Y+8	; 0x08
    136e:	89 85       	ldd	r24, Y+9	; 0x09
    1370:	9a 85       	ldd	r25, Y+10	; 0x0a
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <HMI_sendPasswordByUART+0x114>
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
 */
void HMI_sendPasswordByUART(uint8 *password)
{
	uint8 count = 0;

	while(count != PASSWORD_LENGTH)
    1392:	8f 85       	ldd	r24, Y+15	; 0x0f
    1394:	85 30       	cpi	r24, 0x05	; 5
    1396:	09 f0       	breq	.+2      	; 0x139a <HMI_sendPasswordByUART+0x124>
    1398:	7c cf       	rjmp	.-264    	; 0x1292 <HMI_sendPasswordByUART+0x1c>
	{
		UART_sendByte(password[count]);
		count++;
		_delay_ms(100);
	}
}
    139a:	61 96       	adiw	r28, 0x11	; 17
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <HMI_OpenDoor>:

/*
 * Description: A function that displays on LCD that door is opening or closing for a certain period of time
 */
void HMI_OpenDoor(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	/* Hold the system for 15 seconds & display to user that door is unlocking */
	g_sec = 0;
    13b4:	10 92 2b 01 	sts	0x012B, r1
    13b8:	10 92 2a 01 	sts	0x012A, r1
	LCD_clearScreen();
    13bc:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is unlocking");
    13c0:	20 ee       	ldi	r18, 0xE0	; 224
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
	while (g_sec < DOOR_UNLOCKING_PERIOD);
    13ce:	80 91 2a 01 	lds	r24, 0x012A
    13d2:	90 91 2b 01 	lds	r25, 0x012B
    13d6:	8f 30       	cpi	r24, 0x0F	; 15
    13d8:	91 05       	cpc	r25, r1
    13da:	c8 f3       	brcs	.-14     	; 0x13ce <HMI_OpenDoor+0x22>

	/* Hold the door open for 3 seconds */
	g_sec = 0;
    13dc:	10 92 2b 01 	sts	0x012B, r1
    13e0:	10 92 2a 01 	sts	0x012A, r1
	LCD_clearScreen();
    13e4:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is now open");
    13e8:	22 ef       	ldi	r18, 0xF2	; 242
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
	while (g_sec < DOOR_LEFT_OPEN_PERIOD);
    13f6:	80 91 2a 01 	lds	r24, 0x012A
    13fa:	90 91 2b 01 	lds	r25, 0x012B
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	c8 f3       	brcs	.-14     	; 0x13f6 <HMI_OpenDoor+0x4a>

	/* Hold the system for 15 seconds & display to user that door is locking */
	g_sec = 0;
    1404:	10 92 2b 01 	sts	0x012B, r1
    1408:	10 92 2a 01 	sts	0x012A, r1
	LCD_clearScreen();
    140c:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is locking");
    1410:	23 e0       	ldi	r18, 0x03	; 3
    1412:	31 e0       	ldi	r19, 0x01	; 1
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayStringRowColumn>
	while (g_sec < DOOR_LOCKING_PERIOD);
    141e:	80 91 2a 01 	lds	r24, 0x012A
    1422:	90 91 2b 01 	lds	r25, 0x012B
    1426:	8f 30       	cpi	r24, 0x0F	; 15
    1428:	91 05       	cpc	r25, r1
    142a:	c8 f3       	brcs	.-14     	; 0x141e <HMI_OpenDoor+0x72>
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum, GPIO_PinDirectionType direction)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	27 97       	sbiw	r28, 0x07	; 7
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	6a 83       	std	Y+2, r22	; 0x02
    144a:	4b 83       	std	Y+3, r20	; 0x03

	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	88 30       	cpi	r24, 0x08	; 8
    1450:	08 f0       	brcs	.+2      	; 0x1454 <GPIO_setupPinDirection+0x22>
    1452:	ee c0       	rjmp	.+476    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	08 f0       	brcs	.+2      	; 0x145c <GPIO_setupPinDirection+0x2a>
    145a:	ea c0       	rjmp	.+468    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
	{
		/* Do Nothing */
		return;
	}

	if (direction == PIN_OUTPUT)
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	09 f0       	breq	.+2      	; 0x1464 <GPIO_setupPinDirection+0x32>
    1462:	6f c0       	rjmp	.+222    	; 0x1542 <GPIO_setupPinDirection+0x110>
	{
		switch (portNum)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3f 83       	std	Y+7, r19	; 0x07
    146c:	2e 83       	std	Y+6, r18	; 0x06
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	49 f1       	breq	.+82     	; 0x14ca <GPIO_setupPinDirection+0x98>
    1478:	2e 81       	ldd	r18, Y+6	; 0x06
    147a:	3f 81       	ldd	r19, Y+7	; 0x07
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <GPIO_setupPinDirection+0x5a>
    1482:	8e 81       	ldd	r24, Y+6	; 0x06
    1484:	9f 81       	ldd	r25, Y+7	; 0x07
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	61 f0       	breq	.+24     	; 0x14a2 <GPIO_setupPinDirection+0x70>
    148a:	d2 c0       	rjmp	.+420    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
    148c:	2e 81       	ldd	r18, Y+6	; 0x06
    148e:	3f 81       	ldd	r19, Y+7	; 0x07
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	71 f1       	breq	.+92     	; 0x14f2 <GPIO_setupPinDirection+0xc0>
    1496:	8e 81       	ldd	r24, Y+6	; 0x06
    1498:	9f 81       	ldd	r25, Y+7	; 0x07
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	e9 f1       	breq	.+122    	; 0x151a <GPIO_setupPinDirection+0xe8>
    14a0:	c7 c0       	rjmp	.+398    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
		{
		case PORTA_ID:
			SET_BIT(DDRA, pinNum);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_setupPinDirection+0x8e>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_setupPinDirection+0x8a>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	b3 c0       	rjmp	.+358    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTB_ID:
			SET_BIT(DDRB, pinNum);
    14ca:	a7 e3       	ldi	r26, 0x37	; 55
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e7 e3       	ldi	r30, 0x37	; 55
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_setupPinDirection+0xb6>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <GPIO_setupPinDirection+0xb2>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	9f c0       	rjmp	.+318    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTC_ID:
			SET_BIT(DDRC, pinNum);
    14f2:	a4 e3       	ldi	r26, 0x34	; 52
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e4 e3       	ldi	r30, 0x34	; 52
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_setupPinDirection+0xde>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_setupPinDirection+0xda>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	8b c0       	rjmp	.+278    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTD_ID:
			SET_BIT(DDRD, pinNum);
    151a:	a1 e3       	ldi	r26, 0x31	; 49
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_setupPinDirection+0x106>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_setupPinDirection+0x102>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	77 c0       	rjmp	.+238    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		}
	}
	else if (direction == PIN_INPUT)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 23       	and	r24, r24
    1546:	09 f0       	breq	.+2      	; 0x154a <GPIO_setupPinDirection+0x118>
    1548:	73 c0       	rjmp	.+230    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
	{
		switch (portNum)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3d 83       	std	Y+5, r19	; 0x05
    1552:	2c 83       	std	Y+4, r18	; 0x04
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	59 f1       	breq	.+86     	; 0x15b4 <GPIO_setupPinDirection+0x182>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <GPIO_setupPinDirection+0x140>
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f0       	breq	.+26     	; 0x158a <GPIO_setupPinDirection+0x158>
    1570:	5f c0       	rjmp	.+190    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	89 f1       	breq	.+98     	; 0x15de <GPIO_setupPinDirection+0x1ac>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <GPIO_setupPinDirection+0x156>
    1586:	40 c0       	rjmp	.+128    	; 0x1608 <GPIO_setupPinDirection+0x1d6>
    1588:	53 c0       	rjmp	.+166    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
		{
		case PORTA_ID:
			CLEAR_BIT(DDRA, pinNum);
    158a:	aa e3       	ldi	r26, 0x3A	; 58
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ea e3       	ldi	r30, 0x3A	; 58
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_setupPinDirection+0x176>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_setupPinDirection+0x172>
    15ac:	80 95       	com	r24
    15ae:	84 23       	and	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	3e c0       	rjmp	.+124    	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTB_ID:
			CLEAR_BIT(DDRB, pinNum);
    15b4:	a7 e3       	ldi	r26, 0x37	; 55
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_setupPinDirection+0x1a0>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_setupPinDirection+0x19c>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	29 c0       	rjmp	.+82     	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTC_ID:
			CLEAR_BIT(DDRC, pinNum);
    15de:	a4 e3       	ldi	r26, 0x34	; 52
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e4 e3       	ldi	r30, 0x34	; 52
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_setupPinDirection+0x1ca>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_setupPinDirection+0x1c6>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTD_ID:
			CLEAR_BIT(DDRD, pinNum);
    1608:	a1 e3       	ldi	r26, 0x31	; 49
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e1 e3       	ldi	r30, 0x31	; 49
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <GPIO_setupPinDirection+0x1f4>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <GPIO_setupPinDirection+0x1f0>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
			break;
		}
	}
	else
		return;
}
    1630:	27 96       	adiw	r28, 0x07	; 7
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	2d 97       	sbiw	r28, 0x0d	; 13
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	6a 83       	std	Y+2, r22	; 0x02
    165a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	08 f0       	brcs	.+2      	; 0x1664 <GPIO_writePin+0x22>
    1662:	05 c1       	rjmp	.+522    	; 0x186e <GPIO_writePin+0x22c>
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	08 f0       	brcs	.+2      	; 0x166c <GPIO_writePin+0x2a>
    166a:	01 c1       	rjmp	.+514    	; 0x186e <GPIO_writePin+0x22c>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3d 87       	std	Y+13, r19	; 0x0d
    1674:	2c 87       	std	Y+12, r18	; 0x0c
    1676:	8c 85       	ldd	r24, Y+12	; 0x0c
    1678:	9d 85       	ldd	r25, Y+13	; 0x0d
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <GPIO_writePin+0x40>
    1680:	4f c0       	rjmp	.+158    	; 0x1720 <GPIO_writePin+0xde>
    1682:	2c 85       	ldd	r18, Y+12	; 0x0c
    1684:	3d 85       	ldd	r19, Y+13	; 0x0d
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	2c f4       	brge	.+10     	; 0x1696 <GPIO_writePin+0x54>
    168c:	8c 85       	ldd	r24, Y+12	; 0x0c
    168e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	71 f0       	breq	.+28     	; 0x16b0 <GPIO_writePin+0x6e>
    1694:	ec c0       	rjmp	.+472    	; 0x186e <GPIO_writePin+0x22c>
    1696:	2c 85       	ldd	r18, Y+12	; 0x0c
    1698:	3d 85       	ldd	r19, Y+13	; 0x0d
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <GPIO_writePin+0x60>
    16a0:	77 c0       	rjmp	.+238    	; 0x1790 <GPIO_writePin+0x14e>
    16a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <GPIO_writePin+0x6c>
    16ac:	a9 c0       	rjmp	.+338    	; 0x1800 <GPIO_writePin+0x1be>
    16ae:	df c0       	rjmp	.+446    	; 0x186e <GPIO_writePin+0x22c>
		{
		case PORTA_ID:
			WRITE_BIT(PORTA, pin_num, value);
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3b 87       	std	Y+11, r19	; 0x0b
    16b8:	2a 87       	std	Y+10, r18	; 0x0a
    16ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    16bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	31 f0       	breq	.+12     	; 0x16ce <GPIO_writePin+0x8c>
    16c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    16c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    16c6:	21 30       	cpi	r18, 0x01	; 1
    16c8:	31 05       	cpc	r19, r1
    16ca:	b1 f0       	breq	.+44     	; 0x16f8 <GPIO_writePin+0xb6>
    16cc:	d0 c0       	rjmp	.+416    	; 0x186e <GPIO_writePin+0x22c>
    16ce:	ab e3       	ldi	r26, 0x3B	; 59
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb e3       	ldi	r30, 0x3B	; 59
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_writePin+0xaa>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_writePin+0xa6>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	bb c0       	rjmp	.+374    	; 0x186e <GPIO_writePin+0x22c>
    16f8:	ab e3       	ldi	r26, 0x3B	; 59
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_writePin+0xd4>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_writePin+0xd0>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	a7 c0       	rjmp	.+334    	; 0x186e <GPIO_writePin+0x22c>
			break;
		case PORTB_ID:
			WRITE_BIT(PORTB, pin_num, value);
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	39 87       	std	Y+9, r19	; 0x09
    1728:	28 87       	std	Y+8, r18	; 0x08
    172a:	88 85       	ldd	r24, Y+8	; 0x08
    172c:	99 85       	ldd	r25, Y+9	; 0x09
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	31 f0       	breq	.+12     	; 0x173e <GPIO_writePin+0xfc>
    1732:	28 85       	ldd	r18, Y+8	; 0x08
    1734:	39 85       	ldd	r19, Y+9	; 0x09
    1736:	21 30       	cpi	r18, 0x01	; 1
    1738:	31 05       	cpc	r19, r1
    173a:	b1 f0       	breq	.+44     	; 0x1768 <GPIO_writePin+0x126>
    173c:	98 c0       	rjmp	.+304    	; 0x186e <GPIO_writePin+0x22c>
    173e:	a8 e3       	ldi	r26, 0x38	; 56
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e8 e3       	ldi	r30, 0x38	; 56
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <GPIO_writePin+0x11a>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <GPIO_writePin+0x116>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	83 c0       	rjmp	.+262    	; 0x186e <GPIO_writePin+0x22c>
    1768:	a8 e3       	ldi	r26, 0x38	; 56
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e8 e3       	ldi	r30, 0x38	; 56
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_writePin+0x144>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_writePin+0x140>
    178a:	84 2b       	or	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	6f c0       	rjmp	.+222    	; 0x186e <GPIO_writePin+0x22c>
			break;
		case PORTC_ID:
			WRITE_BIT(PORTC, pin_num, value);
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3f 83       	std	Y+7, r19	; 0x07
    1798:	2e 83       	std	Y+6, r18	; 0x06
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	9f 81       	ldd	r25, Y+7	; 0x07
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	31 f0       	breq	.+12     	; 0x17ae <GPIO_writePin+0x16c>
    17a2:	2e 81       	ldd	r18, Y+6	; 0x06
    17a4:	3f 81       	ldd	r19, Y+7	; 0x07
    17a6:	21 30       	cpi	r18, 0x01	; 1
    17a8:	31 05       	cpc	r19, r1
    17aa:	b1 f0       	breq	.+44     	; 0x17d8 <GPIO_writePin+0x196>
    17ac:	60 c0       	rjmp	.+192    	; 0x186e <GPIO_writePin+0x22c>
    17ae:	a5 e3       	ldi	r26, 0x35	; 53
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e5 e3       	ldi	r30, 0x35	; 53
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0x18a>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0x186>
    17d0:	80 95       	com	r24
    17d2:	84 23       	and	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	4b c0       	rjmp	.+150    	; 0x186e <GPIO_writePin+0x22c>
    17d8:	a5 e3       	ldi	r26, 0x35	; 53
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e5 e3       	ldi	r30, 0x35	; 53
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 2e       	mov	r0, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <GPIO_writePin+0x1b4>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <GPIO_writePin+0x1b0>
    17fa:	84 2b       	or	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	37 c0       	rjmp	.+110    	; 0x186e <GPIO_writePin+0x22c>
			break;
		case PORTD_ID:
			WRITE_BIT(PORTD, pin_num, value);
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3d 83       	std	Y+5, r19	; 0x05
    1808:	2c 83       	std	Y+4, r18	; 0x04
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	31 f0       	breq	.+12     	; 0x181e <GPIO_writePin+0x1dc>
    1812:	2c 81       	ldd	r18, Y+4	; 0x04
    1814:	3d 81       	ldd	r19, Y+5	; 0x05
    1816:	21 30       	cpi	r18, 0x01	; 1
    1818:	31 05       	cpc	r19, r1
    181a:	b1 f0       	breq	.+44     	; 0x1848 <GPIO_writePin+0x206>
    181c:	28 c0       	rjmp	.+80     	; 0x186e <GPIO_writePin+0x22c>
    181e:	a2 e3       	ldi	r26, 0x32	; 50
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_writePin+0x1fa>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_writePin+0x1f6>
    1840:	80 95       	com	r24
    1842:	84 23       	and	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	13 c0       	rjmp	.+38     	; 0x186e <GPIO_writePin+0x22c>
    1848:	a2 e3       	ldi	r26, 0x32	; 50
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e2 e3       	ldi	r30, 0x32	; 50
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_writePin+0x224>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_writePin+0x220>
    186a:	84 2b       	or	r24, r20
    186c:	8c 93       	st	X, r24
			break;
		}
	}
}
    186e:	2d 96       	adiw	r28, 0x0d	; 13
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <GPIO_readPin+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <GPIO_readPin+0x8>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	18 f4       	brcc	.+6      	; 0x189e <GPIO_readPin+0x1e>
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	10 f0       	brcs	.+4      	; 0x18a2 <GPIO_readPin+0x22>
	{
		pinValue = LOGIC_LOW;
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	67 c0       	rjmp	.+206    	; 0x1970 <GPIO_readPin+0xf0>
	}
	else
	{
		switch (port_num)
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3d 83       	std	Y+5, r19	; 0x05
    18aa:	2c 83       	std	Y+4, r18	; 0x04
    18ac:	4c 81       	ldd	r20, Y+4	; 0x04
    18ae:	5d 81       	ldd	r21, Y+5	; 0x05
    18b0:	41 30       	cpi	r20, 0x01	; 1
    18b2:	51 05       	cpc	r21, r1
    18b4:	41 f1       	breq	.+80     	; 0x1906 <GPIO_readPin+0x86>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	91 05       	cpc	r25, r1
    18be:	34 f4       	brge	.+12     	; 0x18cc <GPIO_readPin+0x4c>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <GPIO_readPin+0x62>
    18ca:	52 c0       	rjmp	.+164    	; 0x1970 <GPIO_readPin+0xf0>
    18cc:	4c 81       	ldd	r20, Y+4	; 0x04
    18ce:	5d 81       	ldd	r21, Y+5	; 0x05
    18d0:	42 30       	cpi	r20, 0x02	; 2
    18d2:	51 05       	cpc	r21, r1
    18d4:	51 f1       	breq	.+84     	; 0x192a <GPIO_readPin+0xaa>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	b9 f1       	breq	.+110    	; 0x194e <GPIO_readPin+0xce>
    18e0:	47 c0       	rjmp	.+142    	; 0x1970 <GPIO_readPin+0xf0>
		{
		case PORTA_ID:
			pinValue = GET_BIT(PINA, pin_num);
    18e2:	e9 e3       	ldi	r30, 0x39	; 57
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a9 01       	movw	r20, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_readPin+0x7a>
    18f6:	55 95       	asr	r21
    18f8:	47 95       	ror	r20
    18fa:	8a 95       	dec	r24
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_readPin+0x76>
    18fe:	ca 01       	movw	r24, r20
    1900:	81 70       	andi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	35 c0       	rjmp	.+106    	; 0x1970 <GPIO_readPin+0xf0>
			break;
		case PORTB_ID:
			pinValue = GET_BIT(PINB, pin_num);
    1906:	e6 e3       	ldi	r30, 0x36	; 54
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a9 01       	movw	r20, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_readPin+0x9e>
    191a:	55 95       	asr	r21
    191c:	47 95       	ror	r20
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_readPin+0x9a>
    1922:	ca 01       	movw	r24, r20
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	23 c0       	rjmp	.+70     	; 0x1970 <GPIO_readPin+0xf0>
			break;
		case PORTC_ID:
			pinValue = GET_BIT(PINC, pin_num);
    192a:	e3 e3       	ldi	r30, 0x33	; 51
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a9 01       	movw	r20, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <GPIO_readPin+0xc2>
    193e:	55 95       	asr	r21
    1940:	47 95       	ror	r20
    1942:	8a 95       	dec	r24
    1944:	e2 f7       	brpl	.-8      	; 0x193e <GPIO_readPin+0xbe>
    1946:	ca 01       	movw	r24, r20
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	11 c0       	rjmp	.+34     	; 0x1970 <GPIO_readPin+0xf0>
			break;
		case PORTD_ID:
			pinValue = GET_BIT(PIND, pin_num);
    194e:	e0 e3       	ldi	r30, 0x30	; 48
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a9 01       	movw	r20, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_readPin+0xe6>
    1962:	55 95       	asr	r21
    1964:	47 95       	ror	r20
    1966:	8a 95       	dec	r24
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_readPin+0xe2>
    196a:	ca 01       	movw	r24, r20
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    1970:	89 81       	ldd	r24, Y+1	; 0x01
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <GPIO_setupPortDirection+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <GPIO_setupPortDirection+0x8>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	90 f5       	brcc	.+100    	; 0x19fc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3c 83       	std	Y+4, r19	; 0x04
    19a0:	2b 83       	std	Y+3, r18	; 0x03
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	91 05       	cpc	r25, r1
    19aa:	d1 f0       	breq	.+52     	; 0x19e0 <GPIO_setupPortDirection+0x5e>
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	3c 81       	ldd	r19, Y+4	; 0x04
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <GPIO_setupPortDirection+0x3e>
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	61 f0       	breq	.+24     	; 0x19d6 <GPIO_setupPortDirection+0x54>
    19be:	1e c0       	rjmp	.+60     	; 0x19fc <GPIO_setupPortDirection+0x7a>
    19c0:	2b 81       	ldd	r18, Y+3	; 0x03
    19c2:	3c 81       	ldd	r19, Y+4	; 0x04
    19c4:	22 30       	cpi	r18, 0x02	; 2
    19c6:	31 05       	cpc	r19, r1
    19c8:	81 f0       	breq	.+32     	; 0x19ea <GPIO_setupPortDirection+0x68>
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	91 05       	cpc	r25, r1
    19d2:	81 f0       	breq	.+32     	; 0x19f4 <GPIO_setupPortDirection+0x72>
    19d4:	13 c0       	rjmp	.+38     	; 0x19fc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19d6:	ea e3       	ldi	r30, 0x3A	; 58
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	80 83       	st	Z, r24
    19de:	0e c0       	rjmp	.+28     	; 0x19fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19e0:	e7 e3       	ldi	r30, 0x37	; 55
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	80 83       	st	Z, r24
    19e8:	09 c0       	rjmp	.+18     	; 0x19fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19ea:	e4 e3       	ldi	r30, 0x34	; 52
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	80 83       	st	Z, r24
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19f4:	e1 e3       	ldi	r30, 0x31	; 49
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <GPIO_writePort+0x6>
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <GPIO_writePort+0x8>
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	84 30       	cpi	r24, 0x04	; 4
    1a1e:	90 f5       	brcc	.+100    	; 0x1a84 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write value on a specific port as required */
		switch (port_num)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3c 83       	std	Y+4, r19	; 0x04
    1a28:	2b 83       	std	Y+3, r18	; 0x03
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	91 05       	cpc	r25, r1
    1a32:	d1 f0       	breq	.+52     	; 0x1a68 <GPIO_writePort+0x5e>
    1a34:	2b 81       	ldd	r18, Y+3	; 0x03
    1a36:	3c 81       	ldd	r19, Y+4	; 0x04
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <GPIO_writePort+0x3e>
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <GPIO_writePort+0x54>
    1a46:	1e c0       	rjmp	.+60     	; 0x1a84 <GPIO_writePort+0x7a>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	81 f0       	breq	.+32     	; 0x1a72 <GPIO_writePort+0x68>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	91 05       	cpc	r25, r1
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <GPIO_writePort+0x72>
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a5e:	eb e3       	ldi	r30, 0x3B	; 59
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	80 83       	st	Z, r24
    1a66:	0e c0       	rjmp	.+28     	; 0x1a84 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	80 83       	st	Z, r24
    1a70:	09 c0       	rjmp	.+18     	; 0x1a84 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a72:	e5 e3       	ldi	r30, 0x35	; 53
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	80 83       	st	Z, r24
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a7c:	e2 e3       	ldi	r30, 0x32	; 50
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <GPIO_readPort+0x6>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <GPIO_readPort+0x8>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue;
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <GPIO_readPort+0x18>
	{
		portValue = LOGIC_LOW;
    1aa6:	19 82       	std	Y+1, r1	; 0x01
    1aa8:	32 c0       	rjmp	.+100    	; 0x1b0e <GPIO_readPort+0x7c>
	}
	else
	{
		/* Read and return value on a specific port as required */
		switch (port_num)
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3c 83       	std	Y+4, r19	; 0x04
    1ab2:	2b 83       	std	Y+3, r18	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <GPIO_readPort+0x60>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <GPIO_readPort+0x40>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <GPIO_readPort+0x56>
    1ad0:	1e c0       	rjmp	.+60     	; 0x1b0e <GPIO_readPort+0x7c>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	81 f0       	breq	.+32     	; 0x1afc <GPIO_readPort+0x6a>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <GPIO_readPort+0x74>
    1ae6:	13 c0       	rjmp	.+38     	; 0x1b0e <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			portValue =  PINA;
    1ae8:	e9 e3       	ldi	r30, 0x39	; 57
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			portValue =  PINB;
    1af2:	e6 e3       	ldi	r30, 0x36	; 54
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	09 c0       	rjmp	.+18     	; 0x1b0e <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			portValue =  PINC;
    1afc:	e3 e3       	ldi	r30, 0x33	; 51
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	04 c0       	rjmp	.+8      	; 0x1b0e <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			portValue =  PIND;
    1b06:	e0 e3       	ldi	r30, 0x30	; 48
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return portValue;
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <KEYPAD_getPressedKey+0x6>
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b2c:	1b 82       	std	Y+3, r1	; 0x03
    1b2e:	43 c0       	rjmp	.+134    	; 0x1bb6 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	0e 94 c1 0c 	call	0x1982	; 0x1982 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	9c 5f       	subi	r25, 0xFC	; 252
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	69 2f       	mov	r22, r25
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 01       	movw	r18, r24
    1b50:	2c 5f       	subi	r18, 0xFC	; 252
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <KEYPAD_getPressedKey+0x40>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	2a 95       	dec	r18
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <KEYPAD_getPressedKey+0x3c>
    1b62:	80 95       	com	r24
    1b64:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	69 81       	ldd	r22, Y+1	; 0x01
    1b6a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b6e:	1a 82       	std	Y+2, r1	; 0x02
    1b70:	1c c0       	rjmp	.+56     	; 0x1baa <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	6a 81       	ldd	r22, Y+2	; 0x02
    1b76:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_readPin>
    1b7a:	88 23       	and	r24, r24
    1b7c:	99 f4       	brne	.+38     	; 0x1ba4 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	89 0f       	add	r24, r25
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	08 f3       	brcs	.-62     	; 0x1b72 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	08 f4       	brcc	.+2      	; 0x1bbe <KEYPAD_getPressedKey+0xa0>
    1bbc:	b9 cf       	rjmp	.-142    	; 0x1b30 <KEYPAD_getPressedKey+0x12>
    1bbe:	b6 cf       	rjmp	.-148    	; 0x1b2c <KEYPAD_getPressedKey+0xe>

00001bc0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bce:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3c 83       	std	Y+4, r19	; 0x04
    1bd8:	2b 83       	std	Y+3, r18	; 0x03
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1be4:	70 c0       	rjmp	.+224    	; 0x1cc6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1be6:	2b 81       	ldd	r18, Y+3	; 0x03
    1be8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bea:	29 30       	cpi	r18, 0x09	; 9
    1bec:	31 05       	cpc	r19, r1
    1bee:	5c f5       	brge	.+86     	; 0x1c46 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1bfa:	59 c0       	rjmp	.+178    	; 0x1cae <KEYPAD_4x4_adjustKeyNumber+0xee>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	25 30       	cpi	r18, 0x05	; 5
    1c02:	31 05       	cpc	r19, r1
    1c04:	9c f4       	brge	.+38     	; 0x1c2c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c10:	48 c0       	rjmp	.+144    	; 0x1ca2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	23 30       	cpi	r18, 0x03	; 3
    1c18:	31 05       	cpc	r19, r1
    1c1a:	0c f0       	brlt	.+2      	; 0x1c1e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c1c:	45 c0       	rjmp	.+138    	; 0x1ca8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c28:	39 c0       	rjmp	.+114    	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c2a:	67 c0       	rjmp	.+206    	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	26 30       	cpi	r18, 0x06	; 6
    1c32:	31 05       	cpc	r19, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c36:	41 c0       	rjmp	.+130    	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	87 30       	cpi	r24, 0x07	; 7
    1c3e:	91 05       	cpc	r25, r1
    1c40:	0c f0       	brlt	.+2      	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c42:	3e c0       	rjmp	.+124    	; 0x1cc0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c44:	37 c0       	rjmp	.+110    	; 0x1cb4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	2c 30       	cpi	r18, 0x0C	; 12
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c50:	46 c0       	rjmp	.+140    	; 0x1cde <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	8d 30       	cpi	r24, 0x0D	; 13
    1c58:	91 05       	cpc	r25, r1
    1c5a:	5c f4       	brge	.+22     	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	2a 30       	cpi	r18, 0x0A	; 10
    1c62:	31 05       	cpc	r19, r1
    1c64:	b1 f1       	breq	.+108    	; 0x1cd2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	8b 30       	cpi	r24, 0x0B	; 11
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	a4 f5       	brge	.+104    	; 0x1cd8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c70:	2d c0       	rjmp	.+90     	; 0x1ccc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	2e 30       	cpi	r18, 0x0E	; 14
    1c78:	31 05       	cpc	r19, r1
    1c7a:	b9 f1       	breq	.+110    	; 0x1cea <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	8e 30       	cpi	r24, 0x0E	; 14
    1c82:	91 05       	cpc	r25, r1
    1c84:	7c f1       	brlt	.+94     	; 0x1ce4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c86:	2b 81       	ldd	r18, Y+3	; 0x03
    1c88:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8a:	2f 30       	cpi	r18, 0x0F	; 15
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	79 f1       	breq	.+94     	; 0x1cee <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	80 31       	cpi	r24, 0x10	; 16
    1c96:	91 05       	cpc	r25, r1
    1c98:	69 f1       	breq	.+90     	; 0x1cf4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c9a:	2f c0       	rjmp	.+94     	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c9c:	87 e0       	ldi	r24, 0x07	; 7
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	2e c0       	rjmp	.+92     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ca2:	88 e0       	ldi	r24, 0x08	; 8
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	2b c0       	rjmp	.+86     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ca8:	89 e0       	ldi	r24, 0x09	; 9
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	28 c0       	rjmp	.+80     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1cae:	85 e2       	ldi	r24, 0x25	; 37
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	25 c0       	rjmp	.+74     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cb4:	84 e0       	ldi	r24, 0x04	; 4
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	22 c0       	rjmp	.+68     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cba:	85 e0       	ldi	r24, 0x05	; 5
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	1f c0       	rjmp	.+62     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cc0:	86 e0       	ldi	r24, 0x06	; 6
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	1c c0       	rjmp	.+56     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1cc6:	8a e2       	ldi	r24, 0x2A	; 42
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	19 c0       	rjmp	.+50     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	16 c0       	rjmp	.+44     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	13 c0       	rjmp	.+38     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	10 c0       	rjmp	.+32     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cde:	8d e2       	ldi	r24, 0x2D	; 45
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ce4:	8d e0       	ldi	r24, 0x0D	; 13
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	0a c0       	rjmp	.+20     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1cea:	19 82       	std	Y+1, r1	; 0x01
    1cec:	08 c0       	rjmp	.+16     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1cee:	8d e3       	ldi	r24, 0x3D	; 61
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1cf4:	8b e2       	ldi	r24, 0x2B	; 43
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	2e 97       	sbiw	r28, 0x0e	; 14
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);            /* LCD Write Mode */
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d50:	b1 e4       	ldi	r27, 0x41	; 65
    1d52:	8b 87       	std	Y+11, r24	; 0x0b
    1d54:	9c 87       	std	Y+12, r25	; 0x0c
    1d56:	ad 87       	std	Y+13, r26	; 0x0d
    1d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8f 83       	std	Y+7, r24	; 0x07
    1d74:	98 87       	std	Y+8, r25	; 0x08
    1d76:	a9 87       	std	Y+9, r26	; 0x09
    1d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_init+0x8e>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_init+0x10c>
	else if (__tmp > 65535)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_init+0xee>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_init+0xdc>
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_init+0xd0>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_init+0x118>
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	6f ef       	ldi	r22, 0xFF	; 255
    1e32:	0e 94 c1 0c 	call	0x1982	; 0x1982 <GPIO_setupPortDirection>

	/* Use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1e36:	88 e3       	ldi	r24, 0x38	; 56
    1e38:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);      /* Cursor off */
    1e3c:	8c e0       	ldi	r24, 0x0C	; 12
    1e3e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);    /* Clear LCD at the beginning */
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <LCD_sendCommand>
}
    1e48:	2e 96       	adiw	r28, 0x0e	; 14
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	e9 97       	sbiw	r28, 0x39	; 57
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);   /* Instruction Mode RS=0 */
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	8d ab       	std	Y+53, r24	; 0x35
    1e84:	9e ab       	std	Y+54, r25	; 0x36
    1e86:	af ab       	std	Y+55, r26	; 0x37
    1e88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e90:	98 ad       	ldd	r25, Y+56	; 0x38
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	89 ab       	std	Y+49, r24	; 0x31
    1ea4:	9a ab       	std	Y+50, r25	; 0x32
    1ea6:	ab ab       	std	Y+51, r26	; 0x33
    1ea8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eaa:	69 a9       	ldd	r22, Y+49	; 0x31
    1eac:	7a a9       	ldd	r23, Y+50	; 0x32
    1eae:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_sendCommand+0x72>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	98 ab       	std	Y+48, r25	; 0x30
    1ec8:	8f a7       	std	Y+47, r24	; 0x2f
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ece:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eea:	98 ad       	ldd	r25, Y+56	; 0x38
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	98 ab       	std	Y+48, r25	; 0x30
    1f0a:	8f a7       	std	Y+47, r24	; 0x2f
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_sendCommand+0xd2>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e a7       	std	Y+46, r25	; 0x2e
    1f14:	8d a7       	std	Y+45, r24	; 0x2d
    1f16:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f18:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_sendCommand+0xc0>
    1f1e:	9e a7       	std	Y+46, r25	; 0x2e
    1f20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f24:	98 a9       	ldd	r25, Y+48	; 0x30
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	98 ab       	std	Y+48, r25	; 0x30
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_sendCommand+0xb4>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	69 a9       	ldd	r22, Y+49	; 0x31
    1f38:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
    1f4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4e:	9c a7       	std	Y+44, r25	; 0x2c
    1f50:	8b a7       	std	Y+43, r24	; 0x2b
    1f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_sendCommand+0xfc>
    1f5a:	9c a7       	std	Y+44, r25	; 0x2c
    1f5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                              /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);    /* Enable LCD E=1 */
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e8       	ldi	r26, 0x80	; 128
    1f6e:	bf e3       	ldi	r27, 0x3F	; 63
    1f70:	8f a3       	std	Y+39, r24	; 0x27
    1f72:	98 a7       	std	Y+40, r25	; 0x28
    1f74:	a9 a7       	std	Y+41, r26	; 0x29
    1f76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	6f a1       	ldd	r22, Y+39	; 0x27
    1f7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a ef       	ldi	r20, 0xFA	; 250
    1f86:	54 e4       	ldi	r21, 0x44	; 68
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8b a3       	std	Y+35, r24	; 0x23
    1f92:	9c a3       	std	Y+36, r25	; 0x24
    1f94:	ad a3       	std	Y+37, r26	; 0x25
    1f96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f98:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	2c f4       	brge	.+10     	; 0x1fba <LCD_sendCommand+0x160>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9a a3       	std	Y+34, r25	; 0x22
    1fb6:	89 a3       	std	Y+33, r24	; 0x21
    1fb8:	3f c0       	rjmp	.+126    	; 0x2038 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1fba:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f5       	brge	.+82     	; 0x2024 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	51 e4       	ldi	r21, 0x41	; 65
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9a a3       	std	Y+34, r25	; 0x22
    1ff8:	89 a3       	std	Y+33, r24	; 0x21
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <LCD_sendCommand+0x1c0>
    1ffc:	88 ec       	ldi	r24, 0xC8	; 200
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 a3       	std	Y+32, r25	; 0x20
    2002:	8f 8f       	std	Y+31, r24	; 0x1f
    2004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2006:	98 a1       	ldd	r25, Y+32	; 0x20
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_sendCommand+0x1ae>
    200c:	98 a3       	std	Y+32, r25	; 0x20
    200e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	9a a3       	std	Y+34, r25	; 0x22
    2018:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	69 f7       	brne	.-38     	; 0x1ffc <LCD_sendCommand+0x1a2>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	6b a1       	ldd	r22, Y+35	; 0x23
    2026:	7c a1       	ldd	r23, Y+36	; 0x24
    2028:	8d a1       	ldd	r24, Y+37	; 0x25
    202a:	9e a1       	ldd	r25, Y+38	; 0x26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	89 a1       	ldd	r24, Y+33	; 0x21
    203a:	9a a1       	ldd	r25, Y+34	; 0x22
    203c:	9e 8f       	std	Y+30, r25	; 0x1e
    203e:	8d 8f       	std	Y+29, r24	; 0x1d
    2040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_sendCommand+0x1ea>
    2048:	9e 8f       	std	Y+30, r25	; 0x1e
    204a:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* Disable LCD E=0 */
	_delay_ms(1);                                               /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command);             /* Out the required command to the data bus D0 --> D7 */
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	69 ad       	ldd	r22, Y+57	; 0x39
    2050:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GPIO_writePort>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a0 e8       	ldi	r26, 0x80	; 128
    205a:	bf e3       	ldi	r27, 0x3F	; 63
    205c:	89 8f       	std	Y+25, r24	; 0x19
    205e:	9a 8f       	std	Y+26, r25	; 0x1a
    2060:	ab 8f       	std	Y+27, r26	; 0x1b
    2062:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2064:	69 8d       	ldd	r22, Y+25	; 0x19
    2066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2068:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a ef       	ldi	r20, 0xFA	; 250
    2072:	54 e4       	ldi	r21, 0x44	; 68
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	8d 8b       	std	Y+21, r24	; 0x15
    207e:	9e 8b       	std	Y+22, r25	; 0x16
    2080:	af 8b       	std	Y+23, r26	; 0x17
    2082:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2084:	6d 89       	ldd	r22, Y+21	; 0x15
    2086:	7e 89       	ldd	r23, Y+22	; 0x16
    2088:	8f 89       	ldd	r24, Y+23	; 0x17
    208a:	98 8d       	ldd	r25, Y+24	; 0x18
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2098:	88 23       	and	r24, r24
    209a:	2c f4       	brge	.+10     	; 0x20a6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	3f c0       	rjmp	.+126    	; 0x2124 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    20a6:	6d 89       	ldd	r22, Y+21	; 0x15
    20a8:	7e 89       	ldd	r23, Y+22	; 0x16
    20aa:	8f 89       	ldd	r24, Y+23	; 0x17
    20ac:	98 8d       	ldd	r25, Y+24	; 0x18
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	4c f5       	brge	.+82     	; 0x2110 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	69 8d       	ldd	r22, Y+25	; 0x19
    20c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e2       	ldi	r20, 0x20	; 32
    20cc:	51 e4       	ldi	r21, 0x41	; 65
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <LCD_sendCommand+0x2ac>
    20e8:	88 ec       	ldi	r24, 0xC8	; 200
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9a 8b       	std	Y+18, r25	; 0x12
    20ee:	89 8b       	std	Y+17, r24	; 0x11
    20f0:	89 89       	ldd	r24, Y+17	; 0x11
    20f2:	9a 89       	ldd	r25, Y+18	; 0x12
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0x29a>
    20f8:	9a 8b       	std	Y+18, r25	; 0x12
    20fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	9c 8b       	std	Y+20, r25	; 0x14
    2104:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	8b 89       	ldd	r24, Y+19	; 0x13
    2108:	9c 89       	ldd	r25, Y+20	; 0x14
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	69 f7       	brne	.-38     	; 0x20e8 <LCD_sendCommand+0x28e>
    210e:	14 c0       	rjmp	.+40     	; 0x2138 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2110:	6d 89       	ldd	r22, Y+21	; 0x15
    2112:	7e 89       	ldd	r23, Y+22	; 0x16
    2114:	8f 89       	ldd	r24, Y+23	; 0x17
    2116:	98 8d       	ldd	r25, Y+24	; 0x18
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9c 8b       	std	Y+20, r25	; 0x14
    2122:	8b 8b       	std	Y+19, r24	; 0x13
    2124:	8b 89       	ldd	r24, Y+19	; 0x13
    2126:	9c 89       	ldd	r25, Y+20	; 0x14
    2128:	98 8b       	std	Y+16, r25	; 0x10
    212a:	8f 87       	std	Y+15, r24	; 0x0f
    212c:	8f 85       	ldd	r24, Y+15	; 0x0f
    212e:	98 89       	ldd	r25, Y+16	; 0x10
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_sendCommand+0x2d6>
    2134:	98 8b       	std	Y+16, r25	; 0x10
    2136:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);                                          /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 e8       	ldi	r26, 0x80	; 128
    2148:	bf e3       	ldi	r27, 0x3F	; 63
    214a:	8b 87       	std	Y+11, r24	; 0x0b
    214c:	9c 87       	std	Y+12, r25	; 0x0c
    214e:	ad 87       	std	Y+13, r26	; 0x0d
    2150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2152:	6b 85       	ldd	r22, Y+11	; 0x0b
    2154:	7c 85       	ldd	r23, Y+12	; 0x0c
    2156:	8d 85       	ldd	r24, Y+13	; 0x0d
    2158:	9e 85       	ldd	r25, Y+14	; 0x0e
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a ef       	ldi	r20, 0xFA	; 250
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	8f 83       	std	Y+7, r24	; 0x07
    216c:	98 87       	std	Y+8, r25	; 0x08
    216e:	a9 87       	std	Y+9, r26	; 0x09
    2170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2186:	88 23       	and	r24, r24
    2188:	2c f4       	brge	.+10     	; 0x2194 <LCD_sendCommand+0x33a>
		__ticks = 1;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
    2192:	3f c0       	rjmp	.+126    	; 0x2212 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2194:	6f 81       	ldd	r22, Y+7	; 0x07
    2196:	78 85       	ldd	r23, Y+8	; 0x08
    2198:	89 85       	ldd	r24, Y+9	; 0x09
    219a:	9a 85       	ldd	r25, Y+10	; 0x0a
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	4c f5       	brge	.+82     	; 0x21fe <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e2       	ldi	r20, 0x20	; 32
    21ba:	51 e4       	ldi	r21, 0x41	; 65
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	0f c0       	rjmp	.+30     	; 0x21f4 <LCD_sendCommand+0x39a>
    21d6:	88 ec       	ldi	r24, 0xC8	; 200
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x388>
    21e6:	9c 83       	std	Y+4, r25	; 0x04
    21e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	69 f7       	brne	.-38     	; 0x21d6 <LCD_sendCommand+0x37c>
    21fc:	14 c0       	rjmp	.+40     	; 0x2226 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_sendCommand+0x3c4>
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                                          /* delay for processing Th = 13ns */

#endif

}
    2226:	e9 96       	adiw	r28, 0x39	; 57
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	e9 97       	sbiw	r28, 0x39	; 57
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);  /* DATA Mode RS=1 */
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	a0 e8       	ldi	r26, 0x80	; 128
    225e:	bf e3       	ldi	r27, 0x3F	; 63
    2260:	8d ab       	std	Y+53, r24	; 0x35
    2262:	9e ab       	std	Y+54, r25	; 0x36
    2264:	af ab       	std	Y+55, r26	; 0x37
    2266:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2268:	6d a9       	ldd	r22, Y+53	; 0x35
    226a:	7e a9       	ldd	r23, Y+54	; 0x36
    226c:	8f a9       	ldd	r24, Y+55	; 0x37
    226e:	98 ad       	ldd	r25, Y+56	; 0x38
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	4a ef       	ldi	r20, 0xFA	; 250
    2276:	54 e4       	ldi	r21, 0x44	; 68
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	89 ab       	std	Y+49, r24	; 0x31
    2282:	9a ab       	std	Y+50, r25	; 0x32
    2284:	ab ab       	std	Y+51, r26	; 0x33
    2286:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2288:	69 a9       	ldd	r22, Y+49	; 0x31
    228a:	7a a9       	ldd	r23, Y+50	; 0x32
    228c:	8b a9       	ldd	r24, Y+51	; 0x33
    228e:	9c a9       	ldd	r25, Y+52	; 0x34
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229c:	88 23       	and	r24, r24
    229e:	2c f4       	brge	.+10     	; 0x22aa <LCD_displayCharacter+0x72>
		__ticks = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	98 ab       	std	Y+48, r25	; 0x30
    22a6:	8f a7       	std	Y+47, r24	; 0x2f
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    22aa:	69 a9       	ldd	r22, Y+49	; 0x31
    22ac:	7a a9       	ldd	r23, Y+50	; 0x32
    22ae:	8b a9       	ldd	r24, Y+51	; 0x33
    22b0:	9c a9       	ldd	r25, Y+52	; 0x34
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22be:	18 16       	cp	r1, r24
    22c0:	4c f5       	brge	.+82     	; 0x2314 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	6d a9       	ldd	r22, Y+53	; 0x35
    22c4:	7e a9       	ldd	r23, Y+54	; 0x36
    22c6:	8f a9       	ldd	r24, Y+55	; 0x37
    22c8:	98 ad       	ldd	r25, Y+56	; 0x38
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	98 ab       	std	Y+48, r25	; 0x30
    22e8:	8f a7       	std	Y+47, r24	; 0x2f
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <LCD_displayCharacter+0xd2>
    22ec:	88 ec       	ldi	r24, 0xC8	; 200
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e a7       	std	Y+46, r25	; 0x2e
    22f2:	8d a7       	std	Y+45, r24	; 0x2d
    22f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_displayCharacter+0xc0>
    22fc:	9e a7       	std	Y+46, r25	; 0x2e
    22fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	8f a5       	ldd	r24, Y+47	; 0x2f
    2302:	98 a9       	ldd	r25, Y+48	; 0x30
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	98 ab       	std	Y+48, r25	; 0x30
    2308:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	8f a5       	ldd	r24, Y+47	; 0x2f
    230c:	98 a9       	ldd	r25, Y+48	; 0x30
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	69 f7       	brne	.-38     	; 0x22ec <LCD_displayCharacter+0xb4>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	69 a9       	ldd	r22, Y+49	; 0x31
    2316:	7a a9       	ldd	r23, Y+50	; 0x32
    2318:	8b a9       	ldd	r24, Y+51	; 0x33
    231a:	9c a9       	ldd	r25, Y+52	; 0x34
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	98 ab       	std	Y+48, r25	; 0x30
    2326:	8f a7       	std	Y+47, r24	; 0x2f
    2328:	8f a5       	ldd	r24, Y+47	; 0x2f
    232a:	98 a9       	ldd	r25, Y+48	; 0x30
    232c:	9c a7       	std	Y+44, r25	; 0x2c
    232e:	8b a7       	std	Y+43, r24	; 0x2b
    2330:	8b a5       	ldd	r24, Y+43	; 0x2b
    2332:	9c a5       	ldd	r25, Y+44	; 0x2c
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_displayCharacter+0xfc>
    2338:	9c a7       	std	Y+44, r25	; 0x2c
    233a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                              /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);    /* Enable LCD E=1 */
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a0 e8       	ldi	r26, 0x80	; 128
    234c:	bf e3       	ldi	r27, 0x3F	; 63
    234e:	8f a3       	std	Y+39, r24	; 0x27
    2350:	98 a7       	std	Y+40, r25	; 0x28
    2352:	a9 a7       	std	Y+41, r26	; 0x29
    2354:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6f a1       	ldd	r22, Y+39	; 0x27
    2358:	78 a5       	ldd	r23, Y+40	; 0x28
    235a:	89 a5       	ldd	r24, Y+41	; 0x29
    235c:	9a a5       	ldd	r25, Y+42	; 0x2a
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a ef       	ldi	r20, 0xFA	; 250
    2364:	54 e4       	ldi	r21, 0x44	; 68
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8b a3       	std	Y+35, r24	; 0x23
    2370:	9c a3       	std	Y+36, r25	; 0x24
    2372:	ad a3       	std	Y+37, r26	; 0x25
    2374:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <LCD_displayCharacter+0x160>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9a a3       	std	Y+34, r25	; 0x22
    2394:	89 a3       	std	Y+33, r24	; 0x21
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2398:	6b a1       	ldd	r22, Y+35	; 0x23
    239a:	7c a1       	ldd	r23, Y+36	; 0x24
    239c:	8d a1       	ldd	r24, Y+37	; 0x25
    239e:	9e a1       	ldd	r25, Y+38	; 0x26
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6f a1       	ldd	r22, Y+39	; 0x27
    23b2:	78 a5       	ldd	r23, Y+40	; 0x28
    23b4:	89 a5       	ldd	r24, Y+41	; 0x29
    23b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9a a3       	std	Y+34, r25	; 0x22
    23d6:	89 a3       	std	Y+33, r24	; 0x21
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <LCD_displayCharacter+0x1c0>
    23da:	88 ec       	ldi	r24, 0xC8	; 200
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	98 a3       	std	Y+32, r25	; 0x20
    23e0:	8f 8f       	std	Y+31, r24	; 0x1f
    23e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e4:	98 a1       	ldd	r25, Y+32	; 0x20
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_displayCharacter+0x1ae>
    23ea:	98 a3       	std	Y+32, r25	; 0x20
    23ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	89 a1       	ldd	r24, Y+33	; 0x21
    23f0:	9a a1       	ldd	r25, Y+34	; 0x22
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9a a3       	std	Y+34, r25	; 0x22
    23f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	89 a1       	ldd	r24, Y+33	; 0x21
    23fa:	9a a1       	ldd	r25, Y+34	; 0x22
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <LCD_displayCharacter+0x1a2>
    2400:	14 c0       	rjmp	.+40     	; 0x242a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6b a1       	ldd	r22, Y+35	; 0x23
    2404:	7c a1       	ldd	r23, Y+36	; 0x24
    2406:	8d a1       	ldd	r24, Y+37	; 0x25
    2408:	9e a1       	ldd	r25, Y+38	; 0x26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9a a3       	std	Y+34, r25	; 0x22
    2414:	89 a3       	std	Y+33, r24	; 0x21
    2416:	89 a1       	ldd	r24, Y+33	; 0x21
    2418:	9a a1       	ldd	r25, Y+34	; 0x22
    241a:	9e 8f       	std	Y+30, r25	; 0x1e
    241c:	8d 8f       	std	Y+29, r24	; 0x1d
    241e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2420:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_displayCharacter+0x1ea>
    2426:	9e 8f       	std	Y+30, r25	; 0x1e
    2428:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* Disable LCD E=0 */
	_delay_ms(1);                                               /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data);                /* Out the required data to the data bus D0 --> D7 */
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	69 ad       	ldd	r22, Y+57	; 0x39
    242e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GPIO_writePort>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e8       	ldi	r26, 0x80	; 128
    2438:	bf e3       	ldi	r27, 0x3F	; 63
    243a:	89 8f       	std	Y+25, r24	; 0x19
    243c:	9a 8f       	std	Y+26, r25	; 0x1a
    243e:	ab 8f       	std	Y+27, r26	; 0x1b
    2440:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	69 8d       	ldd	r22, Y+25	; 0x19
    2444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8d 8b       	std	Y+21, r24	; 0x15
    245c:	9e 8b       	std	Y+22, r25	; 0x16
    245e:	af 8b       	std	Y+23, r26	; 0x17
    2460:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2462:	6d 89       	ldd	r22, Y+21	; 0x15
    2464:	7e 89       	ldd	r23, Y+22	; 0x16
    2466:	8f 89       	ldd	r24, Y+23	; 0x17
    2468:	98 8d       	ldd	r25, Y+24	; 0x18
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9c 8b       	std	Y+20, r25	; 0x14
    2480:	8b 8b       	std	Y+19, r24	; 0x13
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2484:	6d 89       	ldd	r22, Y+21	; 0x15
    2486:	7e 89       	ldd	r23, Y+22	; 0x16
    2488:	8f 89       	ldd	r24, Y+23	; 0x17
    248a:	98 8d       	ldd	r25, Y+24	; 0x18
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	69 8d       	ldd	r22, Y+25	; 0x19
    249e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9c 8b       	std	Y+20, r25	; 0x14
    24c2:	8b 8b       	std	Y+19, r24	; 0x13
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <LCD_displayCharacter+0x2ac>
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9a 8b       	std	Y+18, r25	; 0x12
    24cc:	89 8b       	std	Y+17, r24	; 0x11
    24ce:	89 89       	ldd	r24, Y+17	; 0x11
    24d0:	9a 89       	ldd	r25, Y+18	; 0x12
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_displayCharacter+0x29a>
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8b 89       	ldd	r24, Y+19	; 0x13
    24dc:	9c 89       	ldd	r25, Y+20	; 0x14
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8b 89       	ldd	r24, Y+19	; 0x13
    24e6:	9c 89       	ldd	r25, Y+20	; 0x14
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <LCD_displayCharacter+0x28e>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	6d 89       	ldd	r22, Y+21	; 0x15
    24f0:	7e 89       	ldd	r23, Y+22	; 0x16
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	98 8d       	ldd	r25, Y+24	; 0x18
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9c 8b       	std	Y+20, r25	; 0x14
    2500:	8b 8b       	std	Y+19, r24	; 0x13
    2502:	8b 89       	ldd	r24, Y+19	; 0x13
    2504:	9c 89       	ldd	r25, Y+20	; 0x14
    2506:	98 8b       	std	Y+16, r25	; 0x10
    2508:	8f 87       	std	Y+15, r24	; 0x0f
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	98 89       	ldd	r25, Y+16	; 0x10
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_displayCharacter+0x2d6>
    2512:	98 8b       	std	Y+16, r25	; 0x10
    2514:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);                                          /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	0e 94 21 0b 	call	0x1642	; 0x1642 <GPIO_writePin>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 e8       	ldi	r26, 0x80	; 128
    2526:	bf e3       	ldi	r27, 0x3F	; 63
    2528:	8b 87       	std	Y+11, r24	; 0x0b
    252a:	9c 87       	std	Y+12, r25	; 0x0c
    252c:	ad 87       	std	Y+13, r26	; 0x0d
    252e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2530:	6b 85       	ldd	r22, Y+11	; 0x0b
    2532:	7c 85       	ldd	r23, Y+12	; 0x0c
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a ef       	ldi	r20, 0xFA	; 250
    253e:	54 e4       	ldi	r21, 0x44	; 68
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8f 83       	std	Y+7, r24	; 0x07
    254a:	98 87       	std	Y+8, r25	; 0x08
    254c:	a9 87       	std	Y+9, r26	; 0x09
    254e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2550:	6f 81       	ldd	r22, Y+7	; 0x07
    2552:	78 85       	ldd	r23, Y+8	; 0x08
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2564:	88 23       	and	r24, r24
    2566:	2c f4       	brge	.+10     	; 0x2572 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
    2570:	3f c0       	rjmp	.+126    	; 0x25f0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2572:	6f 81       	ldd	r22, Y+7	; 0x07
    2574:	78 85       	ldd	r23, Y+8	; 0x08
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	4c f5       	brge	.+82     	; 0x25dc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	6b 85       	ldd	r22, Y+11	; 0x0b
    258c:	7c 85       	ldd	r23, Y+12	; 0x0c
    258e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2590:	9e 85       	ldd	r25, Y+14	; 0x0e
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <LCD_displayCharacter+0x39a>
    25b4:	88 ec       	ldi	r24, 0xC8	; 200
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9c 83       	std	Y+4, r25	; 0x04
    25ba:	8b 83       	std	Y+3, r24	; 0x03
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_displayCharacter+0x388>
    25c4:	9c 83       	std	Y+4, r25	; 0x04
    25c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	69 f7       	brne	.-38     	; 0x25b4 <LCD_displayCharacter+0x37c>
    25da:	14 c0       	rjmp	.+40     	; 0x2604 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_displayCharacter+0x3c4>
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                                          /* delay for processing Th = 13ns */

#endif

}
    2604:	e9 96       	adiw	r28, 0x39	; 57
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <LCD_displayString+0x6>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	0a c0       	rjmp	.+20     	; 0x263a <LCD_displayString+0x24>
	while ((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    2626:	e9 81       	ldd	r30, Y+1	; 0x01
    2628:	fa 81       	ldd	r31, Y+2	; 0x02
    262a:	80 81       	ld	r24, Z
    262c:	0e 94 1c 11 	call	0x2238	; 0x2238 <LCD_displayCharacter>
		Str++;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while ((*Str) != '\0')
    263a:	e9 81       	ldd	r30, Y+1	; 0x01
    263c:	fa 81       	ldd	r31, Y+2	; 0x02
    263e:	80 81       	ld	r24, Z
    2640:	88 23       	and	r24, r24
    2642:	89 f7       	brne	.-30     	; 0x2626 <LCD_displayString+0x10>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
		i++;
	}
	 *********************************************************/
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <LCD_moveCursor+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <LCD_moveCursor+0x8>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	8a 83       	std	Y+2, r24	; 0x02
    265e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	3d 83       	std	Y+5, r19	; 0x05
    2668:	2c 83       	std	Y+4, r18	; 0x04
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	9d 81       	ldd	r25, Y+5	; 0x05
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	91 05       	cpc	r25, r1
    2672:	c1 f0       	breq	.+48     	; 0x26a4 <LCD_moveCursor+0x56>
    2674:	2c 81       	ldd	r18, Y+4	; 0x04
    2676:	3d 81       	ldd	r19, Y+5	; 0x05
    2678:	22 30       	cpi	r18, 0x02	; 2
    267a:	31 05       	cpc	r19, r1
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_moveCursor+0x3a>
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	9d 81       	ldd	r25, Y+5	; 0x05
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	61 f0       	breq	.+24     	; 0x269e <LCD_moveCursor+0x50>
    2686:	19 c0       	rjmp	.+50     	; 0x26ba <LCD_moveCursor+0x6c>
    2688:	2c 81       	ldd	r18, Y+4	; 0x04
    268a:	3d 81       	ldd	r19, Y+5	; 0x05
    268c:	22 30       	cpi	r18, 0x02	; 2
    268e:	31 05       	cpc	r19, r1
    2690:	69 f0       	breq	.+26     	; 0x26ac <LCD_moveCursor+0x5e>
    2692:	8c 81       	ldd	r24, Y+4	; 0x04
    2694:	9d 81       	ldd	r25, Y+5	; 0x05
    2696:	83 30       	cpi	r24, 0x03	; 3
    2698:	91 05       	cpc	r25, r1
    269a:	61 f0       	breq	.+24     	; 0x26b4 <LCD_moveCursor+0x66>
    269c:	0e c0       	rjmp	.+28     	; 0x26ba <LCD_moveCursor+0x6c>
	case 0:
		lcd_memoryAddress = col;
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	0b c0       	rjmp	.+22     	; 0x26ba <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memoryAddress = col + 0x40;
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	80 5c       	subi	r24, 0xC0	; 192
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	07 c0       	rjmp	.+14     	; 0x26ba <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memoryAddress = col + 0x10;
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	80 5f       	subi	r24, 0xF0	; 240
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memoryAddress = col + 0x50;
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	80 5b       	subi	r24, 0xB0	; 176
    26b8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move the LCD cursor to this specific address */
	LCD_sendCommand( lcd_memoryAddress | LCD_SET_CURSOR_LOCATION);
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	80 68       	ori	r24, 0x80	; 128
    26be:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <LCD_sendCommand>
}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <LCD_displayStringRowColumn+0x6>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <LCD_displayStringRowColumn+0x8>
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	6a 83       	std	Y+2, r22	; 0x02
    26e2:	5c 83       	std	Y+4, r21	; 0x04
    26e4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);     /* go to to the required LCD position */
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	6a 81       	ldd	r22, Y+2	; 0x02
    26ea:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_moveCursor>
	LCD_displayString(Str);       /* display the string */
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	62 97       	sbiw	r28, 0x12	; 18
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	9a 8b       	std	Y+18, r25	; 0x12
    271a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];             /* String to hold the ASCII result */
	itoa(data, buff, 10);      /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    271c:	89 89       	ldd	r24, Y+17	; 0x11
    271e:	9a 89       	ldd	r25, Y+18	; 0x12
    2720:	9e 01       	movw	r18, r28
    2722:	2f 5f       	subi	r18, 0xFF	; 255
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	b9 01       	movw	r22, r18
    2728:	4a e0       	ldi	r20, 0x0A	; 10
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	0e 94 34 18 	call	0x3068	; 0x3068 <itoa>
	LCD_displayString(buff);   /* Display the string */
    2730:	ce 01       	movw	r24, r28
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_displayString>
}
    2738:	62 96       	adiw	r28, 0x12	; 18
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN); /* Send clear display command */
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <LCD_sendCommand>
}
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <__vector_10>:
/*******************************************************************************
 *                           INTERRUPT SERVICE ROUTINE                         *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    275e:	1f 92       	push	r1
    2760:	0f 92       	push	r0
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	2f 93       	push	r18
    276a:	3f 93       	push	r19
    276c:	4f 93       	push	r20
    276e:	5f 93       	push	r21
    2770:	6f 93       	push	r22
    2772:	7f 93       	push	r23
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	af 93       	push	r26
    277a:	bf 93       	push	r27
    277c:	ef 93       	push	r30
    277e:	ff 93       	push	r31
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_CallBackPtr != NULL_PTR)
    2788:	80 91 2d 01 	lds	r24, 0x012D
    278c:	90 91 2e 01 	lds	r25, 0x012E
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	29 f0       	breq	.+10     	; 0x279e <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer0_CallBackPtr */
    2794:	e0 91 2d 01 	lds	r30, 0x012D
    2798:	f0 91 2e 01 	lds	r31, 0x012E
    279c:	09 95       	icall
	}
}
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	ff 91       	pop	r31
    27a4:	ef 91       	pop	r30
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	7f 91       	pop	r23
    27b0:	6f 91       	pop	r22
    27b2:	5f 91       	pop	r21
    27b4:	4f 91       	pop	r20
    27b6:	3f 91       	pop	r19
    27b8:	2f 91       	pop	r18
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	0f 90       	pop	r0
    27c0:	1f 90       	pop	r1
    27c2:	18 95       	reti

000027c4 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    27c4:	1f 92       	push	r1
    27c6:	0f 92       	push	r0
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	0f 92       	push	r0
    27cc:	11 24       	eor	r1, r1
    27ce:	2f 93       	push	r18
    27d0:	3f 93       	push	r19
    27d2:	4f 93       	push	r20
    27d4:	5f 93       	push	r21
    27d6:	6f 93       	push	r22
    27d8:	7f 93       	push	r23
    27da:	8f 93       	push	r24
    27dc:	9f 93       	push	r25
    27de:	af 93       	push	r26
    27e0:	bf 93       	push	r27
    27e2:	ef 93       	push	r30
    27e4:	ff 93       	push	r31
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_CallBackPtr != NULL_PTR)
    27ee:	80 91 2d 01 	lds	r24, 0x012D
    27f2:	90 91 2e 01 	lds	r25, 0x012E
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	29 f0       	breq	.+10     	; 0x2804 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer0_CallBackPtr */
    27fa:	e0 91 2d 01 	lds	r30, 0x012D
    27fe:	f0 91 2e 01 	lds	r31, 0x012E
    2802:	09 95       	icall
	}

}
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	ff 91       	pop	r31
    280a:	ef 91       	pop	r30
    280c:	bf 91       	pop	r27
    280e:	af 91       	pop	r26
    2810:	9f 91       	pop	r25
    2812:	8f 91       	pop	r24
    2814:	7f 91       	pop	r23
    2816:	6f 91       	pop	r22
    2818:	5f 91       	pop	r21
    281a:	4f 91       	pop	r20
    281c:	3f 91       	pop	r19
    281e:	2f 91       	pop	r18
    2820:	0f 90       	pop	r0
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	0f 90       	pop	r0
    2826:	1f 90       	pop	r1
    2828:	18 95       	reti

0000282a <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	0f 92       	push	r0
    2832:	11 24       	eor	r1, r1
    2834:	2f 93       	push	r18
    2836:	3f 93       	push	r19
    2838:	4f 93       	push	r20
    283a:	5f 93       	push	r21
    283c:	6f 93       	push	r22
    283e:	7f 93       	push	r23
    2840:	8f 93       	push	r24
    2842:	9f 93       	push	r25
    2844:	af 93       	push	r26
    2846:	bf 93       	push	r27
    2848:	ef 93       	push	r30
    284a:	ff 93       	push	r31
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_CallBackPtr != NULL_PTR)
    2854:	80 91 2f 01 	lds	r24, 0x012F
    2858:	90 91 30 01 	lds	r25, 0x0130
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	29 f0       	breq	.+10     	; 0x286a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer1_CallBackPtr */
    2860:	e0 91 2f 01 	lds	r30, 0x012F
    2864:	f0 91 30 01 	lds	r31, 0x0130
    2868:	09 95       	icall
	}
}
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	ff 91       	pop	r31
    2870:	ef 91       	pop	r30
    2872:	bf 91       	pop	r27
    2874:	af 91       	pop	r26
    2876:	9f 91       	pop	r25
    2878:	8f 91       	pop	r24
    287a:	7f 91       	pop	r23
    287c:	6f 91       	pop	r22
    287e:	5f 91       	pop	r21
    2880:	4f 91       	pop	r20
    2882:	3f 91       	pop	r19
    2884:	2f 91       	pop	r18
    2886:	0f 90       	pop	r0
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	0f 90       	pop	r0
    288c:	1f 90       	pop	r1
    288e:	18 95       	reti

00002890 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    2890:	1f 92       	push	r1
    2892:	0f 92       	push	r0
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	0f 92       	push	r0
    2898:	11 24       	eor	r1, r1
    289a:	2f 93       	push	r18
    289c:	3f 93       	push	r19
    289e:	4f 93       	push	r20
    28a0:	5f 93       	push	r21
    28a2:	6f 93       	push	r22
    28a4:	7f 93       	push	r23
    28a6:	8f 93       	push	r24
    28a8:	9f 93       	push	r25
    28aa:	af 93       	push	r26
    28ac:	bf 93       	push	r27
    28ae:	ef 93       	push	r30
    28b0:	ff 93       	push	r31
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_CallBackPtr != NULL_PTR)
    28ba:	80 91 2f 01 	lds	r24, 0x012F
    28be:	90 91 30 01 	lds	r25, 0x0130
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	29 f0       	breq	.+10     	; 0x28d0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer1_CallBackPtr */
    28c6:	e0 91 2f 01 	lds	r30, 0x012F
    28ca:	f0 91 30 01 	lds	r31, 0x0130
    28ce:	09 95       	icall
	}
}
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	ff 91       	pop	r31
    28d6:	ef 91       	pop	r30
    28d8:	bf 91       	pop	r27
    28da:	af 91       	pop	r26
    28dc:	9f 91       	pop	r25
    28de:	8f 91       	pop	r24
    28e0:	7f 91       	pop	r23
    28e2:	6f 91       	pop	r22
    28e4:	5f 91       	pop	r21
    28e6:	4f 91       	pop	r20
    28e8:	3f 91       	pop	r19
    28ea:	2f 91       	pop	r18
    28ec:	0f 90       	pop	r0
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	0f 90       	pop	r0
    28f2:	1f 90       	pop	r1
    28f4:	18 95       	reti

000028f6 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	2f 93       	push	r18
    2902:	3f 93       	push	r19
    2904:	4f 93       	push	r20
    2906:	5f 93       	push	r21
    2908:	6f 93       	push	r22
    290a:	7f 93       	push	r23
    290c:	8f 93       	push	r24
    290e:	9f 93       	push	r25
    2910:	af 93       	push	r26
    2912:	bf 93       	push	r27
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_CallBackPtr != NULL_PTR)
    2920:	80 91 31 01 	lds	r24, 0x0131
    2924:	90 91 32 01 	lds	r25, 0x0132
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	29 f0       	breq	.+10     	; 0x2936 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer2_CallBackPtr */
    292c:	e0 91 31 01 	lds	r30, 0x0131
    2930:	f0 91 32 01 	lds	r31, 0x0132
    2934:	09 95       	icall
	}
}
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	ff 91       	pop	r31
    293c:	ef 91       	pop	r30
    293e:	bf 91       	pop	r27
    2940:	af 91       	pop	r26
    2942:	9f 91       	pop	r25
    2944:	8f 91       	pop	r24
    2946:	7f 91       	pop	r23
    2948:	6f 91       	pop	r22
    294a:	5f 91       	pop	r21
    294c:	4f 91       	pop	r20
    294e:	3f 91       	pop	r19
    2950:	2f 91       	pop	r18
    2952:	0f 90       	pop	r0
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	0f 90       	pop	r0
    2958:	1f 90       	pop	r1
    295a:	18 95       	reti

0000295c <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    295c:	1f 92       	push	r1
    295e:	0f 92       	push	r0
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	0f 92       	push	r0
    2964:	11 24       	eor	r1, r1
    2966:	2f 93       	push	r18
    2968:	3f 93       	push	r19
    296a:	4f 93       	push	r20
    296c:	5f 93       	push	r21
    296e:	6f 93       	push	r22
    2970:	7f 93       	push	r23
    2972:	8f 93       	push	r24
    2974:	9f 93       	push	r25
    2976:	af 93       	push	r26
    2978:	bf 93       	push	r27
    297a:	ef 93       	push	r30
    297c:	ff 93       	push	r31
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_CallBackPtr != NULL_PTR)
    2986:	80 91 31 01 	lds	r24, 0x0131
    298a:	90 91 32 01 	lds	r25, 0x0132
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	29 f0       	breq	.+10     	; 0x299c <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer2_CallBackPtr */
    2992:	e0 91 31 01 	lds	r30, 0x0131
    2996:	f0 91 32 01 	lds	r31, 0x0132
    299a:	09 95       	icall
	}
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	ff 91       	pop	r31
    29a2:	ef 91       	pop	r30
    29a4:	bf 91       	pop	r27
    29a6:	af 91       	pop	r26
    29a8:	9f 91       	pop	r25
    29aa:	8f 91       	pop	r24
    29ac:	7f 91       	pop	r23
    29ae:	6f 91       	pop	r22
    29b0:	5f 91       	pop	r21
    29b2:	4f 91       	pop	r20
    29b4:	3f 91       	pop	r19
    29b6:	2f 91       	pop	r18
    29b8:	0f 90       	pop	r0
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	0f 90       	pop	r0
    29be:	1f 90       	pop	r1
    29c0:	18 95       	reti

000029c2 <Timer_init>:
     Function to initialize the Timer driver
 Inputs:
     Pointer to the configuration structure with type Timer1_ConfigType.
*/
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <Timer_init+0x6>
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	89 83       	std	Y+1, r24	; 0x01
	/* Check on the Timer ID if it's Timer0 or not
	 * Check on the status of the prescaler if it's DUMMY value or not
	 */
	if ((Config_Ptr->timerId == TIMER0) && (Config_Ptr->prescaler != DUMMY))
    29d0:	e9 81       	ldd	r30, Y+1	; 0x01
    29d2:	fa 81       	ldd	r31, Y+2	; 0x02
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	09 f0       	breq	.+2      	; 0x29dc <Timer_init+0x1a>
    29da:	5c c0       	rjmp	.+184    	; 0x2a94 <Timer_init+0xd2>
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	86 81       	ldd	r24, Z+6	; 0x06
    29e2:	8f 3f       	cpi	r24, 0xFF	; 255
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <Timer_init+0x26>
    29e6:	56 c0       	rjmp	.+172    	; 0x2a94 <Timer_init+0xd2>
	{
		/* Set the initial value of Timer0 that will start counting from it */
		TCNT0 = Config_Ptr->initial_value;
    29e8:	a2 e5       	ldi	r26, 0x52	; 82
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e9 81       	ldd	r30, Y+1	; 0x01
    29ee:	fa 81       	ldd	r31, Y+2	; 0x02
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	8c 93       	st	X, r24

		/* As Prescaler value isn't Dummy value, then put it in TCCR0 register */
		TCCR0 = (Config_Ptr->prescaler << CS00);
    29f6:	a3 e5       	ldi	r26, 0x53	; 83
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e9 81       	ldd	r30, Y+1	; 0x01
    29fc:	fa 81       	ldd	r31, Y+2	; 0x02
    29fe:	86 81       	ldd	r24, Z+6	; 0x06
    2a00:	8c 93       	st	X, r24

		if (Config_Ptr->mode == OVERFLOW_MODE)
    2a02:	e9 81       	ldd	r30, Y+1	; 0x01
    2a04:	fa 81       	ldd	r31, Y+2	; 0x02
    2a06:	81 81       	ldd	r24, Z+1	; 0x01
    2a08:	88 23       	and	r24, r24
    2a0a:	79 f4       	brne	.+30     	; 0x2a2a <Timer_init+0x68>
			/* Configure Timer0 control register TCCR0:
			 * 1. Normal port operation, OC0 disconnected --> COM01=0 COM00=0
			 * 2. Non PWM Mode --> FOC0=1
			 * 3. Normal Mode WGM01=0 WGM00=0 (Mode Number 0)
			 */
			TCCR0 |= (1 << FOC0);
    2a0c:	a3 e5       	ldi	r26, 0x53	; 83
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e3 e5       	ldi	r30, 0x53	; 83
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	80 68       	ori	r24, 0x80	; 128
    2a18:	8c 93       	st	X, r24

			/* Enable Timer/Counter0 Overflow Interrupt */
			SET_BIT(TIMSK,TOIE0);
    2a1a:	a9 e5       	ldi	r26, 0x59	; 89
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e9 e5       	ldi	r30, 0x59	; 89
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	81 60       	ori	r24, 0x01	; 1
    2a26:	8c 93       	st	X, r24
    2a28:	02 c1       	rjmp	.+516    	; 0x2c2e <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == COMPARE_MODE)
    2a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2e:	81 81       	ldd	r24, Z+1	; 0x01
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	b1 f4       	brne	.+44     	; 0x2a60 <Timer_init+0x9e>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR0 = Config_Ptr->compare_value;
    2a34:	ac e5       	ldi	r26, 0x5C	; 92
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	84 81       	ldd	r24, Z+4	; 0x04
    2a3e:	95 81       	ldd	r25, Z+5	; 0x05
    2a40:	8c 93       	st	X, r24
			/* Configure Timer0 control register TCCR0:
			 * 1. Clear OC0 on compare match (Set output to low level) --> COM01=1 COM00=0
			 * 2. Non PWM Mode --> FOC0=1
			 * 3. CTC Mode WGM01=1 WGM00=0 (Mode Number 2)
			 */
			TCCR0 |= (1 << FOC0) | (1 << COM01) | (1 << WGM01);
    2a42:	a3 e5       	ldi	r26, 0x53	; 83
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e3 e5       	ldi	r30, 0x53	; 83
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 6a       	ori	r24, 0xA8	; 168
    2a4e:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			SET_BIT(TIMSK,OCIE0);
    2a50:	a9 e5       	ldi	r26, 0x59	; 89
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e9 e5       	ldi	r30, 0x59	; 89
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	82 60       	ori	r24, 0x02	; 2
    2a5c:	8c 93       	st	X, r24
    2a5e:	e7 c0       	rjmp	.+462    	; 0x2c2e <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == FAST_PWM_MODE)
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	82 30       	cpi	r24, 0x02	; 2
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <Timer_init+0xaa>
    2a6a:	e1 c0       	rjmp	.+450    	; 0x2c2e <Timer_init+0x26c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR0 = Config_Ptr->compare_value;
    2a6c:	ac e5       	ldi	r26, 0x5C	; 92
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e9 81       	ldd	r30, Y+1	; 0x01
    2a72:	fa 81       	ldd	r31, Y+2	; 0x02
    2a74:	84 81       	ldd	r24, Z+4	; 0x04
    2a76:	95 81       	ldd	r25, Z+5	; 0x05
    2a78:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Fast PWM mode FOC0=0
			 * 2. Fast PWM Mode WGM01=1 & WGM00=1
			 * 3. Clear OC0 when match occurs (non inverted mode) COM01=1 & COM00=0
			 */
			TCCR0 |= (1 << COM01) | (1 << WGM01) | (1 << WGM00);
    2a7a:	a3 e5       	ldi	r26, 0x53	; 83
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e3 e5       	ldi	r30, 0x53	; 83
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	88 66       	ori	r24, 0x68	; 104
    2a86:	8c 93       	st	X, r24

			/* Set PB3/OC0 as Output pin --> pin where the PWM signal is generated from MC. */
			GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	63 e0       	ldi	r22, 0x03	; 3
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
    2a92:	cd c0       	rjmp	.+410    	; 0x2c2e <Timer_init+0x26c>
	}

	/* Check on the Timer ID if it's Timer1 or not
	 * Check on the status of the prescaler if it's DUMMY value or not
	 */
	else if ((Config_Ptr->timerId == TIMER1) && (Config_Ptr->prescaler != DUMMY))
    2a94:	e9 81       	ldd	r30, Y+1	; 0x01
    2a96:	fa 81       	ldd	r31, Y+2	; 0x02
    2a98:	80 81       	ld	r24, Z
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <Timer_init+0xde>
    2a9e:	67 c0       	rjmp	.+206    	; 0x2b6e <Timer_init+0x1ac>
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	86 81       	ldd	r24, Z+6	; 0x06
    2aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <Timer_init+0xea>
    2aaa:	61 c0       	rjmp	.+194    	; 0x2b6e <Timer_init+0x1ac>
	{
		/* Set the initial value of Timer1 that will start counting from it */
		TCNT1 = Config_Ptr->initial_value;
    2aac:	ac e4       	ldi	r26, 0x4C	; 76
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	11 96       	adiw	r26, 0x01	; 1
    2aba:	9c 93       	st	X, r25
    2abc:	8e 93       	st	-X, r24

		/* As Prescaler value isn't Dummy value, then put it in TCCR1B register */
		TCCR1B = (Config_Ptr->prescaler << CS10);
    2abe:	ae e4       	ldi	r26, 0x4E	; 78
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac6:	86 81       	ldd	r24, Z+6	; 0x06
    2ac8:	8c 93       	st	X, r24

		if (Config_Ptr->mode == OVERFLOW_MODE)
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	81 81       	ldd	r24, Z+1	; 0x01
    2ad0:	88 23       	and	r24, r24
    2ad2:	61 f4       	brne	.+24     	; 0x2aec <Timer_init+0x12a>
			/* Configure Timer1 control register TCCR1A:
			 * 1. Normal port operation, OC1A/OC1B disconnected --> COM1A1=0 COM1A0=0
			 * 2. Non PWM Mode --> FOC1A=1
			 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 0)
			 */
			TCCR1A = (1 << FOC1A);
    2ad4:	ef e4       	ldi	r30, 0x4F	; 79
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	88 e0       	ldi	r24, 0x08	; 8
    2ada:	80 83       	st	Z, r24

			/* Enable Timer/Counter1 Overflow Interrupt */
			SET_BIT(TIMSK,TOIE1);
    2adc:	a9 e5       	ldi	r26, 0x59	; 89
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e9 e5       	ldi	r30, 0x59	; 89
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	84 60       	ori	r24, 0x04	; 4
    2ae8:	8c 93       	st	X, r24
    2aea:	a1 c0       	rjmp	.+322    	; 0x2c2e <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == COMPARE_MODE)
    2aec:	e9 81       	ldd	r30, Y+1	; 0x01
    2aee:	fa 81       	ldd	r31, Y+2	; 0x02
    2af0:	81 81       	ldd	r24, Z+1	; 0x01
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	e1 f4       	brne	.+56     	; 0x2b2e <Timer_init+0x16c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR1A = Config_Ptr->compare_value;
    2af6:	aa e4       	ldi	r26, 0x4A	; 74
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e9 81       	ldd	r30, Y+1	; 0x01
    2afc:	fa 81       	ldd	r31, Y+2	; 0x02
    2afe:	84 81       	ldd	r24, Z+4	; 0x04
    2b00:	95 81       	ldd	r25, Z+5	; 0x05
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	9c 93       	st	X, r25
    2b06:	8e 93       	st	-X, r24
			/* Configure Timer1 control register TCCR1A:
			 * 1. Clear OC1A on compare match (Set output to low level) --> COM1A1=1 COM1A0=0
			 * 2. Non PWM Mode --> FOC1A=1
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1 << FOC1A) | (1 << COM1A1);
    2b08:	ef e4       	ldi	r30, 0x4F	; 79
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	88 e8       	ldi	r24, 0x88	; 136
    2b0e:	80 83       	st	Z, r24

			/* Configure Timer1 control register TCCR1B:
			 * CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 */
			TCCR1B |= (1 << WGM12);
    2b10:	ae e4       	ldi	r26, 0x4E	; 78
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	ee e4       	ldi	r30, 0x4E	; 78
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 60       	ori	r24, 0x08	; 8
    2b1c:	8c 93       	st	X, r24

			/* Enable Timer1 Compare A Interrupt */
			SET_BIT(TIMSK,OCIE1A);
    2b1e:	a9 e5       	ldi	r26, 0x59	; 89
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e9 e5       	ldi	r30, 0x59	; 89
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	80 61       	ori	r24, 0x10	; 16
    2b2a:	8c 93       	st	X, r24
    2b2c:	80 c0       	rjmp	.+256    	; 0x2c2e <Timer_init+0x26c>
		}

		else if (Config_Ptr->mode == FAST_PWM_MODE)
    2b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b30:	fa 81       	ldd	r31, Y+2	; 0x02
    2b32:	81 81       	ldd	r24, Z+1	; 0x01
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <Timer_init+0x178>
    2b38:	7a c0       	rjmp	.+244    	; 0x2c2e <Timer_init+0x26c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR1A = Config_Ptr->compare_value;
    2b3a:	aa e4       	ldi	r26, 0x4A	; 74
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b40:	fa 81       	ldd	r31, Y+2	; 0x02
    2b42:	84 81       	ldd	r24, Z+4	; 0x04
    2b44:	95 81       	ldd	r25, Z+5	; 0x05
    2b46:	11 96       	adiw	r26, 0x01	; 1
    2b48:	9c 93       	st	X, r25
    2b4a:	8e 93       	st	-X, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
		     * 3. PWM Mode --> FOC1A=0 FOC1B=0
		     * 4. Fast Pwm Mode with the TOP in OCR1A WGM10=1 WGM11=1 (Mode Number 15)
			 */
			TCCR1A = (1 << COM1A1) | (1 << WGM10) | (1 << WGM11);
    2b4c:	ef e4       	ldi	r30, 0x4F	; 79
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	83 e8       	ldi	r24, 0x83	; 131
    2b52:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * Fast Pwm Mode with the TOP in OCR1A WGM12=1 WGM13=1 (Mode Number 15)
		     */
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
    2b54:	ae e4       	ldi	r26, 0x4E	; 78
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	ee e4       	ldi	r30, 0x4E	; 78
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	88 61       	ori	r24, 0x18	; 24
    2b60:	8c 93       	st	X, r24

			/* Set PD5/OC1A as Output pin --> pin where the PWM signal is generated from MC. */
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    2b62:	83 e0       	ldi	r24, 0x03	; 3
    2b64:	65 e0       	ldi	r22, 0x05	; 5
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
    2b6c:	60 c0       	rjmp	.+192    	; 0x2c2e <Timer_init+0x26c>
	}

	/* Check on the Timer ID if it's Timer2 or not
	 * Check on the status of the prescaler if it's DUMMY value or not
	 */
	else if ((Config_Ptr->timerId == TIMER2) && (Config_Ptr->prescaler2 != DUMMY))
    2b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b70:	fa 81       	ldd	r31, Y+2	; 0x02
    2b72:	80 81       	ld	r24, Z
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <Timer_init+0x1b8>
    2b78:	5a c0       	rjmp	.+180    	; 0x2c2e <Timer_init+0x26c>
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	87 81       	ldd	r24, Z+7	; 0x07
    2b80:	8f 3f       	cpi	r24, 0xFF	; 255
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <Timer_init+0x1c4>
    2b84:	54 c0       	rjmp	.+168    	; 0x2c2e <Timer_init+0x26c>
	{
		/* Set the initial value of Timer2 that will start counting from it */
		TCNT2 = Config_Ptr->initial_value;
    2b86:	a4 e4       	ldi	r26, 0x44	; 68
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	8c 93       	st	X, r24

		/* As Prescaler value isn't Dummy value, then put it in TCCR2 register */
		TCCR2 = (Config_Ptr->prescaler2 << CS20);
    2b94:	a5 e4       	ldi	r26, 0x45	; 69
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9c:	87 81       	ldd	r24, Z+7	; 0x07
    2b9e:	8c 93       	st	X, r24


		if (Config_Ptr->mode == OVERFLOW_MODE)
    2ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba4:	81 81       	ldd	r24, Z+1	; 0x01
    2ba6:	88 23       	and	r24, r24
    2ba8:	79 f4       	brne	.+30     	; 0x2bc8 <Timer_init+0x206>
			/* Configure Timer2 control register TCCR2:
			 * 1. Normal port operation, OC2 disconnected --> COM21=0 COM20=0
			 * 2. Non PWM Mode --> FOC2=1
			 * 3. Normal Mode WGM21=0 WGM20=0 (Mode Number 0)
			 */
			TCCR2 |= (1 << FOC2);
    2baa:	a5 e4       	ldi	r26, 0x45	; 69
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e5 e4       	ldi	r30, 0x45	; 69
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	80 68       	ori	r24, 0x80	; 128
    2bb6:	8c 93       	st	X, r24

			/* Enable Timer/Counter2 Overflow Interrupt */
			SET_BIT(TIMSK,TOIE2);
    2bb8:	a9 e5       	ldi	r26, 0x59	; 89
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e9 e5       	ldi	r30, 0x59	; 89
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 64       	ori	r24, 0x40	; 64
    2bc4:	8c 93       	st	X, r24
    2bc6:	33 c0       	rjmp	.+102    	; 0x2c2e <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == COMPARE_MODE)
    2bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bca:	fa 81       	ldd	r31, Y+2	; 0x02
    2bcc:	81 81       	ldd	r24, Z+1	; 0x01
    2bce:	81 30       	cpi	r24, 0x01	; 1
    2bd0:	b1 f4       	brne	.+44     	; 0x2bfe <Timer_init+0x23c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR2 = Config_Ptr->compare_value;
    2bd2:	a3 e4       	ldi	r26, 0x43	; 67
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bda:	84 81       	ldd	r24, Z+4	; 0x04
    2bdc:	95 81       	ldd	r25, Z+5	; 0x05
    2bde:	8c 93       	st	X, r24
			/* Configure Timer2 control register TCCR2:
			 * 1. Clear OC2 on compare match (Set output to low level) --> COM21=1 COM20=0
			 * 2. Non PWM Mode --> FOC2=1
			 * 3. CTC Mode WGM21=1 WGM20=0 (Mode Number 2)
			 */
			TCCR2 |= (1 << FOC2) | (1 << COM21) | (1 << WGM21);
    2be0:	a5 e4       	ldi	r26, 0x45	; 69
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e5 e4       	ldi	r30, 0x45	; 69
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	88 6a       	ori	r24, 0xA8	; 168
    2bec:	8c 93       	st	X, r24

			/* Enable Timer2 Compare Interrupt */
			SET_BIT(TIMSK,OCIE2);
    2bee:	a9 e5       	ldi	r26, 0x59	; 89
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e9 e5       	ldi	r30, 0x59	; 89
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 68       	ori	r24, 0x80	; 128
    2bfa:	8c 93       	st	X, r24
    2bfc:	18 c0       	rjmp	.+48     	; 0x2c2e <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == FAST_PWM_MODE)
    2bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2c00:	fa 81       	ldd	r31, Y+2	; 0x02
    2c02:	81 81       	ldd	r24, Z+1	; 0x01
    2c04:	82 30       	cpi	r24, 0x02	; 2
    2c06:	99 f4       	brne	.+38     	; 0x2c2e <Timer_init+0x26c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR2 = Config_Ptr->compare_value;
    2c08:	a3 e4       	ldi	r26, 0x43	; 67
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c10:	84 81       	ldd	r24, Z+4	; 0x04
    2c12:	95 81       	ldd	r25, Z+5	; 0x05
    2c14:	8c 93       	st	X, r24
			/* Configure Timer2 control register TCCR2:
			 * 1. Fast PWM mode FOC2=0
			 * 2. Fast PWM Mode WGM21=1 & WGM20=1
			 * 3. Clear OC2 when match occurs (non inverted mode) COM21=1 & COM20=0
			 */
			TCCR2 |= (1 << COM21) | (1 << WGM21) | (1 << WGM20);
    2c16:	a5 e4       	ldi	r26, 0x45	; 69
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e5 e4       	ldi	r30, 0x45	; 69
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 66       	ori	r24, 0x68	; 104
    2c22:	8c 93       	st	X, r24

			/* Set PD7/OC2 as Output pin --> pin where the PWM signal is generated from MC. */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	67 e0       	ldi	r22, 0x07	; 7
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 19 0a 	call	0x1432	; 0x1432 <GPIO_setupPinDirection>
		}
	}
}
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <Timer_setCallBack>:
 Inputs:
    1) Pointer to Call Back function.
    2) Variable of enum type Timer_ID to select which Timer you want to set Call Back function for it
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID timerID)
{
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <Timer_setCallBack+0x6>
    2c3e:	0f 92       	push	r0
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	9a 83       	std	Y+2, r25	; 0x02
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	6b 83       	std	Y+3, r22	; 0x03
	if (timerID == TIMER0)
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	88 23       	and	r24, r24
    2c4e:	39 f4       	brne	.+14     	; 0x2c5e <Timer_setCallBack+0x26>
	{
		g_Timer0_CallBackPtr = a_ptr;
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	90 93 2e 01 	sts	0x012E, r25
    2c58:	80 93 2d 01 	sts	0x012D, r24
    2c5c:	13 c0       	rjmp	.+38     	; 0x2c84 <Timer_setCallBack+0x4c>
	}
	else if (timerID == TIMER1)
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	39 f4       	brne	.+14     	; 0x2c72 <Timer_setCallBack+0x3a>
	{
		g_Timer1_CallBackPtr = a_ptr;
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	90 93 30 01 	sts	0x0130, r25
    2c6c:	80 93 2f 01 	sts	0x012F, r24
    2c70:	09 c0       	rjmp	.+18     	; 0x2c84 <Timer_setCallBack+0x4c>
	}

	else if (timerID == TIMER2)
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	82 30       	cpi	r24, 0x02	; 2
    2c76:	31 f4       	brne	.+12     	; 0x2c84 <Timer_setCallBack+0x4c>
	{
		g_Timer2_CallBackPtr = a_ptr;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	90 93 32 01 	sts	0x0132, r25
    2c80:	80 93 31 01 	sts	0x0131, r24
	}
	else
		return;
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <Timer_deInit>:
     Function to disable the Timer1.
 Inputs:
     Takes variable of enum type Timer_ID to select which Timer that user wants to de-initialize
*/
void Timer_deInit(Timer_ID timerID)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	0f 92       	push	r0
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	89 83       	std	Y+1, r24	; 0x01
	if (timerID == TIMER0)
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	88 23       	and	r24, r24
    2ca0:	e1 f4       	brne	.+56     	; 0x2cda <Timer_deInit+0x4a>
	{
		/* Clearing all Timer0 Registers */
		TCCR0 = 0;
    2ca2:	e3 e5       	ldi	r30, 0x53	; 83
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	10 82       	st	Z, r1
		TCNT0 = 0;
    2ca8:	e2 e5       	ldi	r30, 0x52	; 82
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	10 82       	st	Z, r1
		OCR0 = 0;
    2cae:	ec e5       	ldi	r30, 0x5C	; 92
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    2cb4:	a9 e5       	ldi	r26, 0x59	; 89
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e9 e5       	ldi	r30, 0x59	; 89
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8e 7f       	andi	r24, 0xFE	; 254
    2cc0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE0);
    2cc2:	a9 e5       	ldi	r26, 0x59	; 89
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e9 e5       	ldi	r30, 0x59	; 89
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	8d 7f       	andi	r24, 0xFD	; 253
    2cce:	8c 93       	st	X, r24

		/* NULLing the call back pointer of Timer0 */
		g_Timer0_CallBackPtr = NULL_PTR;
    2cd0:	10 92 2e 01 	sts	0x012E, r1
    2cd4:	10 92 2d 01 	sts	0x012D, r1
    2cd8:	42 c0       	rjmp	.+132    	; 0x2d5e <Timer_deInit+0xce>
	}
	else if (timerID == TIMER1)
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	09 f5       	brne	.+66     	; 0x2d22 <Timer_deInit+0x92>
	{
		/* Clearing all Timer1 Registers */
		TCCR1A = 0;
    2ce0:	ef e4       	ldi	r30, 0x4F	; 79
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	10 82       	st	Z, r1
		TCCR1B = 0;
    2ce6:	ee e4       	ldi	r30, 0x4E	; 78
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	10 82       	st	Z, r1
		TCNT1 = 0;
    2cec:	ec e4       	ldi	r30, 0x4C	; 76
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	11 82       	std	Z+1, r1	; 0x01
    2cf2:	10 82       	st	Z, r1
		OCR1A = 0;
    2cf4:	ea e4       	ldi	r30, 0x4A	; 74
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	11 82       	std	Z+1, r1	; 0x01
    2cfa:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    2cfc:	a9 e5       	ldi	r26, 0x59	; 89
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e9 e5       	ldi	r30, 0x59	; 89
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	8b 7f       	andi	r24, 0xFB	; 251
    2d08:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    2d0a:	a9 e5       	ldi	r26, 0x59	; 89
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e9 e5       	ldi	r30, 0x59	; 89
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8f 7e       	andi	r24, 0xEF	; 239
    2d16:	8c 93       	st	X, r24

		/* NULLing the call back pointer of Timer1 */
		g_Timer1_CallBackPtr = NULL_PTR;
    2d18:	10 92 30 01 	sts	0x0130, r1
    2d1c:	10 92 2f 01 	sts	0x012F, r1
    2d20:	1e c0       	rjmp	.+60     	; 0x2d5e <Timer_deInit+0xce>
	}

	else if (timerID == TIMER2)
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	82 30       	cpi	r24, 0x02	; 2
    2d26:	d9 f4       	brne	.+54     	; 0x2d5e <Timer_deInit+0xce>
	{
		/* Clearing all Timer2 Registers */
		TCCR2 = 0;
    2d28:	e5 e4       	ldi	r30, 0x45	; 69
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	10 82       	st	Z, r1
		TCNT2 = 0;
    2d2e:	e4 e4       	ldi	r30, 0x44	; 68
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	10 82       	st	Z, r1
		OCR2 = 0;
    2d34:	e3 e4       	ldi	r30, 0x43	; 67
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    2d3a:	a9 e5       	ldi	r26, 0x59	; 89
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e9 e5       	ldi	r30, 0x59	; 89
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 7b       	andi	r24, 0xBF	; 191
    2d46:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    2d48:	a9 e5       	ldi	r26, 0x59	; 89
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e9 e5       	ldi	r30, 0x59	; 89
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	8f 77       	andi	r24, 0x7F	; 127
    2d54:	8c 93       	st	X, r24

		/* NULLing the call back pointer of Timer2 */
		g_Timer2_CallBackPtr = NULL_PTR;
    2d56:	10 92 32 01 	sts	0x0132, r1
    2d5a:	10 92 31 01 	sts	0x0131, r1
	}
	else
		return;        /* For any invalid input */
}
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *configPtr)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <UART_init+0x6>
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <UART_init+0x8>
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d76:	1a 82       	std	Y+2, r1	; 0x02
    2d78:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1 << U2X);       /* U2X = 1 for double transmission speed */
    2d7a:	eb e2       	ldi	r30, 0x2B	; 43
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (5,6,7,8) bit data mode, This bit is set only for 9-bit data mode
	 * RXB8 & TXB8 used for 9-bit data mode only
	 ***********************************************************************/

	UCSRB = (1 << RXEN) | (1 << TXEN);
    2d82:	ea e2       	ldi	r30, 0x2A	; 42
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	88 e1       	ldi	r24, 0x18	; 24
    2d88:	80 83       	st	Z, r24
	 * UPM1:0  = Dynamically Configured according to user requirements
	 * USBS    = Dynamically Configured according to user requirements
	 * UCSZ1:0 = Dynamically Configured according to user requirements
	 ***********************************************************************/

	UCSRC = 0;
    2d8a:	e0 e4       	ldi	r30, 0x40	; 64
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	10 82       	st	Z, r1
	UCSRC |= (1 << URSEL);
    2d90:	a0 e4       	ldi	r26, 0x40	; 64
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e0 e4       	ldi	r30, 0x40	; 64
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 68       	ori	r24, 0x80	; 128
    2d9c:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xCF) | (configPtr->parity << UPM0);
    2d9e:	a0 e4       	ldi	r26, 0x40	; 64
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e0 e4       	ldi	r30, 0x40	; 64
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	38 2f       	mov	r19, r24
    2daa:	e0 e4       	ldi	r30, 0x40	; 64
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	28 2f       	mov	r18, r24
    2db2:	2f 7c       	andi	r18, 0xCF	; 207
    2db4:	eb 81       	ldd	r30, Y+3	; 0x03
    2db6:	fc 81       	ldd	r31, Y+4	; 0x04
    2db8:	85 81       	ldd	r24, Z+5	; 0x05
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	82 95       	swap	r24
    2dc0:	92 95       	swap	r25
    2dc2:	90 7f       	andi	r25, 0xF0	; 240
    2dc4:	98 27       	eor	r25, r24
    2dc6:	80 7f       	andi	r24, 0xF0	; 240
    2dc8:	98 27       	eor	r25, r24
    2dca:	82 2b       	or	r24, r18
    2dcc:	83 2b       	or	r24, r19
    2dce:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF7) | (configPtr->stopBits << USBS);
    2dd0:	a0 e4       	ldi	r26, 0x40	; 64
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e0 e4       	ldi	r30, 0x40	; 64
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	38 2f       	mov	r19, r24
    2ddc:	e0 e4       	ldi	r30, 0x40	; 64
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	28 2f       	mov	r18, r24
    2de4:	27 7f       	andi	r18, 0xF7	; 247
    2de6:	eb 81       	ldd	r30, Y+3	; 0x03
    2de8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dea:	86 81       	ldd	r24, Z+6	; 0x06
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	82 2b       	or	r24, r18
    2dfe:	83 2b       	or	r24, r19
    2e00:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF9) | (configPtr->dataBits << UCSZ0);
    2e02:	a0 e4       	ldi	r26, 0x40	; 64
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e0 e4       	ldi	r30, 0x40	; 64
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	38 2f       	mov	r19, r24
    2e0e:	e0 e4       	ldi	r30, 0x40	; 64
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	28 2f       	mov	r18, r24
    2e16:	29 7f       	andi	r18, 0xF9	; 249
    2e18:	eb 81       	ldd	r30, Y+3	; 0x03
    2e1a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e1c:	84 81       	ldd	r24, Z+4	; 0x04
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	82 2b       	or	r24, r18
    2e28:	83 2b       	or	r24, r19
    2e2a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU/(8UL * configPtr->BaudRate)) - 1));
    2e2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	a2 81       	ldd	r26, Z+2	; 0x02
    2e36:	b3 81       	ldd	r27, Z+3	; 0x03
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	aa 1f       	adc	r26, r26
    2e3e:	bb 1f       	adc	r27, r27
    2e40:	88 0f       	add	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	aa 1f       	adc	r26, r26
    2e46:	bb 1f       	adc	r27, r27
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	aa 1f       	adc	r26, r26
    2e4e:	bb 1f       	adc	r27, r27
    2e50:	9c 01       	movw	r18, r24
    2e52:	ad 01       	movw	r20, r26
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	92 e1       	ldi	r25, 0x12	; 18
    2e58:	aa e7       	ldi	r26, 0x7A	; 122
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <__udivmodsi4>
    2e64:	da 01       	movw	r26, r20
    2e66:	c9 01       	movw	r24, r18
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = ubrr_value;
    2e6e:	e9 e2       	ldi	r30, 0x29	; 41
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	80 83       	st	Z, r24
	UBRRH = ubrr_value >> 8;
    2e76:	e0 e4       	ldi	r30, 0x40	; 64
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	89 2f       	mov	r24, r25
    2e80:	99 27       	eor	r25, r25
    2e82:	80 83       	st	Z, r24
}
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for transmitting a new byte
	 * So wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2e9e:	eb e2       	ldi	r30, 0x2B	; 43
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 2f       	mov	r24, r24
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	80 72       	andi	r24, 0x20	; 32
    2eaa:	90 70       	andi	r25, 0x00	; 0
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	b9 f3       	breq	.-18     	; 0x2e9e <UART_sendByte+0xc>

	/* This Code:
	 * Puts the required data in the UDR register
	 * Clears the UDRE flag as the UDR register is not empty now
	 */
	UDR = data;
    2eb0:	ec e2       	ldi	r30, 0x2C	; 44
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC);             // Clear the TXC flag
	*******************************************************************/
}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2ec8:	eb e2       	ldi	r30, 0x2B	; 43
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 23       	and	r24, r24
    2ed0:	dc f7       	brge	.-10     	; 0x2ec8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ed2:	ec e2       	ldi	r30, 0x2C	; 44
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
}
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <UART_sendString+0x6>
    2ee4:	0f 92       	push	r0
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	9b 83       	std	Y+3, r25	; 0x03
    2eec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eee:	19 82       	std	Y+1, r1	; 0x01
    2ef0:	0e c0       	rjmp	.+28     	; 0x2f0e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	9b 81       	ldd	r25, Y+3	; 0x03
    2efc:	fc 01       	movw	r30, r24
    2efe:	e2 0f       	add	r30, r18
    2f00:	f3 1f       	adc	r31, r19
    2f02:	80 81       	ld	r24, Z
    2f04:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		i++;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	9b 81       	ldd	r25, Y+3	; 0x03
    2f18:	fc 01       	movw	r30, r24
    2f1a:	e2 0f       	add	r30, r18
    2f1c:	f3 1f       	adc	r31, r19
    2f1e:	80 81       	ld	r24, Z
    2f20:	88 23       	and	r24, r24
    2f22:	39 f7       	brne	.-50     	; 0x2ef2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <UART_receiveString+0xa>
    2f3a:	0f 92       	push	r0
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	9b 83       	std	Y+3, r25	; 0x03
    2f42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f44:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f50:	8c 01       	movw	r16, r24
    2f52:	02 0f       	add	r16, r18
    2f54:	13 1f       	adc	r17, r19
    2f56:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	80 83       	st	Z, r24
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	8c 01       	movw	r16, r24
    2f72:	02 0f       	add	r16, r18
    2f74:	13 1f       	adc	r17, r19
    2f76:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	9b 81       	ldd	r25, Y+3	; 0x03
    2f88:	fc 01       	movw	r30, r24
    2f8a:	e2 0f       	add	r30, r18
    2f8c:	f3 1f       	adc	r31, r19
    2f8e:	80 81       	ld	r24, Z
    2f90:	83 32       	cpi	r24, 0x23	; 35
    2f92:	31 f7       	brne	.-52     	; 0x2f60 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	10 82       	st	Z, r1
}
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	08 95       	ret

00002fb6 <__udivmodsi4>:
    2fb6:	a1 e2       	ldi	r26, 0x21	; 33
    2fb8:	1a 2e       	mov	r1, r26
    2fba:	aa 1b       	sub	r26, r26
    2fbc:	bb 1b       	sub	r27, r27
    2fbe:	fd 01       	movw	r30, r26
    2fc0:	0d c0       	rjmp	.+26     	; 0x2fdc <__udivmodsi4_ep>

00002fc2 <__udivmodsi4_loop>:
    2fc2:	aa 1f       	adc	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	ee 1f       	adc	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	a2 17       	cp	r26, r18
    2fcc:	b3 07       	cpc	r27, r19
    2fce:	e4 07       	cpc	r30, r20
    2fd0:	f5 07       	cpc	r31, r21
    2fd2:	20 f0       	brcs	.+8      	; 0x2fdc <__udivmodsi4_ep>
    2fd4:	a2 1b       	sub	r26, r18
    2fd6:	b3 0b       	sbc	r27, r19
    2fd8:	e4 0b       	sbc	r30, r20
    2fda:	f5 0b       	sbc	r31, r21

00002fdc <__udivmodsi4_ep>:
    2fdc:	66 1f       	adc	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	88 1f       	adc	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	1a 94       	dec	r1
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <__udivmodsi4_loop>
    2fe8:	60 95       	com	r22
    2fea:	70 95       	com	r23
    2fec:	80 95       	com	r24
    2fee:	90 95       	com	r25
    2ff0:	9b 01       	movw	r18, r22
    2ff2:	ac 01       	movw	r20, r24
    2ff4:	bd 01       	movw	r22, r26
    2ff6:	cf 01       	movw	r24, r30
    2ff8:	08 95       	ret

00002ffa <__prologue_saves__>:
    2ffa:	2f 92       	push	r2
    2ffc:	3f 92       	push	r3
    2ffe:	4f 92       	push	r4
    3000:	5f 92       	push	r5
    3002:	6f 92       	push	r6
    3004:	7f 92       	push	r7
    3006:	8f 92       	push	r8
    3008:	9f 92       	push	r9
    300a:	af 92       	push	r10
    300c:	bf 92       	push	r11
    300e:	cf 92       	push	r12
    3010:	df 92       	push	r13
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	ca 1b       	sub	r28, r26
    3024:	db 0b       	sbc	r29, r27
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	09 94       	ijmp

00003032 <__epilogue_restores__>:
    3032:	2a 88       	ldd	r2, Y+18	; 0x12
    3034:	39 88       	ldd	r3, Y+17	; 0x11
    3036:	48 88       	ldd	r4, Y+16	; 0x10
    3038:	5f 84       	ldd	r5, Y+15	; 0x0f
    303a:	6e 84       	ldd	r6, Y+14	; 0x0e
    303c:	7d 84       	ldd	r7, Y+13	; 0x0d
    303e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3040:	9b 84       	ldd	r9, Y+11	; 0x0b
    3042:	aa 84       	ldd	r10, Y+10	; 0x0a
    3044:	b9 84       	ldd	r11, Y+9	; 0x09
    3046:	c8 84       	ldd	r12, Y+8	; 0x08
    3048:	df 80       	ldd	r13, Y+7	; 0x07
    304a:	ee 80       	ldd	r14, Y+6	; 0x06
    304c:	fd 80       	ldd	r15, Y+5	; 0x05
    304e:	0c 81       	ldd	r16, Y+4	; 0x04
    3050:	1b 81       	ldd	r17, Y+3	; 0x03
    3052:	aa 81       	ldd	r26, Y+2	; 0x02
    3054:	b9 81       	ldd	r27, Y+1	; 0x01
    3056:	ce 0f       	add	r28, r30
    3058:	d1 1d       	adc	r29, r1
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	ed 01       	movw	r28, r26
    3066:	08 95       	ret

00003068 <itoa>:
    3068:	fb 01       	movw	r30, r22
    306a:	9f 01       	movw	r18, r30
    306c:	e8 94       	clt
    306e:	42 30       	cpi	r20, 0x02	; 2
    3070:	c4 f0       	brlt	.+48     	; 0x30a2 <itoa+0x3a>
    3072:	45 32       	cpi	r20, 0x25	; 37
    3074:	b4 f4       	brge	.+44     	; 0x30a2 <itoa+0x3a>
    3076:	4a 30       	cpi	r20, 0x0A	; 10
    3078:	29 f4       	brne	.+10     	; 0x3084 <itoa+0x1c>
    307a:	97 fb       	bst	r25, 7
    307c:	1e f4       	brtc	.+6      	; 0x3084 <itoa+0x1c>
    307e:	90 95       	com	r25
    3080:	81 95       	neg	r24
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	64 2f       	mov	r22, r20
    3086:	77 27       	eor	r23, r23
    3088:	0e 94 65 18 	call	0x30ca	; 0x30ca <__udivmodhi4>
    308c:	80 5d       	subi	r24, 0xD0	; 208
    308e:	8a 33       	cpi	r24, 0x3A	; 58
    3090:	0c f0       	brlt	.+2      	; 0x3094 <itoa+0x2c>
    3092:	89 5d       	subi	r24, 0xD9	; 217
    3094:	81 93       	st	Z+, r24
    3096:	cb 01       	movw	r24, r22
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	a1 f7       	brne	.-24     	; 0x3084 <itoa+0x1c>
    309c:	16 f4       	brtc	.+4      	; 0x30a2 <itoa+0x3a>
    309e:	5d e2       	ldi	r21, 0x2D	; 45
    30a0:	51 93       	st	Z+, r21
    30a2:	10 82       	st	Z, r1
    30a4:	c9 01       	movw	r24, r18
    30a6:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <strrev>

000030aa <strrev>:
    30aa:	dc 01       	movw	r26, r24
    30ac:	fc 01       	movw	r30, r24
    30ae:	67 2f       	mov	r22, r23
    30b0:	71 91       	ld	r23, Z+
    30b2:	77 23       	and	r23, r23
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <strrev+0x4>
    30b6:	32 97       	sbiw	r30, 0x02	; 2
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <strrev+0x18>
    30ba:	7c 91       	ld	r23, X
    30bc:	6d 93       	st	X+, r22
    30be:	70 83       	st	Z, r23
    30c0:	62 91       	ld	r22, -Z
    30c2:	ae 17       	cp	r26, r30
    30c4:	bf 07       	cpc	r27, r31
    30c6:	c8 f3       	brcs	.-14     	; 0x30ba <strrev+0x10>
    30c8:	08 95       	ret

000030ca <__udivmodhi4>:
    30ca:	aa 1b       	sub	r26, r26
    30cc:	bb 1b       	sub	r27, r27
    30ce:	51 e1       	ldi	r21, 0x11	; 17
    30d0:	07 c0       	rjmp	.+14     	; 0x30e0 <__udivmodhi4_ep>

000030d2 <__udivmodhi4_loop>:
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	a6 17       	cp	r26, r22
    30d8:	b7 07       	cpc	r27, r23
    30da:	10 f0       	brcs	.+4      	; 0x30e0 <__udivmodhi4_ep>
    30dc:	a6 1b       	sub	r26, r22
    30de:	b7 0b       	sbc	r27, r23

000030e0 <__udivmodhi4_ep>:
    30e0:	88 1f       	adc	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	5a 95       	dec	r21
    30e6:	a9 f7       	brne	.-22     	; 0x30d2 <__udivmodhi4_loop>
    30e8:	80 95       	com	r24
    30ea:	90 95       	com	r25
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	08 95       	ret

000030f2 <_exit>:
    30f2:	f8 94       	cli

000030f4 <__stop_program>:
    30f4:	ff cf       	rjmp	.-2      	; 0x30f4 <__stop_program>


Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000024ee  00002582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080007a  0080007a  0000259c  2**0
                  ALLOC
  3 .stab         00002694  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001592  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a141  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a90f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_4>
      14:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_9>
      28:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__vector_10>
      2c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "uart.h"
#include "Macros.h"


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a2 97       	sbiw	r28, 0x22	; 34
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG, PIN7_ID);       /* Enable Global Interrupts (I-Bit) */
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	 * Timer_Prescaler --> FCPU/1024
	 * Compare Value --> 7813
	 * AS FCPU = 8MHz so Ftimer = 8MHz/1024 = 128us & To force timer to produce interrupt every 1 second
	 * SO Compare Value = 1/128us = 7813
	 */
	Timer_ConfigType timerConfig = { TIMER1, COMPARE_MODE, 0, 7813, FCPU_1024, DUMMY };
     b68:	ce 01       	movw	r24, r28
     b6a:	02 96       	adiw	r24, 0x02	; 2
     b6c:	9d 8b       	std	Y+21, r25	; 0x15
     b6e:	8c 8b       	std	Y+20, r24	; 0x14
     b70:	e2 e7       	ldi	r30, 0x72	; 114
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ff 8b       	std	Y+23, r31	; 0x17
     b76:	ee 8b       	std	Y+22, r30	; 0x16
     b78:	f8 e0       	ldi	r31, 0x08	; 8
     b7a:	f8 8f       	std	Y+24, r31	; 0x18
     b7c:	ee 89       	ldd	r30, Y+22	; 0x16
     b7e:	ff 89       	ldd	r31, Y+23	; 0x17
     b80:	00 80       	ld	r0, Z
     b82:	8e 89       	ldd	r24, Y+22	; 0x16
     b84:	9f 89       	ldd	r25, Y+23	; 0x17
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9f 8b       	std	Y+23, r25	; 0x17
     b8a:	8e 8b       	std	Y+22, r24	; 0x16
     b8c:	ec 89       	ldd	r30, Y+20	; 0x14
     b8e:	fd 89       	ldd	r31, Y+21	; 0x15
     b90:	00 82       	st	Z, r0
     b92:	8c 89       	ldd	r24, Y+20	; 0x14
     b94:	9d 89       	ldd	r25, Y+21	; 0x15
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9d 8b       	std	Y+21, r25	; 0x15
     b9a:	8c 8b       	std	Y+20, r24	; 0x14
     b9c:	98 8d       	ldd	r25, Y+24	; 0x18
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	98 8f       	std	Y+24, r25	; 0x18
     ba2:	e8 8d       	ldd	r30, Y+24	; 0x18
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	Timer_setCallBack(CTRL_timerCallBack, TIMER1);
     ba8:	87 e5       	ldi	r24, 0x57	; 87
     baa:	97 e0       	ldi	r25, 0x07	; 7
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <Timer_setCallBack>
	Timer_init(&timerConfig);
     bb2:	ce 01       	movw	r24, r28
     bb4:	02 96       	adiw	r24, 0x02	; 2
     bb6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <Timer_init>
	 * BaudRate --> 9600 Bps
	 * CharacterSize --> 8 Data Bits
	 * ParityMode --> No Parity
	 * No. of Stop Bits --> One Stop Bit
	 */
	UART_ConfigType uartConfig = { 9600, DATA_EIGHT, NO_PARITY, ONE_STOP_BIT };
     bba:	ce 01       	movw	r24, r28
     bbc:	0a 96       	adiw	r24, 0x0a	; 10
     bbe:	9a 8f       	std	Y+26, r25	; 0x1a
     bc0:	89 8f       	std	Y+25, r24	; 0x19
     bc2:	eb e6       	ldi	r30, 0x6B	; 107
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	fc 8f       	std	Y+28, r31	; 0x1c
     bc8:	eb 8f       	std	Y+27, r30	; 0x1b
     bca:	f7 e0       	ldi	r31, 0x07	; 7
     bcc:	fd 8f       	std	Y+29, r31	; 0x1d
     bce:	eb 8d       	ldd	r30, Y+27	; 0x1b
     bd0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     bd2:	00 80       	ld	r0, Z
     bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	9c 8f       	std	Y+28, r25	; 0x1c
     bdc:	8b 8f       	std	Y+27, r24	; 0x1b
     bde:	e9 8d       	ldd	r30, Y+25	; 0x19
     be0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     be2:	00 82       	st	Z, r0
     be4:	89 8d       	ldd	r24, Y+25	; 0x19
     be6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	9a 8f       	std	Y+26, r25	; 0x1a
     bec:	89 8f       	std	Y+25, r24	; 0x19
     bee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	9d 8f       	std	Y+29, r25	; 0x1d
     bf4:	ed 8d       	ldd	r30, Y+29	; 0x1d
     bf6:	ee 23       	and	r30, r30
     bf8:	51 f7       	brne	.-44     	; 0xbce <main+0x88>
	UART_init(&uartConfig);
     bfa:	ce 01       	movw	r24, r28
     bfc:	0a 96       	adiw	r24, 0x0a	; 10
     bfe:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <UART_init>
	/* TWI(I2C) Configuration:
	 * Bit Rate --> 2
	 * Slave Address --> 0x01
	 * TWI Prescaler --> FCPU/1 --> 8MHz
	 */
	TWI_ConfigType twiConfig = { 0x02, TWI_CONTROL_ECU_ADDRESS, PRESCALER_1 };
     c02:	ce 01       	movw	r24, r28
     c04:	41 96       	adiw	r24, 0x11	; 17
     c06:	9f 8f       	std	Y+31, r25	; 0x1f
     c08:	8e 8f       	std	Y+30, r24	; 0x1e
     c0a:	e8 e6       	ldi	r30, 0x68	; 104
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	f9 a3       	std	Y+33, r31	; 0x21
     c10:	e8 a3       	std	Y+32, r30	; 0x20
     c12:	f3 e0       	ldi	r31, 0x03	; 3
     c14:	fa a3       	std	Y+34, r31	; 0x22
     c16:	e8 a1       	ldd	r30, Y+32	; 0x20
     c18:	f9 a1       	ldd	r31, Y+33	; 0x21
     c1a:	00 80       	ld	r0, Z
     c1c:	88 a1       	ldd	r24, Y+32	; 0x20
     c1e:	99 a1       	ldd	r25, Y+33	; 0x21
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	99 a3       	std	Y+33, r25	; 0x21
     c24:	88 a3       	std	Y+32, r24	; 0x20
     c26:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c28:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c2a:	00 82       	st	Z, r0
     c2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	9f 8f       	std	Y+31, r25	; 0x1f
     c34:	8e 8f       	std	Y+30, r24	; 0x1e
     c36:	9a a1       	ldd	r25, Y+34	; 0x22
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	9a a3       	std	Y+34, r25	; 0x22
     c3c:	ea a1       	ldd	r30, Y+34	; 0x22
     c3e:	ee 23       	and	r30, r30
     c40:	51 f7       	brne	.-44     	; 0xc16 <main+0xd0>
	TWI_init(&twiConfig);
     c42:	ce 01       	movw	r24, r28
     c44:	41 96       	adiw	r24, 0x11	; 17
     c46:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <TWI_init>

	/* Initialize DC MOTOR & BUZZER */
	DcMotor_Init();
     c4a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DcMotor_Init>
	BUZZER_init();
     c4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <BUZZER_init>

	CTRL_SystemPasswordInit(g_receivedPassword);
     c52:	83 e8       	ldi	r24, 0x83	; 131
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CTRL_SystemPasswordInit>

	uint8 receivedByte = 0;
     c5a:	19 82       	std	Y+1, r1	; 0x01

	while (1)
	{
		if (UART_recieveByte() == READY_TO_SEND)
     c5c:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
     c60:	80 31       	cpi	r24, 0x10	; 16
     c62:	e1 f7       	brne	.-8      	; 0xc5c <main+0x116>
		{
			CTRL_receivePasswordByUART(g_receivedPassword);
     c64:	83 e8       	ldi	r24, 0x83	; 131
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 67 07 	call	0xece	; 0xece <CTRL_receivePasswordByUART>
			receivedByte = UART_recieveByte();
     c6c:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
     c70:	89 83       	std	Y+1, r24	; 0x01

			if (receivedByte == OPEN_DOOR_OPTION)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	89 31       	cpi	r24, 0x19	; 25
     c76:	79 f5       	brne	.+94     	; 0xcd6 <main+0x190>
			{
				if (CTRL_comparePasswords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED)
     c78:	88 e8       	ldi	r24, 0x88	; 136
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	23 e8       	ldi	r18, 0x83	; 131
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	b9 01       	movw	r22, r18
     c82:	0e 94 a1 06 	call	0xd42	; 0xd42 <CTRL_comparePasswords>
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	41 f4       	brne	.+16     	; 0xc9a <main+0x154>
				{
					UART_sendByte(UNLOCKING_DOOR); /* inform HMI ECU to display that door is unlocking */
     c8a:	81 e3       	ldi	r24, 0x31	; 49
     c8c:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
					CTRL_OpenDoor();               /* start opening door process/task */
     c90:	0e 94 23 07 	call	0xe46	; 0xe46 <CTRL_OpenDoor>
					g_wrongPasswordCounter = 0;    /* reset the counter */
     c94:	10 92 7a 00 	sts	0x007A, r1
     c98:	e1 cf       	rjmp	.-62     	; 0xc5c <main+0x116>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
     c9a:	85 e2       	ldi	r24, 0x25	; 37
     c9c:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>

					/* Count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
     ca0:	80 91 7a 00 	lds	r24, 0x007A
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 7a 00 	sts	0x007A, r24
					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
     caa:	80 91 7a 00 	lds	r24, 0x007A
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	a9 f6       	brne	.-86     	; 0xc5c <main+0x116>
					{
						BUZZER_ON();
     cb2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <BUZZER_ON>
						g_sec = 0;
     cb6:	10 92 7c 00 	sts	0x007C, r1
     cba:	10 92 7b 00 	sts	0x007B, r1
						while (g_sec < ALARM_ON_DELAY); /* turn on alarm for a certain period */
     cbe:	80 91 7b 00 	lds	r24, 0x007B
     cc2:	90 91 7c 00 	lds	r25, 0x007C
     cc6:	8c 33       	cpi	r24, 0x3C	; 60
     cc8:	91 05       	cpc	r25, r1
     cca:	c8 f3       	brcs	.-14     	; 0xcbe <main+0x178>
						BUZZER_OFF();
     ccc:	0e 94 de 08 	call	0x11bc	; 0x11bc <BUZZER_OFF>
						g_wrongPasswordCounter = 0; /* reset the counter */
     cd0:	10 92 7a 00 	sts	0x007A, r1
     cd4:	c3 cf       	rjmp	.-122    	; 0xc5c <main+0x116>
					}
				}
			}
			else if (receivedByte == CHANGE_PASSWORD_OPTION)
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 31       	cpi	r24, 0x18	; 24
     cda:	09 f0       	breq	.+2      	; 0xcde <main+0x198>
     cdc:	bf cf       	rjmp	.-130    	; 0xc5c <main+0x116>
			{
				if (CTRL_comparePasswords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED)
     cde:	88 e8       	ldi	r24, 0x88	; 136
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	23 e8       	ldi	r18, 0x83	; 131
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	b9 01       	movw	r22, r18
     ce8:	0e 94 a1 06 	call	0xd42	; 0xd42 <CTRL_comparePasswords>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	51 f4       	brne	.+20     	; 0xd04 <main+0x1be>
				{
					UART_sendByte(CHANGING_PASSWORD); /* inform HMI to process changing password */
     cf0:	80 e3       	ldi	r24, 0x30	; 48
     cf2:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
					CTRL_SystemPasswordInit(g_receivedPassword);
     cf6:	83 e8       	ldi	r24, 0x83	; 131
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CTRL_SystemPasswordInit>
					g_wrongPasswordCounter = 0;    /* reset the counter */
     cfe:	10 92 7a 00 	sts	0x007A, r1
     d02:	ac cf       	rjmp	.-168    	; 0xc5c <main+0x116>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
     d04:	85 e2       	ldi	r24, 0x25	; 37
     d06:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>

					/* Count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
     d0a:	80 91 7a 00 	lds	r24, 0x007A
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	80 93 7a 00 	sts	0x007A, r24
					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS)
     d14:	80 91 7a 00 	lds	r24, 0x007A
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	09 f0       	breq	.+2      	; 0xd1e <main+0x1d8>
     d1c:	9f cf       	rjmp	.-194    	; 0xc5c <main+0x116>
					{
						BUZZER_ON();
     d1e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <BUZZER_ON>
						g_sec = 0;
     d22:	10 92 7c 00 	sts	0x007C, r1
     d26:	10 92 7b 00 	sts	0x007B, r1
						while (g_sec < ALARM_ON_DELAY); /* turn on alarm for a certain period */
     d2a:	80 91 7b 00 	lds	r24, 0x007B
     d2e:	90 91 7c 00 	lds	r25, 0x007C
     d32:	8c 33       	cpi	r24, 0x3C	; 60
     d34:	91 05       	cpc	r25, r1
     d36:	c8 f3       	brcs	.-14     	; 0xd2a <main+0x1e4>
						BUZZER_OFF();
     d38:	0e 94 de 08 	call	0x11bc	; 0x11bc <BUZZER_OFF>
						g_wrongPasswordCounter = 0; /* reset the counter */
     d3c:	10 92 7a 00 	sts	0x007A, r1
     d40:	8d cf       	rjmp	.-230    	; 0xc5c <main+0x116>

00000d42 <CTRL_comparePasswords>:

/*
 * Description: a function to compare the stored pass with the received one
 */
uint8 CTRL_comparePasswords(const uint8 *a_password1,const uint8 *a_password2)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <CTRL_comparePasswords+0x6>
     d48:	00 d0       	rcall	.+0      	; 0xd4a <CTRL_comparePasswords+0x8>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <CTRL_comparePasswords+0xa>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	9b 83       	std	Y+3, r25	; 0x03
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	7d 83       	std	Y+5, r23	; 0x05
     d56:	6c 83       	std	Y+4, r22	; 0x04
	CTRL_updateStoredPassword();
     d58:	0e 94 07 08 	call	0x100e	; 0x100e <CTRL_updateStoredPassword>
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
     d5c:	19 82       	std	Y+1, r1	; 0x01
     d5e:	19 c0       	rjmp	.+50     	; 0xd92 <CTRL_comparePasswords+0x50>
	{
		if (a_password1[i] != a_password2[i])
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	fc 01       	movw	r30, r24
     d6c:	e2 0f       	add	r30, r18
     d6e:	f3 1f       	adc	r31, r19
     d70:	40 81       	ld	r20, Z
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	80 81       	ld	r24, Z
     d84:	48 17       	cp	r20, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <CTRL_comparePasswords+0x4a>
		{
			return PASSWORD_UNMATCHED;
     d88:	1e 82       	std	Y+6, r1	; 0x06
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <CTRL_comparePasswords+0x5a>
 */
uint8 CTRL_comparePasswords(const uint8 *a_password1,const uint8 *a_password2)
{
	CTRL_updateStoredPassword();
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	85 30       	cpi	r24, 0x05	; 5
     d96:	20 f3       	brcs	.-56     	; 0xd60 <CTRL_comparePasswords+0x1e>
		if (a_password1[i] != a_password2[i])
		{
			return PASSWORD_UNMATCHED;
		}
	}
	return PASSWORD_MATCHED;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8e 83       	std	Y+6, r24	; 0x06
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
}
     d9e:	26 96       	adiw	r28, 0x06	; 6
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <CTRL_SystemPasswordInit>:

/*
 * Description: a function to initialize the password in first-run OR to change the password
 */
void CTRL_SystemPasswordInit(uint8 *pass)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	28 97       	sbiw	r28, 0x08	; 8
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	98 87       	std	Y+8, r25	; 0x08
     dc6:	8f 83       	std	Y+7, r24	; 0x07
	/* Do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 matchingFlag = 0;
     dc8:	19 82       	std	Y+1, r1	; 0x01
     dca:	31 c0       	rjmp	.+98     	; 0xe2e <CTRL_SystemPasswordInit+0x7e>

	while (!matchingFlag)
	{
		while (UART_recieveByte() != READY_TO_SEND);   /* wait till HMI gets ready */
     dcc:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
     dd0:	80 31       	cpi	r24, 0x10	; 16
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <CTRL_SystemPasswordInit+0x1c>
		UART_sendByte(READY_TO_RECEIVE);               /* inform HMI that Control ECU ready to receive the password */
     dd4:	80 e2       	ldi	r24, 0x20	; 32
     dd6:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
		CTRL_receivePasswordByUART(pass);
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	0e 94 67 07 	call	0xece	; 0xece <CTRL_receivePasswordByUART>

		while (UART_recieveByte() != READY_TO_SEND);
     de2:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
     de6:	80 31       	cpi	r24, 0x10	; 16
     de8:	e1 f7       	brne	.-8      	; 0xde2 <CTRL_SystemPasswordInit+0x32>
		UART_sendByte(READY_TO_RECEIVE);               /* inform HMI to send the confirmation password */
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
		CTRL_receivePasswordByUART(confirmationPassword);
     df0:	ce 01       	movw	r24, r28
     df2:	02 96       	adiw	r24, 0x02	; 2
     df4:	0e 94 67 07 	call	0xece	; 0xece <CTRL_receivePasswordByUART>

		if (CTRL_comparePasswords(pass, confirmationPassword) == PASSWORD_MATCHED)
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	9e 01       	movw	r18, r28
     dfe:	2e 5f       	subi	r18, 0xFE	; 254
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	b9 01       	movw	r22, r18
     e04:	0e 94 a1 06 	call	0xd42	; 0xd42 <CTRL_comparePasswords>
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	59 f4       	brne	.+22     	; 0xe22 <CTRL_SystemPasswordInit+0x72>
		{
			UART_sendByte(READY_TO_SEND);
     e0c:	80 e1       	ldi	r24, 0x10	; 16
     e0e:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
			UART_sendByte(PASSWORD_MATCHED);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
			CTRL_storePassword();
     e18:	0e 94 25 08 	call	0x104a	; 0x104a <CTRL_storePassword>
			matchingFlag = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <CTRL_SystemPasswordInit+0x7e>
		}

		else
		{
			UART_sendByte(READY_TO_SEND);
     e22:	80 e1       	ldi	r24, 0x10	; 16
     e24:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
			UART_sendByte(PASSWORD_UNMATCHED);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
{
	/* Do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 matchingFlag = 0;

	while (!matchingFlag)
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	88 23       	and	r24, r24
     e32:	61 f2       	breq	.-104    	; 0xdcc <CTRL_SystemPasswordInit+0x1c>
		{
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORD_UNMATCHED);
		}
	}
}
     e34:	28 96       	adiw	r28, 0x08	; 8
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <CTRL_OpenDoor>:
 *    A function that 1) Rotates on the DC motor for 15 seconds clockwise,
 *                    2) Stops it for 3 seconds,
 *                    3) Rotates it anti-clockwise for 15 seconds.
 */
void CTRL_OpenDoor(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	/* run the DC motor clockwise for 15 seconds */
	g_sec = 0;
     e4e:	10 92 7c 00 	sts	0x007C, r1
     e52:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(CLOCKWISE);
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	0e 94 0a 09 	call	0x1214	; 0x1214 <DcMotor_Rotate>
	while (g_sec < DOOR_UNLOCKING_PERIOD);
     e5c:	80 91 7b 00 	lds	r24, 0x007B
     e60:	90 91 7c 00 	lds	r25, 0x007C
     e64:	8f 30       	cpi	r24, 0x0F	; 15
     e66:	91 05       	cpc	r25, r1
     e68:	c8 f3       	brcs	.-14     	; 0xe5c <CTRL_OpenDoor+0x16>

	/* let the door be open for 3 seconds */
	g_sec = 0;
     e6a:	10 92 7c 00 	sts	0x007C, r1
     e6e:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(STOP);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 0a 09 	call	0x1214	; 0x1214 <DcMotor_Rotate>
	while (g_sec < DOOR_LEFT_OPEN_PERIOD);
     e78:	80 91 7b 00 	lds	r24, 0x007B
     e7c:	90 91 7c 00 	lds	r25, 0x007C
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	c8 f3       	brcs	.-14     	; 0xe78 <CTRL_OpenDoor+0x32>

	/* hold the system for 15 seconds & display to user that door is locking */
	g_sec = 0;
     e86:	10 92 7c 00 	sts	0x007C, r1
     e8a:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(Anti_CLOCKWISE);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 0a 09 	call	0x1214	; 0x1214 <DcMotor_Rotate>
	while (g_sec < DOOR_LOCKING_PERIOD);
     e94:	80 91 7b 00 	lds	r24, 0x007B
     e98:	90 91 7c 00 	lds	r25, 0x007C
     e9c:	8f 30       	cpi	r24, 0x0F	; 15
     e9e:	91 05       	cpc	r25, r1
     ea0:	c8 f3       	brcs	.-14     	; 0xe94 <CTRL_OpenDoor+0x4e>

	DcMotor_Rotate(STOP);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 0a 09 	call	0x1214	; 0x1214 <DcMotor_Rotate>
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <CTRL_timerCallBack>:

/*
 * Description: the call-back function called by the timer every 1 second
 */
void CTRL_timerCallBack(void)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
     eb6:	80 91 7b 00 	lds	r24, 0x007B
     eba:	90 91 7c 00 	lds	r25, 0x007C
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	90 93 7c 00 	sts	0x007C, r25
     ec4:	80 93 7b 00 	sts	0x007B, r24
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <CTRL_receivePasswordByUART>:

/*
 * Description: A function to receive the password via UART by looping on receiveByte function
 */
void CTRL_receivePasswordByUART(uint8 * pass)
{
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	61 97       	sbiw	r28, 0x11	; 17
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	99 8b       	std	Y+17, r25	; 0x11
     ee8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
     eea:	1f 86       	std	Y+15, r1	; 0x0f
     eec:	81 c0       	rjmp	.+258    	; 0xff0 <CTRL_receivePasswordByUART+0x122>
	{
		pass[i] = UART_recieveByte();
     eee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	88 89       	ldd	r24, Y+16	; 0x10
     ef6:	99 89       	ldd	r25, Y+17	; 0x11
     ef8:	8c 01       	movw	r16, r24
     efa:	02 0f       	add	r16, r18
     efc:	13 1f       	adc	r17, r19
     efe:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
     f02:	f8 01       	movw	r30, r16
     f04:	80 83       	st	Z, r24
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a8 ec       	ldi	r26, 0xC8	; 200
     f0c:	b2 e4       	ldi	r27, 0x42	; 66
     f0e:	8b 87       	std	Y+11, r24	; 0x0b
     f10:	9c 87       	std	Y+12, r25	; 0x0c
     f12:	ad 87       	std	Y+13, r26	; 0x0d
     f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f16:	6b 85       	ldd	r22, Y+11	; 0x0b
     f18:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4a ef       	ldi	r20, 0xFA	; 250
     f24:	54 e4       	ldi	r21, 0x44	; 68
     f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	8f 83       	std	Y+7, r24	; 0x07
     f30:	98 87       	std	Y+8, r25	; 0x08
     f32:	a9 87       	std	Y+9, r26	; 0x09
     f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f4a:	88 23       	and	r24, r24
     f4c:	2c f4       	brge	.+10     	; 0xf58 <CTRL_receivePasswordByUART+0x8a>
		__ticks = 1;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	8d 83       	std	Y+5, r24	; 0x05
     f56:	3f c0       	rjmp	.+126    	; 0xfd6 <CTRL_receivePasswordByUART+0x108>
	else if (__tmp > 65535)
     f58:	6f 81       	ldd	r22, Y+7	; 0x07
     f5a:	78 85       	ldd	r23, Y+8	; 0x08
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f6c:	18 16       	cp	r1, r24
     f6e:	4c f5       	brge	.+82     	; 0xfc2 <CTRL_receivePasswordByUART+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f70:	6b 85       	ldd	r22, Y+11	; 0x0b
     f72:	7c 85       	ldd	r23, Y+12	; 0x0c
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e2       	ldi	r20, 0x20	; 32
     f7e:	51 e4       	ldi	r21, 0x41	; 65
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <CTRL_receivePasswordByUART+0xea>
     f9a:	88 ec       	ldi	r24, 0xC8	; 200
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9c 83       	std	Y+4, r25	; 0x04
     fa0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <CTRL_receivePasswordByUART+0xd8>
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	69 f7       	brne	.-38     	; 0xf9a <CTRL_receivePasswordByUART+0xcc>
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <CTRL_receivePasswordByUART+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc2:	6f 81       	ldd	r22, Y+7	; 0x07
     fc4:	78 85       	ldd	r23, Y+8	; 0x08
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <CTRL_receivePasswordByUART+0x114>
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
 * Description: A function to receive the password via UART by looping on receiveByte function
 */
void CTRL_receivePasswordByUART(uint8 * pass)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
     fea:	8f 85       	ldd	r24, Y+15	; 0x0f
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8f 87       	std	Y+15, r24	; 0x0f
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <CTRL_receivePasswordByUART+0x12a>
     ff6:	7b cf       	rjmp	.-266    	; 0xeee <CTRL_receivePasswordByUART+0x20>
	{
		pass[i] = UART_recieveByte();
		_delay_ms(100);
	}
}
     ff8:	61 96       	adiw	r28, 0x11	; 17
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <CTRL_updateStoredPassword>:

/*
 * Description: A function to retrieve the stored password from EEPROM
 */
void CTRL_updateStoredPassword(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1018:	19 82       	std	Y+1, r1	; 0x01
    101a:	10 c0       	rjmp	.+32     	; 0x103c <CTRL_updateStoredPassword+0x2e>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS + i, g_storedPassword + i);
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	48 2f       	mov	r20, r24
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9c 01       	movw	r18, r24
    102a:	28 57       	subi	r18, 0x78	; 120
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	ca 01       	movw	r24, r20
    1030:	b9 01       	movw	r22, r18
    1032:	0e 94 90 09 	call	0x1320	; 0x1320 <EEPROM_readByte>
 * Description: A function to retrieve the stored password from EEPROM
 */
void CTRL_updateStoredPassword(void)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	68 f3       	brcs	.-38     	; 0x101c <CTRL_updateStoredPassword+0xe>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS + i, g_storedPassword + i);
	}
}
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <CTRL_storePassword>:

/*
 * Description: A function to store the password in EEPROM
 */
void CTRL_storePassword(void)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	2f 97       	sbiw	r28, 0x0f	; 15
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    105e:	1f 86       	std	Y+15, r1	; 0x0f
    1060:	83 c0       	rjmp	.+262    	; 0x1168 <CTRL_storePassword+0x11e>
	{
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_receivedPassword[i]);
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	48 2f       	mov	r20, r24
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	8f 85       	ldd	r24, Y+15	; 0x0f
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	ed 57       	subi	r30, 0x7D	; 125
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	20 81       	ld	r18, Z
    1076:	ca 01       	movw	r24, r20
    1078:	62 2f       	mov	r22, r18
    107a:	0e 94 4f 09 	call	0x129e	; 0x129e <EEPROM_writeByte>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a8 ec       	ldi	r26, 0xC8	; 200
    1084:	b2 e4       	ldi	r27, 0x42	; 66
    1086:	8b 87       	std	Y+11, r24	; 0x0b
    1088:	9c 87       	std	Y+12, r25	; 0x0c
    108a:	ad 87       	std	Y+13, r26	; 0x0d
    108c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1090:	7c 85       	ldd	r23, Y+12	; 0x0c
    1092:	8d 85       	ldd	r24, Y+13	; 0x0d
    1094:	9e 85       	ldd	r25, Y+14	; 0x0e
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a ef       	ldi	r20, 0xFA	; 250
    109c:	54 e4       	ldi	r21, 0x44	; 68
    109e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8f 83       	std	Y+7, r24	; 0x07
    10a8:	98 87       	std	Y+8, r25	; 0x08
    10aa:	a9 87       	std	Y+9, r26	; 0x09
    10ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e8       	ldi	r20, 0x80	; 128
    10bc:	5f e3       	ldi	r21, 0x3F	; 63
    10be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <CTRL_storePassword+0x86>
		__ticks = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	3f c0       	rjmp	.+126    	; 0x114e <CTRL_storePassword+0x104>
	else if (__tmp > 65535)
    10d0:	6f 81       	ldd	r22, Y+7	; 0x07
    10d2:	78 85       	ldd	r23, Y+8	; 0x08
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	3f ef       	ldi	r19, 0xFF	; 255
    10dc:	4f e7       	ldi	r20, 0x7F	; 127
    10de:	57 e4       	ldi	r21, 0x47	; 71
    10e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	4c f5       	brge	.+82     	; 0x113a <CTRL_storePassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e2       	ldi	r20, 0x20	; 32
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <CTRL_storePassword+0xe6>
    1112:	88 ec       	ldi	r24, 0xC8	; 200
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9c 83       	std	Y+4, r25	; 0x04
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <CTRL_storePassword+0xd4>
    1122:	9c 83       	std	Y+4, r25	; 0x04
    1124:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	69 f7       	brne	.-38     	; 0x1112 <CTRL_storePassword+0xc8>
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <CTRL_storePassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113a:	6f 81       	ldd	r22, Y+7	; 0x07
    113c:	78 85       	ldd	r23, Y+8	; 0x08
    113e:	89 85       	ldd	r24, Y+9	; 0x09
    1140:	9a 85       	ldd	r25, Y+10	; 0x0a
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9e 83       	std	Y+6, r25	; 0x06
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <CTRL_storePassword+0x110>
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
 * Description: A function to store the password in EEPROM
 */
void CTRL_storePassword(void)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1162:	8f 85       	ldd	r24, Y+15	; 0x0f
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	8f 87       	std	Y+15, r24	; 0x0f
    1168:	8f 85       	ldd	r24, Y+15	; 0x0f
    116a:	85 30       	cpi	r24, 0x05	; 5
    116c:	08 f4       	brcc	.+2      	; 0x1170 <CTRL_storePassword+0x126>
    116e:	79 cf       	rjmp	.-270    	; 0x1062 <CTRL_storePassword+0x18>
	{
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_receivedPassword[i]);
		_delay_ms(100);
	}
}
    1170:	2f 96       	adiw	r28, 0x0f	; 15
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <BUZZER_init>:
   Description:
     1) Setup the direction for the buzzer pin as output pin through the GPIO driver.
     2) Turn off the buzzer through the GPIO.
*/
void BUZZER_init()
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	67 e0       	ldi	r22, 0x07	; 7
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	67 e0       	ldi	r22, 0x07	; 7
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <BUZZER_ON>:

/*
   Description: Function to enable the Buzzer through the GPIO.
*/
void BUZZER_ON(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	67 e0       	ldi	r22, 0x07	; 7
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
}
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <BUZZER_OFF>:

/*
   Description: Function to disable the Buzzer through the GPIO.
*/
void BUZZER_OFF(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	67 e0       	ldi	r22, 0x07	; 7
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <DcMotor_Init>:
Description
	1) The Function responsible for setup the direction for the two motor pins through the GPIO driver.
	2) Stop at the DC-Motor at the beginning through the GPIO driver.
*/
void DcMotor_Init(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	/* Configure Pins (PA0 , PA1 , PA2) as Output pins */
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_EN1_PIN_ID, PIN_OUTPUT);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning (IN1 = 0, IN2 = 0) */
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DcMotor_Rotate>:
Inputs:
	State: The required DC Motor state, it should be CW or A-CW or stop.
	       DcMotor_State data type should be declared as enum or uint8.
*/
void DcMotor_Rotate(DcMotor_State state)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <DcMotor_Rotate+0x6>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
	/* To drive the DC Motor at the maximum speed */
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_EN1_PIN_ID, LOGIC_HIGH);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	62 e0       	ldi	r22, 0x02	; 2
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>

	/* Setting the DC Motor rotation direction (CW/ or A-CW or stop) based on the state value. */
	switch(state)
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3b 83       	std	Y+3, r19	; 0x03
    1234:	2a 83       	std	Y+2, r18	; 0x02
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	f9 f0       	breq	.+62     	; 0x127e <DcMotor_Rotate+0x6a>
    1240:	2a 81       	ldd	r18, Y+2	; 0x02
    1242:	3b 81       	ldd	r19, Y+3	; 0x03
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	79 f0       	breq	.+30     	; 0x1268 <DcMotor_Rotate+0x54>
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	01 f5       	brne	.+64     	; 0x1292 <DcMotor_Rotate+0x7e>
	{
	case STOP:
		/* Stop the DC-Motor (IN1 = 0, IN2 = 0) */
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
    1266:	15 c0       	rjmp	.+42     	; 0x1292 <DcMotor_Rotate+0x7e>
		break;
	case CLOCKWISE:
		/* DC-Motor Mode --> ClockWise Rotation (IN1 = 0, IN2 = 1) */
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
    127c:	0a c0       	rjmp	.+20     	; 0x1292 <DcMotor_Rotate+0x7e>
		break;
	case Anti_CLOCKWISE:
		/* DC-Motor Mode --> Anti_ClockWise Rotation (IN1 = 1, IN2 = 0) */
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <GPIO_writePin>
		break;
	default:
		break;
	}
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <EEPROM_writeByte+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <EEPROM_writeByte+0x8>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    12b0:	0e 94 8d 10 	call	0x211a	; 0x211a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    12b4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <EEPROM_writeByte+0x22>
        return ERROR;
    12bc:	1c 82       	std	Y+4, r1	; 0x04
    12be:	28 c0       	rjmp	.+80     	; 0x1310 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	80 70       	andi	r24, 0x00	; 0
    12c6:	97 70       	andi	r25, 0x07	; 7
    12c8:	88 0f       	add	r24, r24
    12ca:	89 2f       	mov	r24, r25
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	91 95       	neg	r25
    12d2:	80 6a       	ori	r24, 0xA0	; 160
    12d4:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12d8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    12dc:	88 31       	cpi	r24, 0x18	; 24
    12de:	11 f0       	breq	.+4      	; 0x12e4 <EEPROM_writeByte+0x46>
        return ERROR;
    12e0:	1c 82       	std	Y+4, r1	; 0x04
    12e2:	16 c0       	rjmp	.+44     	; 0x1310 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12ea:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    12ee:	88 32       	cpi	r24, 0x28	; 40
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <EEPROM_writeByte+0x58>
        return ERROR;
    12f2:	1c 82       	std	Y+4, r1	; 0x04
    12f4:	0d c0       	rjmp	.+26     	; 0x1310 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12fc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1300:	88 32       	cpi	r24, 0x28	; 40
    1302:	11 f0       	breq	.+4      	; 0x1308 <EEPROM_writeByte+0x6a>
        return ERROR;
    1304:	1c 82       	std	Y+4, r1	; 0x04
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1308:	0e 94 9d 10 	call	0x213a	; 0x213a <TWI_stop>

    return SUCCESS;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	8c 83       	std	Y+4, r24	; 0x04
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <EEPROM_readByte+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <EEPROM_readByte+0x8>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	7c 83       	std	Y+4, r23	; 0x04
    1334:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1336:	0e 94 8d 10 	call	0x211a	; 0x211a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    133a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    133e:	88 30       	cpi	r24, 0x08	; 8
    1340:	11 f0       	breq	.+4      	; 0x1346 <EEPROM_readByte+0x26>
        return ERROR;
    1342:	1d 82       	std	Y+5, r1	; 0x05
    1344:	44 c0       	rjmp	.+136    	; 0x13ce <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	80 70       	andi	r24, 0x00	; 0
    134c:	97 70       	andi	r25, 0x07	; 7
    134e:	88 0f       	add	r24, r24
    1350:	89 2f       	mov	r24, r25
    1352:	88 1f       	adc	r24, r24
    1354:	99 0b       	sbc	r25, r25
    1356:	91 95       	neg	r25
    1358:	80 6a       	ori	r24, 0xA0	; 160
    135a:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    135e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1362:	88 31       	cpi	r24, 0x18	; 24
    1364:	11 f0       	breq	.+4      	; 0x136a <EEPROM_readByte+0x4a>
        return ERROR;
    1366:	1d 82       	std	Y+5, r1	; 0x05
    1368:	32 c0       	rjmp	.+100    	; 0x13ce <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1370:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1374:	88 32       	cpi	r24, 0x28	; 40
    1376:	11 f0       	breq	.+4      	; 0x137c <EEPROM_readByte+0x5c>
        return ERROR;
    1378:	1d 82       	std	Y+5, r1	; 0x05
    137a:	29 c0       	rjmp	.+82     	; 0x13ce <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    137c:	0e 94 8d 10 	call	0x211a	; 0x211a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1380:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1384:	80 31       	cpi	r24, 0x10	; 16
    1386:	11 f0       	breq	.+4      	; 0x138c <EEPROM_readByte+0x6c>
        return ERROR;
    1388:	1d 82       	std	Y+5, r1	; 0x05
    138a:	21 c0       	rjmp	.+66     	; 0x13ce <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	80 70       	andi	r24, 0x00	; 0
    1392:	97 70       	andi	r25, 0x07	; 7
    1394:	88 0f       	add	r24, r24
    1396:	89 2f       	mov	r24, r25
    1398:	88 1f       	adc	r24, r24
    139a:	99 0b       	sbc	r25, r25
    139c:	91 95       	neg	r25
    139e:	81 6a       	ori	r24, 0xA1	; 161
    13a0:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    13a4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    13a8:	80 34       	cpi	r24, 0x40	; 64
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <EEPROM_readByte+0x90>
        return ERROR;
    13ac:	1d 82       	std	Y+5, r1	; 0x05
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    13b0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <TWI_readByteWithNACK>
    13b4:	eb 81       	ldd	r30, Y+3	; 0x03
    13b6:	fc 81       	ldd	r31, Y+4	; 0x04
    13b8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    13ba:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    13be:	88 35       	cpi	r24, 0x58	; 88
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <EEPROM_readByte+0xa6>
        return ERROR;
    13c2:	1d 82       	std	Y+5, r1	; 0x05
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    13c6:	0e 94 9d 10 	call	0x213a	; 0x213a <TWI_stop>

    return SUCCESS;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 portNum, uint8 pinNum, GPIO_PinDirectionType direction)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	27 97       	sbiw	r28, 0x07	; 7
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	6a 83       	std	Y+2, r22	; 0x02
    13f8:	4b 83       	std	Y+3, r20	; 0x03

	if ((pinNum >= NUM_OF_PINS_PER_PORT) || (portNum >= NUM_OF_PORTS))
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <GPIO_setupPinDirection+0x22>
    1400:	ee c0       	rjmp	.+476    	; 0x15de <GPIO_setupPinDirection+0x1fe>
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	84 30       	cpi	r24, 0x04	; 4
    1406:	08 f0       	brcs	.+2      	; 0x140a <GPIO_setupPinDirection+0x2a>
    1408:	ea c0       	rjmp	.+468    	; 0x15de <GPIO_setupPinDirection+0x1fe>
	{
		/* Do Nothing */
		return;
	}

	if (direction == PIN_OUTPUT)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	09 f0       	breq	.+2      	; 0x1412 <GPIO_setupPinDirection+0x32>
    1410:	6f c0       	rjmp	.+222    	; 0x14f0 <GPIO_setupPinDirection+0x110>
	{
		switch (portNum)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3f 83       	std	Y+7, r19	; 0x07
    141a:	2e 83       	std	Y+6, r18	; 0x06
    141c:	8e 81       	ldd	r24, Y+6	; 0x06
    141e:	9f 81       	ldd	r25, Y+7	; 0x07
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	49 f1       	breq	.+82     	; 0x1478 <GPIO_setupPinDirection+0x98>
    1426:	2e 81       	ldd	r18, Y+6	; 0x06
    1428:	3f 81       	ldd	r19, Y+7	; 0x07
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	2c f4       	brge	.+10     	; 0x143a <GPIO_setupPinDirection+0x5a>
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	61 f0       	breq	.+24     	; 0x1450 <GPIO_setupPinDirection+0x70>
    1438:	d2 c0       	rjmp	.+420    	; 0x15de <GPIO_setupPinDirection+0x1fe>
    143a:	2e 81       	ldd	r18, Y+6	; 0x06
    143c:	3f 81       	ldd	r19, Y+7	; 0x07
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	71 f1       	breq	.+92     	; 0x14a0 <GPIO_setupPinDirection+0xc0>
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	e9 f1       	breq	.+122    	; 0x14c8 <GPIO_setupPinDirection+0xe8>
    144e:	c7 c0       	rjmp	.+398    	; 0x15de <GPIO_setupPinDirection+0x1fe>
		{
		case PORTA_ID:
			SET_BIT(DDRA, pinNum);
    1450:	aa e3       	ldi	r26, 0x3A	; 58
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ea e3       	ldi	r30, 0x3A	; 58
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <GPIO_setupPinDirection+0x8e>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <GPIO_setupPinDirection+0x8a>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	b3 c0       	rjmp	.+358    	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTB_ID:
			SET_BIT(DDRB, pinNum);
    1478:	a7 e3       	ldi	r26, 0x37	; 55
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e7 e3       	ldi	r30, 0x37	; 55
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <GPIO_setupPinDirection+0xb6>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <GPIO_setupPinDirection+0xb2>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	9f c0       	rjmp	.+318    	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTC_ID:
			SET_BIT(DDRC, pinNum);
    14a0:	a4 e3       	ldi	r26, 0x34	; 52
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e4 e3       	ldi	r30, 0x34	; 52
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GPIO_setupPinDirection+0xde>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <GPIO_setupPinDirection+0xda>
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	8b c0       	rjmp	.+278    	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTD_ID:
			SET_BIT(DDRD, pinNum);
    14c8:	a1 e3       	ldi	r26, 0x31	; 49
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e1 e3       	ldi	r30, 0x31	; 49
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_setupPinDirection+0x106>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_setupPinDirection+0x102>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	77 c0       	rjmp	.+238    	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		}
	}
	else if (direction == PIN_INPUT)
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 23       	and	r24, r24
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <GPIO_setupPinDirection+0x118>
    14f6:	73 c0       	rjmp	.+230    	; 0x15de <GPIO_setupPinDirection+0x1fe>
	{
		switch (portNum)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3d 83       	std	Y+5, r19	; 0x05
    1500:	2c 83       	std	Y+4, r18	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	59 f1       	breq	.+86     	; 0x1562 <GPIO_setupPinDirection+0x182>
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <GPIO_setupPinDirection+0x140>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	69 f0       	breq	.+26     	; 0x1538 <GPIO_setupPinDirection+0x158>
    151e:	5f c0       	rjmp	.+190    	; 0x15de <GPIO_setupPinDirection+0x1fe>
    1520:	2c 81       	ldd	r18, Y+4	; 0x04
    1522:	3d 81       	ldd	r19, Y+5	; 0x05
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	89 f1       	breq	.+98     	; 0x158c <GPIO_setupPinDirection+0x1ac>
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <GPIO_setupPinDirection+0x156>
    1534:	40 c0       	rjmp	.+128    	; 0x15b6 <GPIO_setupPinDirection+0x1d6>
    1536:	53 c0       	rjmp	.+166    	; 0x15de <GPIO_setupPinDirection+0x1fe>
		{
		case PORTA_ID:
			CLEAR_BIT(DDRA, pinNum);
    1538:	aa e3       	ldi	r26, 0x3A	; 58
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ea e3       	ldi	r30, 0x3A	; 58
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <GPIO_setupPinDirection+0x176>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <GPIO_setupPinDirection+0x172>
    155a:	80 95       	com	r24
    155c:	84 23       	and	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	3e c0       	rjmp	.+124    	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTB_ID:
			CLEAR_BIT(DDRB, pinNum);
    1562:	a7 e3       	ldi	r26, 0x37	; 55
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e7 e3       	ldi	r30, 0x37	; 55
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_setupPinDirection+0x1a0>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_setupPinDirection+0x19c>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	29 c0       	rjmp	.+82     	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTC_ID:
			CLEAR_BIT(DDRC, pinNum);
    158c:	a4 e3       	ldi	r26, 0x34	; 52
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_setupPinDirection+0x1ca>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <GPIO_setupPinDirection+0x1fe>
			break;
		case PORTD_ID:
			CLEAR_BIT(DDRD, pinNum);
    15b6:	a1 e3       	ldi	r26, 0x31	; 49
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e1 e3       	ldi	r30, 0x31	; 49
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_setupPinDirection+0x1f4>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_setupPinDirection+0x1f0>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
			break;
		}
	}
	else
		return;
}
    15de:	27 96       	adiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	2d 97       	sbiw	r28, 0x0d	; 13
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6a 83       	std	Y+2, r22	; 0x02
    1608:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	88 30       	cpi	r24, 0x08	; 8
    160e:	08 f0       	brcs	.+2      	; 0x1612 <GPIO_writePin+0x22>
    1610:	05 c1       	rjmp	.+522    	; 0x181c <GPIO_writePin+0x22c>
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	08 f0       	brcs	.+2      	; 0x161a <GPIO_writePin+0x2a>
    1618:	01 c1       	rjmp	.+514    	; 0x181c <GPIO_writePin+0x22c>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3d 87       	std	Y+13, r19	; 0x0d
    1622:	2c 87       	std	Y+12, r18	; 0x0c
    1624:	8c 85       	ldd	r24, Y+12	; 0x0c
    1626:	9d 85       	ldd	r25, Y+13	; 0x0d
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <GPIO_writePin+0x40>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <GPIO_writePin+0xde>
    1630:	2c 85       	ldd	r18, Y+12	; 0x0c
    1632:	3d 85       	ldd	r19, Y+13	; 0x0d
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <GPIO_writePin+0x54>
    163a:	8c 85       	ldd	r24, Y+12	; 0x0c
    163c:	9d 85       	ldd	r25, Y+13	; 0x0d
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	71 f0       	breq	.+28     	; 0x165e <GPIO_writePin+0x6e>
    1642:	ec c0       	rjmp	.+472    	; 0x181c <GPIO_writePin+0x22c>
    1644:	2c 85       	ldd	r18, Y+12	; 0x0c
    1646:	3d 85       	ldd	r19, Y+13	; 0x0d
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <GPIO_writePin+0x60>
    164e:	77 c0       	rjmp	.+238    	; 0x173e <GPIO_writePin+0x14e>
    1650:	8c 85       	ldd	r24, Y+12	; 0x0c
    1652:	9d 85       	ldd	r25, Y+13	; 0x0d
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	91 05       	cpc	r25, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <GPIO_writePin+0x6c>
    165a:	a9 c0       	rjmp	.+338    	; 0x17ae <GPIO_writePin+0x1be>
    165c:	df c0       	rjmp	.+446    	; 0x181c <GPIO_writePin+0x22c>
		{
		case PORTA_ID:
			WRITE_BIT(PORTA, pin_num, value);
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3b 87       	std	Y+11, r19	; 0x0b
    1666:	2a 87       	std	Y+10, r18	; 0x0a
    1668:	8a 85       	ldd	r24, Y+10	; 0x0a
    166a:	9b 85       	ldd	r25, Y+11	; 0x0b
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	31 f0       	breq	.+12     	; 0x167c <GPIO_writePin+0x8c>
    1670:	2a 85       	ldd	r18, Y+10	; 0x0a
    1672:	3b 85       	ldd	r19, Y+11	; 0x0b
    1674:	21 30       	cpi	r18, 0x01	; 1
    1676:	31 05       	cpc	r19, r1
    1678:	b1 f0       	breq	.+44     	; 0x16a6 <GPIO_writePin+0xb6>
    167a:	d0 c0       	rjmp	.+416    	; 0x181c <GPIO_writePin+0x22c>
    167c:	ab e3       	ldi	r26, 0x3B	; 59
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e3       	ldi	r30, 0x3B	; 59
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_writePin+0xaa>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_writePin+0xa6>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	bb c0       	rjmp	.+374    	; 0x181c <GPIO_writePin+0x22c>
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_writePin+0xd4>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_writePin+0xd0>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	a7 c0       	rjmp	.+334    	; 0x181c <GPIO_writePin+0x22c>
			break;
		case PORTB_ID:
			WRITE_BIT(PORTB, pin_num, value);
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	39 87       	std	Y+9, r19	; 0x09
    16d6:	28 87       	std	Y+8, r18	; 0x08
    16d8:	88 85       	ldd	r24, Y+8	; 0x08
    16da:	99 85       	ldd	r25, Y+9	; 0x09
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	31 f0       	breq	.+12     	; 0x16ec <GPIO_writePin+0xfc>
    16e0:	28 85       	ldd	r18, Y+8	; 0x08
    16e2:	39 85       	ldd	r19, Y+9	; 0x09
    16e4:	21 30       	cpi	r18, 0x01	; 1
    16e6:	31 05       	cpc	r19, r1
    16e8:	b1 f0       	breq	.+44     	; 0x1716 <GPIO_writePin+0x126>
    16ea:	98 c0       	rjmp	.+304    	; 0x181c <GPIO_writePin+0x22c>
    16ec:	a8 e3       	ldi	r26, 0x38	; 56
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 e3       	ldi	r30, 0x38	; 56
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_writePin+0x11a>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_writePin+0x116>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	83 c0       	rjmp	.+262    	; 0x181c <GPIO_writePin+0x22c>
    1716:	a8 e3       	ldi	r26, 0x38	; 56
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_writePin+0x144>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_writePin+0x140>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	6f c0       	rjmp	.+222    	; 0x181c <GPIO_writePin+0x22c>
			break;
		case PORTC_ID:
			WRITE_BIT(PORTC, pin_num, value);
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3f 83       	std	Y+7, r19	; 0x07
    1746:	2e 83       	std	Y+6, r18	; 0x06
    1748:	8e 81       	ldd	r24, Y+6	; 0x06
    174a:	9f 81       	ldd	r25, Y+7	; 0x07
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	31 f0       	breq	.+12     	; 0x175c <GPIO_writePin+0x16c>
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	21 30       	cpi	r18, 0x01	; 1
    1756:	31 05       	cpc	r19, r1
    1758:	b1 f0       	breq	.+44     	; 0x1786 <GPIO_writePin+0x196>
    175a:	60 c0       	rjmp	.+192    	; 0x181c <GPIO_writePin+0x22c>
    175c:	a5 e3       	ldi	r26, 0x35	; 53
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e3       	ldi	r30, 0x35	; 53
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_writePin+0x18a>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_writePin+0x186>
    177e:	80 95       	com	r24
    1780:	84 23       	and	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	4b c0       	rjmp	.+150    	; 0x181c <GPIO_writePin+0x22c>
    1786:	a5 e3       	ldi	r26, 0x35	; 53
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e5 e3       	ldi	r30, 0x35	; 53
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_writePin+0x1b4>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_writePin+0x1b0>
    17a8:	84 2b       	or	r24, r20
    17aa:	8c 93       	st	X, r24
    17ac:	37 c0       	rjmp	.+110    	; 0x181c <GPIO_writePin+0x22c>
			break;
		case PORTD_ID:
			WRITE_BIT(PORTD, pin_num, value);
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3d 83       	std	Y+5, r19	; 0x05
    17b6:	2c 83       	std	Y+4, r18	; 0x04
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	31 f0       	breq	.+12     	; 0x17cc <GPIO_writePin+0x1dc>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	21 30       	cpi	r18, 0x01	; 1
    17c6:	31 05       	cpc	r19, r1
    17c8:	b1 f0       	breq	.+44     	; 0x17f6 <GPIO_writePin+0x206>
    17ca:	28 c0       	rjmp	.+80     	; 0x181c <GPIO_writePin+0x22c>
    17cc:	a2 e3       	ldi	r26, 0x32	; 50
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e2 e3       	ldi	r30, 0x32	; 50
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <GPIO_writePin+0x1fa>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <GPIO_writePin+0x1f6>
    17ee:	80 95       	com	r24
    17f0:	84 23       	and	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	13 c0       	rjmp	.+38     	; 0x181c <GPIO_writePin+0x22c>
    17f6:	a2 e3       	ldi	r26, 0x32	; 50
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e2 e3       	ldi	r30, 0x32	; 50
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <GPIO_writePin+0x224>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <GPIO_writePin+0x220>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
			break;
		}
	}
}
    181c:	2d 96       	adiw	r28, 0x0d	; 13
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_readPin+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <GPIO_readPin+0x8>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
    183e:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	18 f4       	brcc	.+6      	; 0x184c <GPIO_readPin+0x1e>
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	10 f0       	brcs	.+4      	; 0x1850 <GPIO_readPin+0x22>
	{
		pinValue = LOGIC_LOW;
    184c:	19 82       	std	Y+1, r1	; 0x01
    184e:	67 c0       	rjmp	.+206    	; 0x191e <GPIO_readPin+0xf0>
	}
	else
	{
		switch (port_num)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3d 83       	std	Y+5, r19	; 0x05
    1858:	2c 83       	std	Y+4, r18	; 0x04
    185a:	4c 81       	ldd	r20, Y+4	; 0x04
    185c:	5d 81       	ldd	r21, Y+5	; 0x05
    185e:	41 30       	cpi	r20, 0x01	; 1
    1860:	51 05       	cpc	r21, r1
    1862:	41 f1       	breq	.+80     	; 0x18b4 <GPIO_readPin+0x86>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	91 05       	cpc	r25, r1
    186c:	34 f4       	brge	.+12     	; 0x187a <GPIO_readPin+0x4c>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	61 f0       	breq	.+24     	; 0x1890 <GPIO_readPin+0x62>
    1878:	52 c0       	rjmp	.+164    	; 0x191e <GPIO_readPin+0xf0>
    187a:	4c 81       	ldd	r20, Y+4	; 0x04
    187c:	5d 81       	ldd	r21, Y+5	; 0x05
    187e:	42 30       	cpi	r20, 0x02	; 2
    1880:	51 05       	cpc	r21, r1
    1882:	51 f1       	breq	.+84     	; 0x18d8 <GPIO_readPin+0xaa>
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	91 05       	cpc	r25, r1
    188c:	b9 f1       	breq	.+110    	; 0x18fc <GPIO_readPin+0xce>
    188e:	47 c0       	rjmp	.+142    	; 0x191e <GPIO_readPin+0xf0>
		{
		case PORTA_ID:
			pinValue = GET_BIT(PINA, pin_num);
    1890:	e9 e3       	ldi	r30, 0x39	; 57
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_readPin+0x7a>
    18a4:	55 95       	asr	r21
    18a6:	47 95       	ror	r20
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_readPin+0x76>
    18ac:	ca 01       	movw	r24, r20
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	35 c0       	rjmp	.+106    	; 0x191e <GPIO_readPin+0xf0>
			break;
		case PORTB_ID:
			pinValue = GET_BIT(PINB, pin_num);
    18b4:	e6 e3       	ldi	r30, 0x36	; 54
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a9 01       	movw	r20, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <GPIO_readPin+0x9e>
    18c8:	55 95       	asr	r21
    18ca:	47 95       	ror	r20
    18cc:	8a 95       	dec	r24
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <GPIO_readPin+0x9a>
    18d0:	ca 01       	movw	r24, r20
    18d2:	81 70       	andi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	23 c0       	rjmp	.+70     	; 0x191e <GPIO_readPin+0xf0>
			break;
		case PORTC_ID:
			pinValue = GET_BIT(PINC, pin_num);
    18d8:	e3 e3       	ldi	r30, 0x33	; 51
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_readPin+0xc2>
    18ec:	55 95       	asr	r21
    18ee:	47 95       	ror	r20
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_readPin+0xbe>
    18f4:	ca 01       	movw	r24, r20
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	11 c0       	rjmp	.+34     	; 0x191e <GPIO_readPin+0xf0>
			break;
		case PORTD_ID:
			pinValue = GET_BIT(PIND, pin_num);
    18fc:	e0 e3       	ldi	r30, 0x30	; 48
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_readPin+0xe6>
    1910:	55 95       	asr	r21
    1912:	47 95       	ror	r20
    1914:	8a 95       	dec	r24
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_readPin+0xe2>
    1918:	ca 01       	movw	r24, r20
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    191e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_setupPortDirection+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_setupPortDirection+0x8>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	90 f5       	brcc	.+100    	; 0x19aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3c 83       	std	Y+4, r19	; 0x04
    194e:	2b 83       	std	Y+3, r18	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	d1 f0       	breq	.+52     	; 0x198e <GPIO_setupPortDirection+0x5e>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <GPIO_setupPortDirection+0x3e>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	61 f0       	breq	.+24     	; 0x1984 <GPIO_setupPortDirection+0x54>
    196c:	1e c0       	rjmp	.+60     	; 0x19aa <GPIO_setupPortDirection+0x7a>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <GPIO_setupPortDirection+0x68>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	81 f0       	breq	.+32     	; 0x19a2 <GPIO_setupPortDirection+0x72>
    1982:	13 c0       	rjmp	.+38     	; 0x19aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	80 83       	st	Z, r24
    198c:	0e c0       	rjmp	.+28     	; 0x19aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    198e:	e7 e3       	ldi	r30, 0x37	; 55
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1998:	e4 e3       	ldi	r30, 0x34	; 52
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <GPIO_writePort+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <GPIO_writePort+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	90 f5       	brcc	.+100    	; 0x1a32 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write value on a specific port as required */
		switch (port_num)
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3c 83       	std	Y+4, r19	; 0x04
    19d6:	2b 83       	std	Y+3, r18	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	d1 f0       	breq	.+52     	; 0x1a16 <GPIO_writePort+0x5e>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <GPIO_writePort+0x3e>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <GPIO_writePort+0x54>
    19f4:	1e c0       	rjmp	.+60     	; 0x1a32 <GPIO_writePort+0x7a>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <GPIO_writePort+0x68>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <GPIO_writePort+0x72>
    1a0a:	13 c0       	rjmp	.+38     	; 0x1a32 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	80 83       	st	Z, r24
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a20:	e5 e3       	ldi	r30, 0x35	; 53
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a2a:	e2 e3       	ldi	r30, 0x32	; 50
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_readPort+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_readPort+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue;
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	10 f0       	brcs	.+4      	; 0x1a58 <GPIO_readPort+0x18>
	{
		portValue = LOGIC_LOW;
    1a54:	19 82       	std	Y+1, r1	; 0x01
    1a56:	32 c0       	rjmp	.+100    	; 0x1abc <GPIO_readPort+0x7c>
	}
	else
	{
		/* Read and return value on a specific port as required */
		switch (port_num)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3c 83       	std	Y+4, r19	; 0x04
    1a60:	2b 83       	std	Y+3, r18	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <GPIO_readPort+0x60>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <GPIO_readPort+0x40>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <GPIO_readPort+0x56>
    1a7e:	1e c0       	rjmp	.+60     	; 0x1abc <GPIO_readPort+0x7c>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <GPIO_readPort+0x6a>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <GPIO_readPort+0x74>
    1a94:	13 c0       	rjmp	.+38     	; 0x1abc <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			portValue =  PINA;
    1a96:	e9 e3       	ldi	r30, 0x39	; 57
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			portValue =  PINB;
    1aa0:	e6 e3       	ldi	r30, 0x36	; 54
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			portValue =  PINC;
    1aaa:	e3 e3       	ldi	r30, 0x33	; 51
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			portValue =  PIND;
    1ab4:	e0 e3       	ldi	r30, 0x30	; 48
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return portValue;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <__vector_10>:
/*******************************************************************************
 *                           INTERRUPT SERVICE ROUTINE                         *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    1acc:	1f 92       	push	r1
    1ace:	0f 92       	push	r0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	0f 92       	push	r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	ef 93       	push	r30
    1aec:	ff 93       	push	r31
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_CallBackPtr != NULL_PTR)
    1af6:	80 91 7d 00 	lds	r24, 0x007D
    1afa:	90 91 7e 00 	lds	r25, 0x007E
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer0_CallBackPtr */
    1b02:	e0 91 7d 00 	lds	r30, 0x007D
    1b06:	f0 91 7e 00 	lds	r31, 0x007E
    1b0a:	09 95       	icall
	}
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_CallBackPtr != NULL_PTR)
    1b5c:	80 91 7d 00 	lds	r24, 0x007D
    1b60:	90 91 7e 00 	lds	r25, 0x007E
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer0_CallBackPtr */
    1b68:	e0 91 7d 00 	lds	r30, 0x007D
    1b6c:	f0 91 7e 00 	lds	r31, 0x007E
    1b70:	09 95       	icall
	}

}
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_CallBackPtr != NULL_PTR)
    1bc2:	80 91 7f 00 	lds	r24, 0x007F
    1bc6:	90 91 80 00 	lds	r25, 0x0080
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer1_CallBackPtr */
    1bce:	e0 91 7f 00 	lds	r30, 0x007F
    1bd2:	f0 91 80 00 	lds	r31, 0x0080
    1bd6:	09 95       	icall
	}
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_CallBackPtr != NULL_PTR)
    1c28:	80 91 7f 00 	lds	r24, 0x007F
    1c2c:	90 91 80 00 	lds	r25, 0x0080
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer1_CallBackPtr */
    1c34:	e0 91 7f 00 	lds	r30, 0x007F
    1c38:	f0 91 80 00 	lds	r31, 0x0080
    1c3c:	09 95       	icall
	}
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_CallBackPtr != NULL_PTR)
    1c8e:	80 91 81 00 	lds	r24, 0x0081
    1c92:	90 91 82 00 	lds	r25, 0x0082
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	29 f0       	breq	.+10     	; 0x1ca4 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer2_CallBackPtr */
    1c9a:	e0 91 81 00 	lds	r30, 0x0081
    1c9e:	f0 91 82 00 	lds	r31, 0x0082
    1ca2:	09 95       	icall
	}
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	ff 91       	pop	r31
    1caa:	ef 91       	pop	r30
    1cac:	bf 91       	pop	r27
    1cae:	af 91       	pop	r26
    1cb0:	9f 91       	pop	r25
    1cb2:	8f 91       	pop	r24
    1cb4:	7f 91       	pop	r23
    1cb6:	6f 91       	pop	r22
    1cb8:	5f 91       	pop	r21
    1cba:	4f 91       	pop	r20
    1cbc:	3f 91       	pop	r19
    1cbe:	2f 91       	pop	r18
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_CallBackPtr != NULL_PTR)
    1cf4:	80 91 81 00 	lds	r24, 0x0081
    1cf8:	90 91 82 00 	lds	r25, 0x0082
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	29 f0       	breq	.+10     	; 0x1d0a <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_CallBackPtr)(); /* another method to call the function using pointer to function g_Timer2_CallBackPtr */
    1d00:	e0 91 81 00 	lds	r30, 0x0081
    1d04:	f0 91 82 00 	lds	r31, 0x0082
    1d08:	09 95       	icall
	}
}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	0f 90       	pop	r0
    1d2c:	1f 90       	pop	r1
    1d2e:	18 95       	reti

00001d30 <Timer_init>:
     Function to initialize the Timer driver
 Inputs:
     Pointer to the configuration structure with type Timer1_ConfigType.
*/
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <Timer_init+0x6>
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	/* Check on the Timer ID if it's Timer0 or not
	 * Check on the status of the prescaler if it's DUMMY value or not
	 */
	if ((Config_Ptr->timerId == TIMER0) && (Config_Ptr->prescaler != DUMMY))
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	80 81       	ld	r24, Z
    1d44:	88 23       	and	r24, r24
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <Timer_init+0x1a>
    1d48:	5c c0       	rjmp	.+184    	; 0x1e02 <Timer_init+0xd2>
    1d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4e:	86 81       	ldd	r24, Z+6	; 0x06
    1d50:	8f 3f       	cpi	r24, 0xFF	; 255
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <Timer_init+0x26>
    1d54:	56 c0       	rjmp	.+172    	; 0x1e02 <Timer_init+0xd2>
	{
		/* Set the initial value of Timer0 that will start counting from it */
		TCNT0 = Config_Ptr->initial_value;
    1d56:	a2 e5       	ldi	r26, 0x52	; 82
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	8c 93       	st	X, r24

		/* As Prescaler value isn't Dummy value, then put it in TCCR0 register */
		TCCR0 = (Config_Ptr->prescaler << CS00);
    1d64:	a3 e5       	ldi	r26, 0x53	; 83
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6c:	86 81       	ldd	r24, Z+6	; 0x06
    1d6e:	8c 93       	st	X, r24

		if (Config_Ptr->mode == OVERFLOW_MODE)
    1d70:	e9 81       	ldd	r30, Y+1	; 0x01
    1d72:	fa 81       	ldd	r31, Y+2	; 0x02
    1d74:	81 81       	ldd	r24, Z+1	; 0x01
    1d76:	88 23       	and	r24, r24
    1d78:	79 f4       	brne	.+30     	; 0x1d98 <Timer_init+0x68>
			/* Configure Timer0 control register TCCR0:
			 * 1. Normal port operation, OC0 disconnected --> COM01=0 COM00=0
			 * 2. Non PWM Mode --> FOC0=1
			 * 3. Normal Mode WGM01=0 WGM00=0 (Mode Number 0)
			 */
			TCCR0 |= (1 << FOC0);
    1d7a:	a3 e5       	ldi	r26, 0x53	; 83
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 e5       	ldi	r30, 0x53	; 83
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 68       	ori	r24, 0x80	; 128
    1d86:	8c 93       	st	X, r24

			/* Enable Timer/Counter0 Overflow Interrupt */
			SET_BIT(TIMSK,TOIE0);
    1d88:	a9 e5       	ldi	r26, 0x59	; 89
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e9 e5       	ldi	r30, 0x59	; 89
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	81 60       	ori	r24, 0x01	; 1
    1d94:	8c 93       	st	X, r24
    1d96:	02 c1       	rjmp	.+516    	; 0x1f9c <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == COMPARE_MODE)
    1d98:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	b1 f4       	brne	.+44     	; 0x1dce <Timer_init+0x9e>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR0 = Config_Ptr->compare_value;
    1da2:	ac e5       	ldi	r26, 0x5C	; 92
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	84 81       	ldd	r24, Z+4	; 0x04
    1dac:	95 81       	ldd	r25, Z+5	; 0x05
    1dae:	8c 93       	st	X, r24
			/* Configure Timer0 control register TCCR0:
			 * 1. Clear OC0 on compare match (Set output to low level) --> COM01=1 COM00=0
			 * 2. Non PWM Mode --> FOC0=1
			 * 3. CTC Mode WGM01=1 WGM00=0 (Mode Number 2)
			 */
			TCCR0 |= (1 << FOC0) | (1 << COM01) | (1 << WGM01);
    1db0:	a3 e5       	ldi	r26, 0x53	; 83
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e3 e5       	ldi	r30, 0x53	; 83
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	88 6a       	ori	r24, 0xA8	; 168
    1dbc:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			SET_BIT(TIMSK,OCIE0);
    1dbe:	a9 e5       	ldi	r26, 0x59	; 89
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e9 e5       	ldi	r30, 0x59	; 89
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	82 60       	ori	r24, 0x02	; 2
    1dca:	8c 93       	st	X, r24
    1dcc:	e7 c0       	rjmp	.+462    	; 0x1f9c <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == FAST_PWM_MODE)
    1dce:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd2:	81 81       	ldd	r24, Z+1	; 0x01
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <Timer_init+0xaa>
    1dd8:	e1 c0       	rjmp	.+450    	; 0x1f9c <Timer_init+0x26c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR0 = Config_Ptr->compare_value;
    1dda:	ac e5       	ldi	r26, 0x5C	; 92
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e9 81       	ldd	r30, Y+1	; 0x01
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	84 81       	ldd	r24, Z+4	; 0x04
    1de4:	95 81       	ldd	r25, Z+5	; 0x05
    1de6:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Fast PWM mode FOC0=0
			 * 2. Fast PWM Mode WGM01=1 & WGM00=1
			 * 3. Clear OC0 when match occurs (non inverted mode) COM01=1 & COM00=0
			 */
			TCCR0 |= (1 << COM01) | (1 << WGM01) | (1 << WGM00);
    1de8:	a3 e5       	ldi	r26, 0x53	; 83
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e3 e5       	ldi	r30, 0x53	; 83
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	88 66       	ori	r24, 0x68	; 104
    1df4:	8c 93       	st	X, r24

			/* Set PB3/OC0 as Output pin --> pin where the PWM signal is generated from MC. */
			GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	63 e0       	ldi	r22, 0x03	; 3
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
    1e00:	cd c0       	rjmp	.+410    	; 0x1f9c <Timer_init+0x26c>
	}

	/* Check on the Timer ID if it's Timer1 or not
	 * Check on the status of the prescaler if it's DUMMY value or not
	 */
	else if ((Config_Ptr->timerId == TIMER1) && (Config_Ptr->prescaler != DUMMY))
    1e02:	e9 81       	ldd	r30, Y+1	; 0x01
    1e04:	fa 81       	ldd	r31, Y+2	; 0x02
    1e06:	80 81       	ld	r24, Z
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <Timer_init+0xde>
    1e0c:	67 c0       	rjmp	.+206    	; 0x1edc <Timer_init+0x1ac>
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	86 81       	ldd	r24, Z+6	; 0x06
    1e14:	8f 3f       	cpi	r24, 0xFF	; 255
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <Timer_init+0xea>
    1e18:	61 c0       	rjmp	.+194    	; 0x1edc <Timer_init+0x1ac>
	{
		/* Set the initial value of Timer1 that will start counting from it */
		TCNT1 = Config_Ptr->initial_value;
    1e1a:	ac e4       	ldi	r26, 0x4C	; 76
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	11 96       	adiw	r26, 0x01	; 1
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24

		/* As Prescaler value isn't Dummy value, then put it in TCCR1B register */
		TCCR1B = (Config_Ptr->prescaler << CS10);
    1e2c:	ae e4       	ldi	r26, 0x4E	; 78
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	86 81       	ldd	r24, Z+6	; 0x06
    1e36:	8c 93       	st	X, r24

		if (Config_Ptr->mode == OVERFLOW_MODE)
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	81 81       	ldd	r24, Z+1	; 0x01
    1e3e:	88 23       	and	r24, r24
    1e40:	61 f4       	brne	.+24     	; 0x1e5a <Timer_init+0x12a>
			/* Configure Timer1 control register TCCR1A:
			 * 1. Normal port operation, OC1A/OC1B disconnected --> COM1A1=0 COM1A0=0
			 * 2. Non PWM Mode --> FOC1A=1
			 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 0)
			 */
			TCCR1A = (1 << FOC1A);
    1e42:	ef e4       	ldi	r30, 0x4F	; 79
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	88 e0       	ldi	r24, 0x08	; 8
    1e48:	80 83       	st	Z, r24

			/* Enable Timer/Counter1 Overflow Interrupt */
			SET_BIT(TIMSK,TOIE1);
    1e4a:	a9 e5       	ldi	r26, 0x59	; 89
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e9 e5       	ldi	r30, 0x59	; 89
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	84 60       	ori	r24, 0x04	; 4
    1e56:	8c 93       	st	X, r24
    1e58:	a1 c0       	rjmp	.+322    	; 0x1f9c <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == COMPARE_MODE)
    1e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5e:	81 81       	ldd	r24, Z+1	; 0x01
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	e1 f4       	brne	.+56     	; 0x1e9c <Timer_init+0x16c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR1A = Config_Ptr->compare_value;
    1e64:	aa e4       	ldi	r26, 0x4A	; 74
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6c:	84 81       	ldd	r24, Z+4	; 0x04
    1e6e:	95 81       	ldd	r25, Z+5	; 0x05
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
			/* Configure Timer1 control register TCCR1A:
			 * 1. Clear OC1A on compare match (Set output to low level) --> COM1A1=1 COM1A0=0
			 * 2. Non PWM Mode --> FOC1A=1
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1 << FOC1A) | (1 << COM1A1);
    1e76:	ef e4       	ldi	r30, 0x4F	; 79
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	88 e8       	ldi	r24, 0x88	; 136
    1e7c:	80 83       	st	Z, r24

			/* Configure Timer1 control register TCCR1B:
			 * CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 */
			TCCR1B |= (1 << WGM12);
    1e7e:	ae e4       	ldi	r26, 0x4E	; 78
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ee e4       	ldi	r30, 0x4E	; 78
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	88 60       	ori	r24, 0x08	; 8
    1e8a:	8c 93       	st	X, r24

			/* Enable Timer1 Compare A Interrupt */
			SET_BIT(TIMSK,OCIE1A);
    1e8c:	a9 e5       	ldi	r26, 0x59	; 89
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e9 e5       	ldi	r30, 0x59	; 89
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 61       	ori	r24, 0x10	; 16
    1e98:	8c 93       	st	X, r24
    1e9a:	80 c0       	rjmp	.+256    	; 0x1f9c <Timer_init+0x26c>
		}

		else if (Config_Ptr->mode == FAST_PWM_MODE)
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <Timer_init+0x178>
    1ea6:	7a c0       	rjmp	.+244    	; 0x1f9c <Timer_init+0x26c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR1A = Config_Ptr->compare_value;
    1ea8:	aa e4       	ldi	r26, 0x4A	; 74
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	84 81       	ldd	r24, Z+4	; 0x04
    1eb2:	95 81       	ldd	r25, Z+5	; 0x05
    1eb4:	11 96       	adiw	r26, 0x01	; 1
    1eb6:	9c 93       	st	X, r25
    1eb8:	8e 93       	st	-X, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
		     * 3. PWM Mode --> FOC1A=0 FOC1B=0
		     * 4. Fast Pwm Mode with the TOP in OCR1A WGM10=1 WGM11=1 (Mode Number 15)
			 */
			TCCR1A = (1 << COM1A1) | (1 << WGM10) | (1 << WGM11);
    1eba:	ef e4       	ldi	r30, 0x4F	; 79
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	83 e8       	ldi	r24, 0x83	; 131
    1ec0:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * Fast Pwm Mode with the TOP in OCR1A WGM12=1 WGM13=1 (Mode Number 15)
		     */
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
    1ec2:	ae e4       	ldi	r26, 0x4E	; 78
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	ee e4       	ldi	r30, 0x4E	; 78
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 61       	ori	r24, 0x18	; 24
    1ece:	8c 93       	st	X, r24

			/* Set PD5/OC1A as Output pin --> pin where the PWM signal is generated from MC. */
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	65 e0       	ldi	r22, 0x05	; 5
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
    1eda:	60 c0       	rjmp	.+192    	; 0x1f9c <Timer_init+0x26c>
	}

	/* Check on the Timer ID if it's Timer2 or not
	 * Check on the status of the prescaler if it's DUMMY value or not
	 */
	else if ((Config_Ptr->timerId == TIMER2) && (Config_Ptr->prescaler2 != DUMMY))
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	80 81       	ld	r24, Z
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <Timer_init+0x1b8>
    1ee6:	5a c0       	rjmp	.+180    	; 0x1f9c <Timer_init+0x26c>
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	87 81       	ldd	r24, Z+7	; 0x07
    1eee:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <Timer_init+0x1c4>
    1ef2:	54 c0       	rjmp	.+168    	; 0x1f9c <Timer_init+0x26c>
	{
		/* Set the initial value of Timer2 that will start counting from it */
		TCNT2 = Config_Ptr->initial_value;
    1ef4:	a4 e4       	ldi	r26, 0x44	; 68
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	8c 93       	st	X, r24

		/* As Prescaler value isn't Dummy value, then put it in TCCR2 register */
		TCCR2 = (Config_Ptr->prescaler2 << CS20);
    1f02:	a5 e4       	ldi	r26, 0x45	; 69
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	87 81       	ldd	r24, Z+7	; 0x07
    1f0c:	8c 93       	st	X, r24


		if (Config_Ptr->mode == OVERFLOW_MODE)
    1f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f10:	fa 81       	ldd	r31, Y+2	; 0x02
    1f12:	81 81       	ldd	r24, Z+1	; 0x01
    1f14:	88 23       	and	r24, r24
    1f16:	79 f4       	brne	.+30     	; 0x1f36 <Timer_init+0x206>
			/* Configure Timer2 control register TCCR2:
			 * 1. Normal port operation, OC2 disconnected --> COM21=0 COM20=0
			 * 2. Non PWM Mode --> FOC2=1
			 * 3. Normal Mode WGM21=0 WGM20=0 (Mode Number 0)
			 */
			TCCR2 |= (1 << FOC2);
    1f18:	a5 e4       	ldi	r26, 0x45	; 69
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e5 e4       	ldi	r30, 0x45	; 69
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	80 68       	ori	r24, 0x80	; 128
    1f24:	8c 93       	st	X, r24

			/* Enable Timer/Counter2 Overflow Interrupt */
			SET_BIT(TIMSK,TOIE2);
    1f26:	a9 e5       	ldi	r26, 0x59	; 89
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e9 e5       	ldi	r30, 0x59	; 89
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 64       	ori	r24, 0x40	; 64
    1f32:	8c 93       	st	X, r24
    1f34:	33 c0       	rjmp	.+102    	; 0x1f9c <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == COMPARE_MODE)
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	81 81       	ldd	r24, Z+1	; 0x01
    1f3c:	81 30       	cpi	r24, 0x01	; 1
    1f3e:	b1 f4       	brne	.+44     	; 0x1f6c <Timer_init+0x23c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR2 = Config_Ptr->compare_value;
    1f40:	a3 e4       	ldi	r26, 0x43	; 67
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e9 81       	ldd	r30, Y+1	; 0x01
    1f46:	fa 81       	ldd	r31, Y+2	; 0x02
    1f48:	84 81       	ldd	r24, Z+4	; 0x04
    1f4a:	95 81       	ldd	r25, Z+5	; 0x05
    1f4c:	8c 93       	st	X, r24
			/* Configure Timer2 control register TCCR2:
			 * 1. Clear OC2 on compare match (Set output to low level) --> COM21=1 COM20=0
			 * 2. Non PWM Mode --> FOC2=1
			 * 3. CTC Mode WGM21=1 WGM20=0 (Mode Number 2)
			 */
			TCCR2 |= (1 << FOC2) | (1 << COM21) | (1 << WGM21);
    1f4e:	a5 e4       	ldi	r26, 0x45	; 69
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e5 e4       	ldi	r30, 0x45	; 69
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 6a       	ori	r24, 0xA8	; 168
    1f5a:	8c 93       	st	X, r24

			/* Enable Timer2 Compare Interrupt */
			SET_BIT(TIMSK,OCIE2);
    1f5c:	a9 e5       	ldi	r26, 0x59	; 89
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e9 e5       	ldi	r30, 0x59	; 89
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	80 68       	ori	r24, 0x80	; 128
    1f68:	8c 93       	st	X, r24
    1f6a:	18 c0       	rjmp	.+48     	; 0x1f9c <Timer_init+0x26c>
		}
		else if (Config_Ptr->mode == FAST_PWM_MODE)
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	81 81       	ldd	r24, Z+1	; 0x01
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	99 f4       	brne	.+38     	; 0x1f9c <Timer_init+0x26c>
		{
			/* Set the Compare value dynamically according to user configurations */
			OCR2 = Config_Ptr->compare_value;
    1f76:	a3 e4       	ldi	r26, 0x43	; 67
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	84 81       	ldd	r24, Z+4	; 0x04
    1f80:	95 81       	ldd	r25, Z+5	; 0x05
    1f82:	8c 93       	st	X, r24
			/* Configure Timer2 control register TCCR2:
			 * 1. Fast PWM mode FOC2=0
			 * 2. Fast PWM Mode WGM21=1 & WGM20=1
			 * 3. Clear OC2 when match occurs (non inverted mode) COM21=1 & COM20=0
			 */
			TCCR2 |= (1 << COM21) | (1 << WGM21) | (1 << WGM20);
    1f84:	a5 e4       	ldi	r26, 0x45	; 69
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e4       	ldi	r30, 0x45	; 69
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 66       	ori	r24, 0x68	; 104
    1f90:	8c 93       	st	X, r24

			/* Set PD7/OC2 as Output pin --> pin where the PWM signal is generated from MC. */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	67 e0       	ldi	r22, 0x07	; 7
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
		}
	}
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <Timer_setCallBack>:
 Inputs:
    1) Pointer to Call Back function.
    2) Variable of enum type Timer_ID to select which Timer you want to set Call Back function for it
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID timerID)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <Timer_setCallBack+0x6>
    1fac:	0f 92       	push	r0
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	6b 83       	std	Y+3, r22	; 0x03
	if (timerID == TIMER0)
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 23       	and	r24, r24
    1fbc:	39 f4       	brne	.+14     	; 0x1fcc <Timer_setCallBack+0x26>
	{
		g_Timer0_CallBackPtr = a_ptr;
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	90 93 7e 00 	sts	0x007E, r25
    1fc6:	80 93 7d 00 	sts	0x007D, r24
    1fca:	13 c0       	rjmp	.+38     	; 0x1ff2 <Timer_setCallBack+0x4c>
	}
	else if (timerID == TIMER1)
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	39 f4       	brne	.+14     	; 0x1fe0 <Timer_setCallBack+0x3a>
	{
		g_Timer1_CallBackPtr = a_ptr;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	90 93 80 00 	sts	0x0080, r25
    1fda:	80 93 7f 00 	sts	0x007F, r24
    1fde:	09 c0       	rjmp	.+18     	; 0x1ff2 <Timer_setCallBack+0x4c>
	}

	else if (timerID == TIMER2)
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	31 f4       	brne	.+12     	; 0x1ff2 <Timer_setCallBack+0x4c>
	{
		g_Timer2_CallBackPtr = a_ptr;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	90 93 82 00 	sts	0x0082, r25
    1fee:	80 93 81 00 	sts	0x0081, r24
	}
	else
		return;
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <Timer_deInit>:
     Function to disable the Timer1.
 Inputs:
     Takes variable of enum type Timer_ID to select which Timer that user wants to de-initialize
*/
void Timer_deInit(Timer_ID timerID)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	0f 92       	push	r0
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	89 83       	std	Y+1, r24	; 0x01
	if (timerID == TIMER0)
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	88 23       	and	r24, r24
    200e:	e1 f4       	brne	.+56     	; 0x2048 <Timer_deInit+0x4a>
	{
		/* Clearing all Timer0 Registers */
		TCCR0 = 0;
    2010:	e3 e5       	ldi	r30, 0x53	; 83
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	10 82       	st	Z, r1
		TCNT0 = 0;
    2016:	e2 e5       	ldi	r30, 0x52	; 82
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1
		OCR0 = 0;
    201c:	ec e5       	ldi	r30, 0x5C	; 92
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    2022:	a9 e5       	ldi	r26, 0x59	; 89
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e9 e5       	ldi	r30, 0x59	; 89
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8e 7f       	andi	r24, 0xFE	; 254
    202e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE0);
    2030:	a9 e5       	ldi	r26, 0x59	; 89
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e9 e5       	ldi	r30, 0x59	; 89
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8d 7f       	andi	r24, 0xFD	; 253
    203c:	8c 93       	st	X, r24

		/* NULLing the call back pointer of Timer0 */
		g_Timer0_CallBackPtr = NULL_PTR;
    203e:	10 92 7e 00 	sts	0x007E, r1
    2042:	10 92 7d 00 	sts	0x007D, r1
    2046:	42 c0       	rjmp	.+132    	; 0x20cc <Timer_deInit+0xce>
	}
	else if (timerID == TIMER1)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	09 f5       	brne	.+66     	; 0x2090 <Timer_deInit+0x92>
	{
		/* Clearing all Timer1 Registers */
		TCCR1A = 0;
    204e:	ef e4       	ldi	r30, 0x4F	; 79
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	10 82       	st	Z, r1
		TCCR1B = 0;
    2054:	ee e4       	ldi	r30, 0x4E	; 78
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	10 82       	st	Z, r1
		TCNT1 = 0;
    205a:	ec e4       	ldi	r30, 0x4C	; 76
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	11 82       	std	Z+1, r1	; 0x01
    2060:	10 82       	st	Z, r1
		OCR1A = 0;
    2062:	ea e4       	ldi	r30, 0x4A	; 74
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	11 82       	std	Z+1, r1	; 0x01
    2068:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    206a:	a9 e5       	ldi	r26, 0x59	; 89
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e9 e5       	ldi	r30, 0x59	; 89
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8b 7f       	andi	r24, 0xFB	; 251
    2076:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    2078:	a9 e5       	ldi	r26, 0x59	; 89
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e9 e5       	ldi	r30, 0x59	; 89
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	8f 7e       	andi	r24, 0xEF	; 239
    2084:	8c 93       	st	X, r24

		/* NULLing the call back pointer of Timer1 */
		g_Timer1_CallBackPtr = NULL_PTR;
    2086:	10 92 80 00 	sts	0x0080, r1
    208a:	10 92 7f 00 	sts	0x007F, r1
    208e:	1e c0       	rjmp	.+60     	; 0x20cc <Timer_deInit+0xce>
	}

	else if (timerID == TIMER2)
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	d9 f4       	brne	.+54     	; 0x20cc <Timer_deInit+0xce>
	{
		/* Clearing all Timer2 Registers */
		TCCR2 = 0;
    2096:	e5 e4       	ldi	r30, 0x45	; 69
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	10 82       	st	Z, r1
		TCNT2 = 0;
    209c:	e4 e4       	ldi	r30, 0x44	; 68
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	10 82       	st	Z, r1
		OCR2 = 0;
    20a2:	e3 e4       	ldi	r30, 0x43	; 67
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    20a8:	a9 e5       	ldi	r26, 0x59	; 89
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e9 e5       	ldi	r30, 0x59	; 89
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7b       	andi	r24, 0xBF	; 191
    20b4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    20b6:	a9 e5       	ldi	r26, 0x59	; 89
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e9 e5       	ldi	r30, 0x59	; 89
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	8f 77       	andi	r24, 0x7F	; 127
    20c2:	8c 93       	st	X, r24

		/* NULLing the call back pointer of Timer2 */
		g_Timer2_CallBackPtr = NULL_PTR;
    20c4:	10 92 82 00 	sts	0x0082, r1
    20c8:	10 92 81 00 	sts	0x0081, r1
	}
	else
		return;        /* For any invalid input */
}
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <TWI_init>:
#include "twi.h"
#include "Macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *config_Ptr)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <TWI_init+0x6>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = config_Ptr->bit_rate;
    20e2:	a0 e2       	ldi	r26, 0x20	; 32
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	80 81       	ld	r24, Z
    20ec:	8c 93       	st	X, r24
	TWSR = config_Ptr->prescaler;
    20ee:	a1 e2       	ldi	r26, 0x21	; 33
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 81       	ldd	r30, Y+1	; 0x01
    20f4:	fa 81       	ldd	r31, Y+2	; 0x02
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (config_Ptr->slaveAddress << TWA0);
    20fa:	a2 e2       	ldi	r26, 0x22	; 34
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	81 81       	ldd	r24, Z+1	; 0x01
    2104:	88 0f       	add	r24, r24
    2106:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2108:	e6 e5       	ldi	r30, 0x56	; 86
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	84 e0       	ldi	r24, 0x04	; 4
    210e:	80 83       	st	Z, r24
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <TWI_start>:

void TWI_start(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2122:	e6 e5       	ldi	r30, 0x56	; 86
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	84 ea       	ldi	r24, 0xA4	; 164
    2128:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    212a:	e6 e5       	ldi	r30, 0x56	; 86
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	88 23       	and	r24, r24
    2132:	dc f7       	brge	.-10     	; 0x212a <TWI_start+0x10>
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <TWI_stop>:

void TWI_stop(void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2142:	e6 e5       	ldi	r30, 0x56	; 86
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	84 e9       	ldi	r24, 0x94	; 148
    2148:	80 83       	st	Z, r24
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	0f 92       	push	r0
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    215c:	e3 e2       	ldi	r30, 0x23	; 35
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2164:	e6 e5       	ldi	r30, 0x56	; 86
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	84 e8       	ldi	r24, 0x84	; 132
    216a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    216c:	e6 e5       	ldi	r30, 0x56	; 86
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	88 23       	and	r24, r24
    2174:	dc f7       	brge	.-10     	; 0x216c <TWI_writeByte+0x1c>
}
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2186:	e6 e5       	ldi	r30, 0x56	; 86
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	84 ec       	ldi	r24, 0xC4	; 196
    218c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    218e:	e6 e5       	ldi	r30, 0x56	; 86
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 23       	and	r24, r24
    2196:	dc f7       	brge	.-10     	; 0x218e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2198:	e3 e2       	ldi	r30, 0x23	; 35
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    21ac:	e6 e5       	ldi	r30, 0x56	; 86
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	84 e8       	ldi	r24, 0x84	; 132
    21b2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	88 23       	and	r24, r24
    21bc:	dc f7       	brge	.-10     	; 0x21b4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    21be:	e3 e2       	ldi	r30, 0x23	; 35
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
}
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    21d4:	e1 e2       	ldi	r30, 0x21	; 33
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 7f       	andi	r24, 0xF8	; 248
    21dc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *configPtr)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <UART_init+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <UART_init+0x8>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    21f8:	1a 82       	std	Y+2, r1	; 0x02
    21fa:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1 << U2X);       /* U2X = 1 for double transmission speed */
    21fc:	eb e2       	ldi	r30, 0x2B	; 43
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	82 e0       	ldi	r24, 0x02	; 2
    2202:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (5,6,7,8) bit data mode, This bit is set only for 9-bit data mode
	 * RXB8 & TXB8 used for 9-bit data mode only
	 ***********************************************************************/

	UCSRB = (1 << RXEN) | (1 << TXEN);
    2204:	ea e2       	ldi	r30, 0x2A	; 42
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	88 e1       	ldi	r24, 0x18	; 24
    220a:	80 83       	st	Z, r24
	 * UPM1:0  = Dynamically Configured according to user requirements
	 * USBS    = Dynamically Configured according to user requirements
	 * UCSZ1:0 = Dynamically Configured according to user requirements
	 ***********************************************************************/

	UCSRC = 0;
    220c:	e0 e4       	ldi	r30, 0x40	; 64
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	10 82       	st	Z, r1
	UCSRC |= (1 << URSEL);
    2212:	a0 e4       	ldi	r26, 0x40	; 64
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e0 e4       	ldi	r30, 0x40	; 64
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xCF) | (configPtr->parity << UPM0);
    2220:	a0 e4       	ldi	r26, 0x40	; 64
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e0 e4       	ldi	r30, 0x40	; 64
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	38 2f       	mov	r19, r24
    222c:	e0 e4       	ldi	r30, 0x40	; 64
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	28 2f       	mov	r18, r24
    2234:	2f 7c       	andi	r18, 0xCF	; 207
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	85 81       	ldd	r24, Z+5	; 0x05
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	82 95       	swap	r24
    2242:	92 95       	swap	r25
    2244:	90 7f       	andi	r25, 0xF0	; 240
    2246:	98 27       	eor	r25, r24
    2248:	80 7f       	andi	r24, 0xF0	; 240
    224a:	98 27       	eor	r25, r24
    224c:	82 2b       	or	r24, r18
    224e:	83 2b       	or	r24, r19
    2250:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF7) | (configPtr->stopBits << USBS);
    2252:	a0 e4       	ldi	r26, 0x40	; 64
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e0 e4       	ldi	r30, 0x40	; 64
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	38 2f       	mov	r19, r24
    225e:	e0 e4       	ldi	r30, 0x40	; 64
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	28 2f       	mov	r18, r24
    2266:	27 7f       	andi	r18, 0xF7	; 247
    2268:	eb 81       	ldd	r30, Y+3	; 0x03
    226a:	fc 81       	ldd	r31, Y+4	; 0x04
    226c:	86 81       	ldd	r24, Z+6	; 0x06
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	82 2b       	or	r24, r18
    2280:	83 2b       	or	r24, r19
    2282:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF9) | (configPtr->dataBits << UCSZ0);
    2284:	a0 e4       	ldi	r26, 0x40	; 64
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e0 e4       	ldi	r30, 0x40	; 64
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	38 2f       	mov	r19, r24
    2290:	e0 e4       	ldi	r30, 0x40	; 64
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	28 2f       	mov	r18, r24
    2298:	29 7f       	andi	r18, 0xF9	; 249
    229a:	eb 81       	ldd	r30, Y+3	; 0x03
    229c:	fc 81       	ldd	r31, Y+4	; 0x04
    229e:	84 81       	ldd	r24, Z+4	; 0x04
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	82 2b       	or	r24, r18
    22aa:	83 2b       	or	r24, r19
    22ac:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU/(8UL * configPtr->BaudRate)) - 1));
    22ae:	eb 81       	ldd	r30, Y+3	; 0x03
    22b0:	fc 81       	ldd	r31, Y+4	; 0x04
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	a2 81       	ldd	r26, Z+2	; 0x02
    22b8:	b3 81       	ldd	r27, Z+3	; 0x03
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	aa 1f       	adc	r26, r26
    22c8:	bb 1f       	adc	r27, r27
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	aa 1f       	adc	r26, r26
    22d0:	bb 1f       	adc	r27, r27
    22d2:	9c 01       	movw	r18, r24
    22d4:	ad 01       	movw	r20, r26
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	92 e1       	ldi	r25, 0x12	; 18
    22da:	aa e7       	ldi	r26, 0x7A	; 122
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 1c 12 	call	0x2438	; 0x2438 <__udivmodsi4>
    22e6:	da 01       	movw	r26, r20
    22e8:	c9 01       	movw	r24, r18
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = ubrr_value;
    22f0:	e9 e2       	ldi	r30, 0x29	; 41
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	80 83       	st	Z, r24
	UBRRH = ubrr_value >> 8;
    22f8:	e0 e4       	ldi	r30, 0x40	; 64
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	89 2f       	mov	r24, r25
    2302:	99 27       	eor	r25, r25
    2304:	80 83       	st	Z, r24
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for transmitting a new byte
	 * So wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2320:	eb e2       	ldi	r30, 0x2B	; 43
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	80 72       	andi	r24, 0x20	; 32
    232c:	90 70       	andi	r25, 0x00	; 0
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	b9 f3       	breq	.-18     	; 0x2320 <UART_sendByte+0xc>

	/* This Code:
	 * Puts the required data in the UDR register
	 * Clears the UDRE flag as the UDR register is not empty now
	 */
	UDR = data;
    2332:	ec e2       	ldi	r30, 0x2C	; 44
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC);             // Clear the TXC flag
	*******************************************************************/
}
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    234a:	eb e2       	ldi	r30, 0x2B	; 43
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	88 23       	and	r24, r24
    2352:	dc f7       	brge	.-10     	; 0x234a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2354:	ec e2       	ldi	r30, 0x2C	; 44
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
}
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <UART_sendString+0x6>
    2366:	0f 92       	push	r0
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	9b 83       	std	Y+3, r25	; 0x03
    236e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2370:	19 82       	std	Y+1, r1	; 0x01
    2372:	0e c0       	rjmp	.+28     	; 0x2390 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	fc 01       	movw	r30, r24
    2380:	e2 0f       	add	r30, r18
    2382:	f3 1f       	adc	r31, r19
    2384:	80 81       	ld	r24, Z
    2386:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_sendByte>
		i++;
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	fc 01       	movw	r30, r24
    239c:	e2 0f       	add	r30, r18
    239e:	f3 1f       	adc	r31, r19
    23a0:	80 81       	ld	r24, Z
    23a2:	88 23       	and	r24, r24
    23a4:	39 f7       	brne	.-50     	; 0x2374 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <UART_receiveString+0xa>
    23bc:	0f 92       	push	r0
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9b 83       	std	Y+3, r25	; 0x03
    23c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23c6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	8c 01       	movw	r16, r24
    23d4:	02 0f       	add	r16, r18
    23d6:	13 1f       	adc	r17, r19
    23d8:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
    23dc:	f8 01       	movw	r30, r16
    23de:	80 83       	st	Z, r24
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	8c 01       	movw	r16, r24
    23f4:	02 0f       	add	r16, r18
    23f6:	13 1f       	adc	r17, r19
    23f8:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_recieveByte>
    23fc:	f8 01       	movw	r30, r16
    23fe:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	fc 01       	movw	r30, r24
    240c:	e2 0f       	add	r30, r18
    240e:	f3 1f       	adc	r31, r19
    2410:	80 81       	ld	r24, Z
    2412:	83 32       	cpi	r24, 0x23	; 35
    2414:	31 f7       	brne	.-52     	; 0x23e2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	fc 01       	movw	r30, r24
    2422:	e2 0f       	add	r30, r18
    2424:	f3 1f       	adc	r31, r19
    2426:	10 82       	st	Z, r1
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	08 95       	ret

00002438 <__udivmodsi4>:
    2438:	a1 e2       	ldi	r26, 0x21	; 33
    243a:	1a 2e       	mov	r1, r26
    243c:	aa 1b       	sub	r26, r26
    243e:	bb 1b       	sub	r27, r27
    2440:	fd 01       	movw	r30, r26
    2442:	0d c0       	rjmp	.+26     	; 0x245e <__udivmodsi4_ep>

00002444 <__udivmodsi4_loop>:
    2444:	aa 1f       	adc	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	ee 1f       	adc	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	a2 17       	cp	r26, r18
    244e:	b3 07       	cpc	r27, r19
    2450:	e4 07       	cpc	r30, r20
    2452:	f5 07       	cpc	r31, r21
    2454:	20 f0       	brcs	.+8      	; 0x245e <__udivmodsi4_ep>
    2456:	a2 1b       	sub	r26, r18
    2458:	b3 0b       	sbc	r27, r19
    245a:	e4 0b       	sbc	r30, r20
    245c:	f5 0b       	sbc	r31, r21

0000245e <__udivmodsi4_ep>:
    245e:	66 1f       	adc	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	88 1f       	adc	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	1a 94       	dec	r1
    2468:	69 f7       	brne	.-38     	; 0x2444 <__udivmodsi4_loop>
    246a:	60 95       	com	r22
    246c:	70 95       	com	r23
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	9b 01       	movw	r18, r22
    2474:	ac 01       	movw	r20, r24
    2476:	bd 01       	movw	r22, r26
    2478:	cf 01       	movw	r24, r30
    247a:	08 95       	ret

0000247c <__prologue_saves__>:
    247c:	2f 92       	push	r2
    247e:	3f 92       	push	r3
    2480:	4f 92       	push	r4
    2482:	5f 92       	push	r5
    2484:	6f 92       	push	r6
    2486:	7f 92       	push	r7
    2488:	8f 92       	push	r8
    248a:	9f 92       	push	r9
    248c:	af 92       	push	r10
    248e:	bf 92       	push	r11
    2490:	cf 92       	push	r12
    2492:	df 92       	push	r13
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	ca 1b       	sub	r28, r26
    24a6:	db 0b       	sbc	r29, r27
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	09 94       	ijmp

000024b4 <__epilogue_restores__>:
    24b4:	2a 88       	ldd	r2, Y+18	; 0x12
    24b6:	39 88       	ldd	r3, Y+17	; 0x11
    24b8:	48 88       	ldd	r4, Y+16	; 0x10
    24ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    24bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    24be:	7d 84       	ldd	r7, Y+13	; 0x0d
    24c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c6:	b9 84       	ldd	r11, Y+9	; 0x09
    24c8:	c8 84       	ldd	r12, Y+8	; 0x08
    24ca:	df 80       	ldd	r13, Y+7	; 0x07
    24cc:	ee 80       	ldd	r14, Y+6	; 0x06
    24ce:	fd 80       	ldd	r15, Y+5	; 0x05
    24d0:	0c 81       	ldd	r16, Y+4	; 0x04
    24d2:	1b 81       	ldd	r17, Y+3	; 0x03
    24d4:	aa 81       	ldd	r26, Y+2	; 0x02
    24d6:	b9 81       	ldd	r27, Y+1	; 0x01
    24d8:	ce 0f       	add	r28, r30
    24da:	d1 1d       	adc	r29, r1
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	ed 01       	movw	r28, r26
    24e8:	08 95       	ret

000024ea <_exit>:
    24ea:	f8 94       	cli

000024ec <__stop_program>:
    24ec:	ff cf       	rjmp	.-2      	; 0x24ec <__stop_program>
